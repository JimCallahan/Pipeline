package com.sony.scea.pipeline.plugin.MRayTextureGroupAction.v1_0_0;

import java.io.*;
import java.util.*;
import java.util.Map.*;

import us.temerity.pipeline.*;
import us.temerity.pipeline.plugin.*;

/*------------------------------------------------------------------------------------------*/
/*   M R A Y   T E X T U R E   G R O U P   A C T I O N                                      */
/*------------------------------------------------------------------------------------------*/

/** 
 * Generates a group of optimized Mental Ray memory mappable textures, stored as secondary 
 * sequences, from source images. <P> 
 * 
 * Converts the images which make up the primary file sequence of a group of source
 * nodes into the texture maps which make up the secondary file sequences of this node.  The
 * {@link FileSeq} values of each primary source must have an exact prefix match among the 
 * secondary sequences or this action will fail.<P> 
 * 
 * Note that the MAP files generated by this Action are hardware specific so care needs
 * to be taken to insure that the hosts which generate the MAP files are of the same 
 * hardware type as the hosts which will use these files.  The best way of insuring this
 * is through the use of hardware specific Selection Keys. <P>
 * 
 * See the Mental Ray documentation for for details about <B>imf_copy</B>(1) and memory
 * mapped texture files. <P> 
 * 
 * This action defines the following single valued parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Image Source <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the images files to convert. <BR> 
 *   </DIV> <BR>
 *   <BR>
 * 
 *   Format <BR>
 *   <DIV style="margin-left: 40px;">
 *     The format of texture data stored in the MAP file. 
 *     <UL>
 *       <LI> Pyramid (mip-mapped texture)
 *       <LI> Flat (single texture)
 *     </UL>
 *   </DIV> <BR>
 *   <BR>
 * 
 *   Gamma <BR>
 *   <DIV style="margin-left: 40px;">
 *     Gama correction exponent.
 *   </DIV> <BR>
 *   <BR>
 * 
 *   Filter <BR>
 *   <DIV style="margin-left: 40px;">
 *     Overrides the default filter value. 
 *   </DIV> <BR>
 *   <BR>  
 *   
 *   Texel Layout <BR>
 *   <DIV style="margin-left: 40px;">
 *     How to organize output texel data.
 *     <UL>
 *       <LI> Scanlines
 *       <LI> Tiles
 *     </UL>
 *   </DIV> <BR>
 *   <BR>
 *   
 *   Byte Order <BR>
 *   <DIV style="margin-left: 40px;">
 *     The byte ordering of texel data in the output texture MAP file.  This must match the
 *     native byte order on the rendering 
 *     <UL>
 *       <LI> Little-Endian (x86)
 *       <LI> Big-Endian (others)
 *     </UL>
 *   </DIV> <BR>
 *   <BR>
 * 
 *   Extra Options <BR>
 *   <DIV style="margin-left: 40px;">
 *     Additional command-line arguments. <BR> 
 *   </DIV> <BR>
 * </DIV><P> 
 * 
 * By default, the "python" program is used by this action to run the "imf_copy" commands.  
 * An alternative program can be specified by setting PYTHON_BINARY in the Toolset 
 * environment to the name of the Python interpertor this Action should use.  When naming an 
 * alternative Python interpretor under Windows, make sure to include the ".exe" extension 
 * in the program name.
 */
public
class MRayTextureGroupAction
  extends PythonActionUtils
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  public
  MRayTextureGroupAction() 
  {
    super("MRayTextureGroup", new VersionID("1.0.0"), "SCEA", 
	  "Generates optimized Mental Ray memory mappable textures from source images.");
    
    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("Pyramid");
      choices.add("Flat");

      {
	ActionParam param = 
	  new EnumActionParam
	  (aFormat, 
	   "The format of texture data stored in the MAP file.", 
	   "Pyramid", choices);
	addSingleParam(param);
      }
    }   

    {
      ActionParam param = 
	new DoubleActionParam
	(aGamma, 
	 "Gamma correction exponent.", 
	 null);
      addSingleParam(param);
    }

    {
      ActionParam param = 
	new DoubleActionParam
	(aFilter, 
	 "Overrides the default filter value.", 
	 null);
      addSingleParam(param);
    }

    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("Scanlines");
      choices.add("Tiles");

      {
	ActionParam param = 
	  new EnumActionParam
	  (aTexelLayout, 
	   "How to organize output texel data in the generated texture MAP file.",
	   "Scanlines", choices);
	addSingleParam(param);
      }
    }   

    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("Little-Endian");
      choices.add("Big-Endian");

      {
	ActionParam param = 
	  new EnumActionParam
	  (aByteOrder, 
	   "The byte ordering of texel data in the generated texture MAP file.", 
	   "Little-Endian", choices);
	addSingleParam(param);
      }
    }   

    addExtraOptionsParam(); 

    {  
      LayoutGroup layout = new LayoutGroup(true);
      layout.addEntry(aFormat);   
      layout.addEntry(aGamma);
      layout.addEntry(aFilter);
      layout.addSeparator();   
      layout.addEntry(aTexelLayout);
      layout.addEntry(aByteOrder);
      layout.addSeparator();      
      addExtraOptionsParamToLayout(layout);

      setSingleLayout(layout);   
    }
    
    addSupport(OsType.MacOS);
    addSupport(OsType.Windows);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct a {@link SubProcessHeavy SubProcessHeavy} instance which when executed will 
   * fulfill the given action agenda. <P> 
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @param outFile 
   *   The file to which all STDOUT output is redirected.
   * 
   * @param errFile 
   *   The file to which all STDERR output is redirected.
   * 
   * @return 
   *   The SubProcess which will fulfill the agenda.
   * 
   * @throws PipelineException 
   *   If unable to prepare a SubProcess due to illegal, missing or imcompatable 
   *   information in the action agenda or a general failure of the prep method code.
   */
  @Override
  public SubProcessHeavy
  prep
  (
    ActionAgenda agenda,
    File outFile, 
    File errFile 
  )
    throws PipelineException
  {
    /* file sequence checks */ 
    
    Path targetPath = null;
    TreeMap<String, Path> sourceSeqs = new TreeMap<String, Path>();
    TreeMap<String, Path> targetSeqs = new TreeMap<String, Path>();
    
    {
      targetPath = getPrimaryTargetPath(agenda, "Primary File");
      
      for (FileSeq sSeq : agenda.getSecondaryTargets()) {
        FilePattern filePattern = sSeq.getFilePattern();
        String suffix = filePattern.getSuffix();
        if((suffix == null) || !suffix.equals("map"))
          throw new PipelineException
            ("The target secondary file sequence (" + sSeq + ") must be a Mental Ray" + 
             "memory mappable pyramid textures (.map)!");
        if (!sSeq.isSingle())
          throw new PipelineException
            ("The target secondary file sequence (" + sSeq + ") must be a single file " +
             "sequence");
        Path sPath = new Path(agenda.getTargetPath(), sSeq.getPath(0));
        targetSeqs.put(filePattern.getPrefix(), sPath);
      }
      
      for (String source : agenda.getSourceNames()) {
        FileSeq sSeq = agenda.getPrimarySource(source);
        Path sPath = getWorkingNodeFilePath(agenda, source, sSeq) ;
        
        String prefix = sSeq.getFilePattern().getPrefix();
        
        if (sourceSeqs.containsKey(prefix))
          throw new PipelineException
            ("More than one source node has the prefix (" + prefix + ")");
        
        sourceSeqs.put(prefix, sPath);
      }

      for (String prefix : sourceSeqs.keySet()) {
        if (!targetSeqs.containsKey(prefix))
          throw new PipelineException
            ("The target sequence with the prefix (" + prefix + ") does not have an " +
             "equivilent source node.");
      }
      
      for (String prefix : targetSeqs.keySet()) {
        if (!sourceSeqs.containsKey(prefix))
          throw new PipelineException
          ("The source node with the prefix (" + prefix + ") does not have an " +
           "equivilent target sequence.");
      }
      
    }
    
    /* build common command-line arguments */ 
    ArrayList<String> args = new ArrayList<String>();    
    {
      switch(getSingleEnumParamIndex(aFormat)) {
      case 0:
        args.add("-p");
        break;

      case 1:
        break;
        
      default:
        throw new PipelineException
          ("Illegal Format value!");	
      }

      {
        Double filter = (Double) getSingleParamValue(aFilter); 
        if(filter != null) {
          if(filter < 0.0) 
            throw new PipelineException
              ("The value (" + filter + ") of parameter (" + aFilter + ") cannot be " + 
               "negative!");               

          args.add("-f");
          args.add(filter.toString());
        }
      }
      
      { 
        Double gamma = (Double) getSingleParamValue(aGamma); 
        if(gamma != null) {
          if(gamma < 0.0) 
            throw new PipelineException
              ("The value (" + gamma + ") of parameter (" + aGamma + ") cannot be " + 
               "negative!");     

          args.add("-g");
          args.add(gamma.toString());
        }
      }
      
      switch(getSingleEnumParamIndex(aTexelLayout)) {
      case 0:
        break;
        
      case 1:
        args.add("-r");
        break;
        
      default:
        throw new PipelineException
          ("Illegal Texel Layout value!");	
      }
      
      switch(getSingleEnumParamIndex(aByteOrder)) {
      case 0:
        args.add("-L");
        break;
        
      case 1:
        args.add("-B");
        break;
        
      default:
        throw new PipelineException
          ("Illegal Byte Order value!");	
      }

      args.addAll(getExtraOptionsArgs());
    }
      
    /* texture conversion program */ 
    String program = "imf_copy";
    if(PackageInfo.sOsType == OsType.Windows) 
      program = "imf_copy.exe";

    TreeMap<Path, Path> sourceToTargets = new TreeMap<Path, Path>();
    for (Entry<String, Path> entry : sourceSeqs.entrySet()) {
      sourceToTargets.put(entry.getValue(), targetSeqs.get(entry.getKey()));
    }
    
    /* create the process to run the action */ 
    return createCoolPythonSubProcess(agenda, program, args, sourceToTargets, targetPath,
                                     null, outFile, errFile); 
  }


  private SubProcessHeavy
  createCoolPythonSubProcess
  (
   ActionAgenda agenda,
   String program, 
   ArrayList<String> args,
   TreeMap<Path, Path> sourceToTargetPaths, 
   Path targetPath, 
   Map<String,String> env,  
   File outFile, 
   File errFile    
  )  
    throws PipelineException
  {
    File script = createTemp(agenda, "py"); 
    try {
      FileWriter out = new FileWriter(script);

      /* include the "launch" method definition */ 
      out.write(getPythonLaunchHeader()); 
      
      /* construct to common command-line arguments */  
      String common = null;
      {
        StringBuilder buf = new StringBuilder();

        buf.append("launch('" + program + "', [");
        
        boolean first = true;
        for(String arg : args) {
          if(!first) 
            buf.append(", ");
          first = false;
          buf.append("'" + arg + "'");
        }

        if(!args.isEmpty()) 
          buf.append(", ");
     
        common = buf.toString();
      }

      /* convert the frames */ 
      {
        int wk;
        for(Entry<Path, Path> entry : sourceToTargetPaths.entrySet()) {
          out.write(common + "'" + entry.getKey() + "', '" + entry.getValue()+ "'])\n");
        }
      }
      
      
      out.write
      	("file = open('" + targetPath +"', 'w')\n" + 
      	 "file.write('')\n" + 
      	 "file.close()\n"); 
      
      out.write("\n" + 
                "print 'ALL DONE.'\n");
      
      out.close();
    } 
    catch (IOException ex) {
      throw new PipelineException
        ("Unable to write the temporary Python script file (" + script + ") for Job " + 
         "(" + agenda.getJobID() + ")!\n" +
         ex.getMessage());
    }

    /* create the process to run the action */ 
    return createPythonSubProcess(agenda, script, null, env, outFile, errFile); 
  }

  
  
  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = 7318260099298639643L;

  public static final String aGamma       = "Gamma";
  public static final String aFilter      = "Filter";
  public static final String aFormat      = "Format";
  public static final String aTexelLayout = "TexelLayout";
  public static final String aByteOrder   = "ByteOrder";
}

