

File Modified: 
  
[user]              1. File modified. 
[os->server]        2. If file is on watched list, notify Server of the change.
[server]            3. Update file status table: exists, last modified, size, checksum.
[server]            4. Recompute PState for node associated with updated file.
[server]            5. Recompute dependent (downstream) node PStates.  
[server->client]    6. Send updated PState(s) to all clients interested in updated nodes.
[client]            7. Update UI to reflect new PStates.



Queue Job State Changed: 

[overseer]          1. Job started, finished or killed.
[overseer->server]  2. Notify server of the change.
[server]            3. Recompute PState for node associated with updated job.
[server]            4. Update dependent (downstream) node PStates.  
[server->client]    5. Send updated PStates to all clients interested in updated nodes.
[client]            6. Update UI to reflect new PStates.



Watch Node: 

[client->server]    1. Notify server of client's interest in the node.
[server]            2. Mark node as watched by client.
[server]            3. Mark dependencies (upstream) nodes as watched by client.
[server->os]        4. Notify the OS to start watching the files associated with any newly 
		        watched nodes.


Unwatch Node: 

[client->server]    1. Notify server of client's loss of interest in the node.
[server]            2. Remove client from node's watched list.
[server]            3. Remove client from all dependency (upstream) node's watched lists.



Pipeline Ops:  Check-In, Check-Out, Export, Make, etc...

[client->server]    1. Notify server of operation request.
[server]            2. Start thread to perform operation. 
[server]            3. Compute a set of node/filesystem changes which implement the operation
		        by analyzing the current node PStates and file status table.
[server]            4. If all criteria for operation are met, apply these changes atomically.
[server->client]    5. Notify client of success/failure of operation.
[server]            6. Recompute PState for changed nodes.
[server]            7. Recompute dependent (downstream) node PStates.  
[server->client]    8. Send updated PState(s) to all clients interested in updated nodes.
[client]            9. Update UI to reflect new PStates.


---------------------------------------------------------------------------------------------------

Server-Side Data Structures:

+ PNode/PVersion table: 
  - Each node can be independently loaded from or saved to the filesystem via Java's
     serialization mechanism.
  - A set of nodes can be modified as an atomic operation.

+ PMod/PState tables: 
  - Seperately locked tables for each active View.  
  - Each node can be independently loaded from or saved to the filesystem via Java's
     serialization mechanism.
  - A set of nodes can be modified as an atomic operation.
  
