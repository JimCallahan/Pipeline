
----------------------------------------------------------------------------------------------

Given a selected set of primary files associated with the node: 

  1. Group selected files into batches to regenerate.

      - If the node does NOT have an Action or if the action is disabled, return immediately.

      - If the ExecutionModel is Serial, the batch will contain all files.
       
        If all of the per-file QueueStates are Finished, the no jobs are generated and 
        the method returns immedieately.

        If all of the per-file QueueStates are either Queued or Running and all files
        are generated by the same Job, the Job is added to the ExistingJobs table and 
        the method returns immedieately.  

	If the per-file QueueStates are a mixture of Queued/Running and other states, 
        then throw an exception.  This can occur when the frame range has been adjusted
        but a job is still in the queue which will regenerate the old frame range.


      - If the ExecutionModel is Parallel, the selected files will be grouped
        in batches of contiguous files which containing no more than BatchSize files.

        Note that before grouping into batches, files which meet one or more of 
        the following criteria will be removed from the selected list: 
 
        + The per-file QueueState is Finished.
       
        + The per-file QueueState is Queued or Running.  The Job associated with the file
          is also added to the ExistingJobs table. 

        + A Job exists in the GeneratedJobs table which will create the file when executed. 


  2. For each batch:
      
      A. Determine the indices of the source (upstream) files required by the batch.

         - Ignore any source nodes linked to the target node with a LinkPolicy of None.	   

         - If the LinkRelationship is All, then use all upstream files.

         - If the LinkRelationship is OneToOne, then use the corresponding files (plus 
           FrameOffset) of the source node.  
    
           + If the OverflowPolicy is Abort, then throw an Exception if any of the upstream
             files out out-of-range.

           + If the OverflowPolicy is Ignore, remove any out-of-range files from the 
             list of upstream files.

      B. Recursively perform the entire procedure on the selected files of the 
         upstream nodes.

         - Ignore the files associated with source (upstream) nodes which are linked 
	   to the target node with a LinkPolicy of NodeOnly.

      C. Collect the IDs of the source Jobs.  

	 Ignore the source jobs of files linked to the target node with a LinkPolicy of None
         or NodeOnly.

         A source job may already exist in the Queue if a source file had a per-file 
         QueueState of Queued or Running.  

         If the source file has a per-file QueueState of Stale, Aborted or Failed
         a newly generated Job will exist for the source file.

      D. Generate a job for the batch and add it to the GeneratedJobs table.
         
         The source file sequences of the generated job will be those determined by 
	 stage A.

         The generated job will depend on the existing and newly generated source jobs 
         collected in stage C.  
      

Once all nodes/files have been processed, a JobGroup is created which contains the contents
of the GeneratedJobs and ExistingJobs tables.  The jobs from the GeneratedJobs table which
generate files associated with the root node are the RootJobs of the JobGroup.





------------------------------------------------------------------------------------
Job Dependencies: 

  A                   B
------------------------------------------------------------------------------------
Serial   --ALL--> Serial
Serial   --ALL--> Parallel
Parallel --ALL--> Serial
Parallel --ALL--> Parallel

  + Source Jobs:     all jobs of B 
  + Source FileSeqs: all FileSeqs of B


Serial   --1:1--> Serial
Serial   --1:1--> Parallel

  + Source Jobs:     those jobs of B within the A+offset range
  + Source FileSeqs: the FileSeqs of B trimmed to A+offset range 


Parallel --1:1--> Parallel
Parallel --1:1--> Serial

  + Source Jobs:     the A+offset job of B 
  + Source FileSeqs: the single frame FileSeqs containing the A+offset frame





------------------------------------------------------------------------------------

For each file: 

QueueState: 

  Queue or Runing
    A job from another JobGroup already exists and should be used instead of 
    generating new jobs.
 
  Finished
    No job needs to be generated.

  Stale, Aborted or Failed
    A new job should be generated replacing any previously existing job.

  Undefined
    Error!



------------------------------------------------------------------------------------

JOB STATE 

TIME STAMPS
- Submitted
- Started 
- Completed

JOB REQUIREMENTS
(same as JNodeDetails)

TARGETS
- Primary Target-
 Secondary Targets

SOURCES 
SOURCE-NODE-NAME1
- Primary Sources 
- Secondary Sources
SOURCE-NODE-NAME2
- Primary Sources 
- Secondary Sources
...

PROCESS DETAILS
- Hostname
- Exit Code

- Commandline
- Working Directory
- ENVIRONMENT
  - name/value pairs... 

EXECUTION STATISTICS 
- User Time 
- System Time

- Average/Max Resident Memory
- Average/Max Virtual Memory
- Page Faults

- Logs: [OUTPUT] [ERROR]  (buttons)

	
