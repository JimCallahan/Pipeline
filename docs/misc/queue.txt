
DISPATCHER: 
   
  + Data Structures: 

     - pWaiting (ConcurrentLinkedQueue<QueueJob>): 
         The jobs which are waiting on upstream jobs to complete.
	 
	 The plmaster(1) daemon adds new jobs to the end of this queue and the dispatcher
         iterates over this list moving jobs ready for execution to the Ready list and updates
	 their entry in the JobInfo table. 

     - pReady (LinkedList<QueueJob>): 
         The jobs which are ready to be run in order of priority.

	 The dispatcher iterates over this list to assign jobs to available machines.  When
         a job is assigned, the entry in the pJobInfo table is updated and the job is removed
         from this list.

     - pHitList (ConcurrentLinkedQueue<Long>): 
         The IDs of jobs to kill as soon as possible.

         The dispatcher removes jobs from the Waiting queue and sets their QueueState to 
	 Aborted if their job ID is found in this list.  

     
     - pJobs (TreeMap<Long,QueueJob>)
       synchronized(pJobs):
         The table of all existing QueueJobs indexed by job ID.  

	 QueueJobs are read-only and can only be added or removed from the table.

     - pJobInfo (TreeMap<Long,QueueJobInfo>)
       pJobInfoLocks (TreeMap<Long,ReentrantReadWriteLock>):
         The table of up-to-date information for each job indexed by job ID.  The QueueJobInfo
         contains: current QueueState, submission/start/stop timestamps, host assignment, 
	 exit code, user/system CPU usage, resident/virtual memory usage, page faults.  

	 These QueueJobInfo entries are mutable and are changed by the queue as the jobs are 
	 dispatched and executed.  
  


     - pNodeJobs (TreeMap<NodeID,TreeMap<String,Long>>)
       synchronized(pNodeJobs):
         The table of job IDs which will regenerate each primary file associated with a
         working version of a node indexed by NodeID and primary filename.  If the NodeID is 
	 missing from the table, then no jobs exist for that working version.  If an 
	 individual primary filename is missing or the job ID is (null), then no jobs exists 
	 which regenerate that particular file.  Note that it is possible for several files 
	 to be generated by the same QueueJob, therefore job IDs may be repeated in per-file
	 table for a particular working version of a node.

     - pJobGroups (TreeMap<Long,QueueJobGroup>)
       synchronized(pJobGroups):
         The table of QueueJobGroups indexed by group ID.  QueueGroups contain additional 
	 information about a collection of QueueJobs submitted together.



     - pHosts (TreeMap<String,QueueHost>)
       synchronized(pJobGroups):
         The table of hosts which are capable of running jobs indexed by fully resolved
	 hostname.




  + Threads:

    - Server Thread(s): 
        Created to handle an incoming network connection from plmaster(1).

        + QueueRequest: 
            A request from containing a QueueGroup with its associated tree of QueueJobs 
	    to enqueue.  

	    Locks both StateTable and NodeJobsTable.  If all of the existing per-file 
            jobs IDs in NodeJobsTable are either (null) or correspond to QueueJobs which
            have a QueueState of Finished or Aborted in the StateTable then all jobs 
            are submitted.  Otherwise all jobs are rejected and no change is made to 
            any datastructure.  On success, the QueueStates for all submitted QueueJobs are 
            set to Queued in the StateTable and the per-file job IDs are replaced with the 
            submitted job IDs.  The StateTable and NodeJobsTable are then unlocked.

            If the submission was successful:

              - The QueueGroup is added to the GroupsTable protected by a lock.

              - All QueueJobs are added to the JobsTable protected by a lock.

	      - All QueueJobs from the request are added to the end of the WaitQueue.  
	        No locking of WaitQueue is required.  


        + KillRequest: 
            A request to kill (or abort) QueueJobs which are waiting, ready or running 
            which match the given set of job IDs.  All jobs downstream from the jobs with 
            the given IDs will also be killed (or aborted) by the Dispatcher Thread.  The 
	    request simply adds the job IDs to end of the KillQueue.  No locking of KillQueue
            is required.

        + 
        


        + AddHostRequest: 
            A request to add a new host to the table of machines capable of running jobs.
            Locks the HostTable.

        + RemoveHostRequest: 
            A request to remove an existing host from the table of machines capable of 
            running jobs. Locks the HostTable.
  
        + ModifyHostRequest: 
            A request to change the properties of an existing host such as: SelectionKeys, 
            enabled/disabled state, reserved user name, etc.. Locks the HostTable.
            
 

    - Dispatcher Thread: 
        
        + Process WaitQueue: 
            Moves any job which 
