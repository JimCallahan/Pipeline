// $Id: JLogsDialog.java,v 1.5 2010/01/07 22:14:34 jesse Exp $

package us.temerity.pipeline.ui;

import us.temerity.pipeline.*;
import us.temerity.pipeline.glue.GlueException;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;

/*------------------------------------------------------------------------------------------*/
/*   L O G S   D I A L O G                                                                  */
/*------------------------------------------------------------------------------------------*/

/**
 * Displays log messages generated by the LogMgr class. 
 */ 
public 
class JLogsDialog
  extends JTopLevelDialog
  implements DocumentListener
{
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
    
  /**
   * Construct a new dialog.
   * 
   * @param controls
   *   The kinds of loggers which can be controlled from the dialog.
   */ 
  public 
  JLogsDialog
  (
   Collection<LogMgr.Kind> controls
  ) 
  {
    super("Log History");

    pLevelFields = new EnumMap<LogMgr.Kind,JCollectionField>(LogMgr.Kind.class);

    /* create dialog body components */ 
    {
      JPanel body = new JPanel(); 
      body.setName("MainDialogPanel");
      body.setLayout(new BoxLayout(body, BoxLayout.Y_AXIS));

      if(!controls.isEmpty()) {
	ArrayList<String> values = new ArrayList<String>();
	for(LogMgr.Level level : LogMgr.Level.all())
	  values.add(level.toString());

	{
	  Box hbox = new Box(BoxLayout.X_AXIS);	

	  hbox.add(Box.createHorizontalGlue());

	  boolean first = true;
	  for(LogMgr.Kind kind : controls) {
	    if(!first) 
	      hbox.add(Box.createRigidArea(new Dimension(40, 0)));
	    first = false;
	  
	    {
	      JLabel label = 
		UIFactory.createFixedLabel
		(kind.toString().toUpperCase() + ":", sTSize, JLabel.RIGHT); 
	      
	      hbox.add(label);
	    }
	    
	    hbox.add(Box.createRigidArea(new Dimension(10, 0)));
	    
	    {
	      JCollectionField field = 
		UIFactory.createCollectionField(values, sVSize);

	      pLevelFields.put(kind, field);

	      field.setMaximumSize(new Dimension(sVSize, 19));
	      field.addActionListener(this);
	      field.setActionCommand("level-changed:" + kind);
	      
	      hbox.add(field);
	    }
	  }

	  hbox.add(Box.createRigidArea(new Dimension(15, 0)));
	  hbox.add(Box.createHorizontalGlue());

	  body.add(hbox);
	}

	body.add(Box.createRigidArea(new Dimension(0, 20)));
      }

      body.add(Box.createRigidArea(new Dimension(700, 0)));

      {
	JTextArea area = new JTextArea(8, 35); 
	pMessageArea = area;

	area.setName("TextArea");

	area.setLineWrap(true);
	area.setWrapStyleWord(true);
	area.setEditable(false);
	area.setFocusable(true);

	area.getDocument().addDocumentListener(this);
      }
      
      {
	JScrollPane scroll = 
          UIFactory.createScrollPane
          (pMessageArea, 
           JScrollPane.HORIZONTAL_SCROLLBAR_NEVER, 
           JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
           null, null, null); 
	
	body.add(scroll);
      }

      String extra[][] = {
	{ "Enable ", "enable" },
	null, 
	{ "Save...", "save" },
	{ "Clear",  "clear" }
      };

      JButton btns[] = super.initUI("Log History:", body, null, null, extra, "Close", null);

      pEnableButton = btns[0];
      pSaveAsButton = btns[2];
      pSaveAsButton.setEnabled(false);

      pack();
    } 

    pSaveAsDialog = new JFileSelectDialog(this, "Save Logs", "Save Log Messages:", 
					  "Save As:", 64, "Save");
    pSaveAsDialog.updateTargetFile(null);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Set whether logging to the dialog should be enabled. 
   */ 
  public void 
  setEnabled
  (
   boolean tf
  ) 
  {
    if(tf) {
      LogMgr.getInstance().logToTextArea(pMessageArea); 
      pEnableButton.setText("Disable");
      pEnableButton.setActionCommand("disable");
    }
    else {
      LogMgr.getInstance().logToTextArea(null); 
      pEnableButton.setText("Enable");
      pEnableButton.setActionCommand("enable");
    }
  }


  /*----------------------------------------------------------------------------------------*/
  /*   C O M P O N E N T   O V E R R I D E S                                                */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Shows or hides this component.
   */ 
  public void 
  setVisible
  (
   boolean isVisible
  )
  {
    if(isVisible) {
      for(LogMgr.Kind kind : pLevelFields.keySet()) {
	JCollectionField field = pLevelFields.get(kind); 
	field.setSelected(LogMgr.getInstance().getLevel(kind).toString());
      }      
    }
    else {
      pSaveAsDialog.setVisible(false);
    }

    super.setVisible(isVisible);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   L I S T E N E R S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /*-- ACTION LISTENER METHODS -------------------------------------------------------------*/

  /** 
   * Invoked when an action occurs. 
   */ 
  public void 
  actionPerformed
  (
   ActionEvent e
  ) 
  {
    String cmd = e.getActionCommand();
    if(cmd.startsWith("level-changed:")) 
      doLevelChanged((JCollectionField) e.getSource(), cmd.substring(14));
    else if(cmd.equals("enable")) 
      setEnabled(true); 
    else if(cmd.equals("disable")) 
      setEnabled(false); 
    else if(cmd.equals("save")) 
      doSave();
    else if(cmd.equals("clear")) 
      doClear();
    else 
      super.actionPerformed(e);
  }


  /*-- DOCUMENT LISTENER METHODS -----------------------------------------------------------*/

  /**
   * Gives notification that an attribute or set of attributes changed.
   */
  public void 	
  changedUpdate
  (
   DocumentEvent e
  )
  {}

  /**
   * Gives notification that there was an insert into the document.
   */ 
  public void 	
  insertUpdate
  (
   DocumentEvent e
  )
  {
    pSaveAsButton.setEnabled(e.getDocument().getLength() > 0); 
  }
          
  /**
   * Gives notification that a portion of the document has been removed.
   */ 
  public void 	
  removeUpdate
  (
   DocumentEvent e
  )
  {
    pSaveAsButton.setEnabled(e.getDocument().getLength() > 0); 
  }
          


  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Logging level changed.
   */ 
  private void 
  doLevelChanged
  (
   JCollectionField field, 
   String kindStr
  ) 
  {
    String selected = field.getSelected();
    if(selected != null) {
      LogMgr.Kind kind = LogMgr.Kind.valueOf(LogMgr.Kind.class, kindStr);
      LogMgr.Level level = LogMgr.Level.valueOf(LogMgr.Level.class, selected);
      LogMgr.getInstance().setLevel(kind, level);
    }
  }

  /**
   * Save the current messages to file.
   */ 
  private void 
  doSave() 
  {
    String text = pMessageArea.getText();
    if(text == null) 
      return;

    pSaveAsDialog.updateTargetName("logs.txt");
    pSaveAsDialog.setVisible(true);    
    if(pSaveAsDialog.wasConfirmed()) {
      File file = pSaveAsDialog.getSelectedFile();
      if(file != null) {
	try {
	  FileWriter out = new FileWriter(file);
	  out.write(text);
	  out.flush();
	  out.close();
	}
	catch(IOException ex) {
	  showErrorDialog(ex);
	}
      }
    }
  }

  /**
   * Clear the existing log messages.
   */ 
  private void 
  doClear() 
  {
    pMessageArea.setText(null);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = -5441098030938285298L;

  private static int sTSize = 30;
  private static int sVSize = 120;


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The logging level control fields. 
   */ 
  private EnumMap<LogMgr.Kind,JCollectionField>  pLevelFields; 

  /**
   * The log message text.
   */ 
  private JTextArea pMessageArea;
  
  /**
   * The dialog footer buttons.
   */ 
  private JButton  pEnableButton; 
  private JButton  pSaveAsButton; 

  /**
   * Save logs file selection dialog. 
   */ 
  private JFileSelectDialog  pSaveAsDialog;

}
