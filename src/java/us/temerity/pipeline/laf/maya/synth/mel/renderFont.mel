/*------------------------------------------------------------------------------------------*/
/*  R E N D E R   F O N T                                                                   */
/*                                                                                          */
/*   Generates a complete scene suitable for rendering a font.  Each printable character    */
/*   with ASCII codes between 0 and 127 will be rendered on the frame number which          */
/*   corresponds to its ASCII code.  In addition to the characters, an orthographic camera  */
/*   called "fontcam" will also be generated and placed in the correct position to render   */
/*   the characters.  A Java class file will also be written which contains information     */
/*   about the origins and extents of each character for this font.                         */
/*                                                                                          */
/*   The character images can be generated by simply rendering the 0-127 frame range with   */
/*   the "fontcam1" camera.                                                                 */
/*------------------------------------------------------------------------------------------*/

global proc
renderFont
(
 string $font,     /* IN: name of the font as passed to textCurves() */
 string $dir,      /* IN: the directory to place the generated Java class file */ 
 string $class     /* IN: name of generated Java class */ 
)
{
  /* determine the OS specific line terminator */ 
  string $nl = "\n";  
  {
    string $tmp = `getenv "OS"`;
    if(size($tmp) > 0) {
      $nl = "\r\n";
      print "This is a lame NT system...\n";
    }
  }

  /* the renderable ASCII character set */ 
  string $ascii[] = {
    "",    // 0  
    "",    // 1  
    "",    // 2  
    "",    // 3  
    "",    // 4  
    "",    // 5  
    "",    // 6  
    "",    // 7  
    "",    // 8  
    "",    // 9  
    "",    // 10 
    "",    // 11 
    "",    // 12 
    "",    // 13 
    "",    // 14 
    "",    // 15 
    "",    // 16 
    "",    // 17 
    "",    // 18 
    "",    // 19 
    "",    // 20 
    "",    // 21 
    "",    // 22 
    "",    // 23 
    "",    // 24 
    "",    // 25 
    "",    // 26 
    "",    // 27 
    "\\",  // 28 
    "",    // 29 
    "",    // 30 
    "",    // 31 
    "",	   // 32 
    "!",   // 33 
    "\"",  // 34 
    "#",   // 35 
    "$",   // 36 
    "%",   // 37 
    "&",   // 38 
    "'",   // 39 
    "(",   // 40 
    ")",   // 41 
    "*",   // 42 
    "+",   // 43 
    ",",   // 44 
    "-",   // 45 
    ".",   // 46 
    "/",   // 47 
    "0",   // 48 
    "1",   // 49 
    "2",   // 50 
    "3",   // 51 
    "4",   // 52 
    "5",   // 53 
    "6",   // 54 
    "7",   // 55 
    "8",   // 56 
    "9",   // 57 
    ":",   // 58 
    ";",   // 59 
    "<",   // 60 
    "=",   // 61 
    ">",   // 62 
    "?",   // 63 
    "@",   // 64 
    "A",   // 65 
    "B",   // 66 
    "C",   // 67 
    "D",   // 68 
    "E",   // 69 
    "F",   // 70 
    "G",   // 71 
    "H",   // 72 
    "I",   // 73 
    "J",   // 74 
    "K",   // 75 
    "L",   // 76 
    "M",   // 77 
    "N",   // 78 
    "O",   // 79 
    "P",   // 80 
    "Q",   // 81 
    "R",   // 82 
    "S",   // 83 
    "T",   // 84 
    "U",   // 85 
    "V",   // 86 
    "W",   // 87 
    "X",   // 88 
    "Y",   // 89 
    "Z",   // 90 
    "[",   // 91 
    "\\",  // 92 
    "]",   // 93 
    "^",   // 94 
    "_",   // 95 
    "`",   // 96 
    "a",   // 97 
    "b",   // 98 
    "c",   // 99 
    "d",   // 100
    "e",   // 101
    "f",   // 102
    "g",   // 103
    "h",   // 104
    "i",   // 105
    "j",   // 106
    "k",   // 107
    "l",   // 108
    "m",   // 109
    "n",   // 110
    "o",   // 111
    "p",   // 112
    "q",   // 113
    "r",   // 114
    "s",   // 115
    "t",   // 116
    "u",   // 117
    "v",   // 118
    "w",   // 119
    "x",   // 120
    "y",   // 121
    "z",   // 122
    "{",   // 123
    "|",   // 124
    "}",   // 125
    "~",   // 126
    ""	   // 127
  };	     

  /* create camera */ 
  string $camera[] = `camera -n fontcam -hc "viewSet -f %camera" -o 1 -ow 1.1`;
  setAttr ($camera[0] + ".translateX") 0.45;
  setAttr ($camera[0] + ".translateY") 0.25;
  setAttr ($camera[0] + ".translateZ") 1.0;
  

  /* create letters */ 
  float $originX[128], $originY[128], $extX[128], $extY[128];
  int $wk;
  for($wk=0; $wk<128; $wk++) {
    if(size($ascii[$wk]) != 0) {
      string $c[] = `textCurves -name "Curve" -ch 0 -f $font -t ($ascii[$wk])`;
      string $p[] = `planarSrf -name ("Trim" + $c[0]) -ch 0 -tol 0.01 -o on -po 0 $c[0]`;

      setKeyframe -at "visibility" -ott "step" -t ($wk-1) -v 0 $p[0];
      setKeyframe -at "visibility" -ott "step" -t $wk     -v 1 $p[0];
      setKeyframe -at "visibility" -ott "step" -t ($wk+1) -v 0 $p[0];

      $originX[$wk] = `getAttr ($c[0] + ".boundingBoxMinX")`;
      $originY[$wk] = `getAttr ($c[0] + ".boundingBoxMinY")`;
      
      $extX[$wk] = `getAttr ($c[0] + ".boundingBoxMaxX")` - $originX[$wk];
      $extY[$wk] = `getAttr ($c[0] + ".boundingBoxMaxY")` - $originY[$wk];

      delete $c[0];
    }
  }
  
  /* open the character UV info file */ 
  $cname = ($class + "FontGeometry");
  int $out = `fopen ($dir + "/" + $cname + ".java") "w"`;
  if($out == 0) 
    error("Unable to open the Java class file for writing: " + $dir + "/" + $cname + ".java");

  /* write the class */ 
  {
    fprint $out 
      ("// Automatically generated by \"pipeline/data/maya/mel/renderFont.mel\"" + $nl +
       "//   DO NOT EDIT MANUALLY!" + $nl +
       $nl +
       "package us.temerity.pipeline.ui;" + $nl +
       $nl +
       "import us.temerity.pipeline.math.*;" + $nl +
       $nl +  
       "public" + $nl +
       "class " + $cname + $nl +
       "   implements FontGeometry" + $nl +
       "{" + $nl + 
       "  /*-----------------------------------------------------------------------*/" + $nl +
       "  /*   C O N S T R U C T O R                                               */" + $nl +
       "  /*-----------------------------------------------------------------------*/" + $nl +
       $nl +  
       "  public" + $nl +
       "  " + $cname + "()" + $nl +
       "  {}" + $nl +
       $nl +  
       $nl +
       $nl +
       "  /*-----------------------------------------------------------------------*/" + $nl +
       "  /*   A C C E S S                                                         */" + $nl +
       "  /*-----------------------------------------------------------------------*/" + $nl +
       $nl +
       "  public Point3d" + $nl +
       "  getOrigin" + $nl +
       "  (" + $nl +
       "   char code" + $nl +
       "  )" + $nl +
       "  {" + $nl +
       "    if(sOrigin[code] != null)" + $nl +
       "      return new Point3d(sOrigin[code]);" + $nl +
       "    return null;" + $nl +
       "  }" + $nl +    
       $nl +
       "  public Vector3d " + $nl +
       "  getExtent" + $nl +
       "  (" + $nl +
       "   char code" + $nl +
       "  )" + $nl +
       "  {" + $nl +
       "    if(sExtent[code] != null)" + $nl +
       "      return new Vector3d(sExtent[code]);" + $nl +
       "    return null;" + $nl +
       "  }" + $nl +    
       $nl +   
       $nl + 
       $nl +
       "  /*-----------------------------------------------------------------------*/" + $nl +
       "  /*   I N T E R N A L S                                                   */" + $nl +
       "  /*-----------------------------------------------------------------------*/" + $nl +
       $nl +
       "  private static final Point3d sOrigin[] = {" + $nl);

    for($wk=0; $wk<128; $wk++) {
      if(size($ascii[$wk]) != 0) 
	fprint $out 
	  ("    new Point3d(" + $originX[$wk] + ", " + $originY[$wk] + ", 0.0)," + $nl);
      else 
	fprint $out ("    null," + $nl);
    }

    fprint $out 
      ("  };" + $nl +
       $nl + 
       "  private static final Vector3d sExtent[] = {" + $nl);

    for($wk=0; $wk<128; $wk++) {
      if(size($ascii[$wk]) != 0) 
	fprint $out 
	  ("    new Vector3d(" + $extX[$wk] + ", " + $extY[$wk] + ", 0.0)," + $nl);
      else 
	fprint $out ("    null," + $nl);
    }
    
    fprint $out 
      ("  };" + $nl +
       "}" + $nl);    
  }

  /* close the class file */ 
  fclose $out;


  /* open printable character list file */ 
  int $list = `fopen ("data/" + $class + ".txt") "w"`;
  if($list == 0) 
    error("Unable to open the printable character list file: data/" + $class + ".txt");
  
  for($wk=0; $wk<128; $wk++) {
    if(size($ascii[$wk]) != 0) 
      fprint $list ($wk + $nl);
  }

  fclose $list;
}  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
