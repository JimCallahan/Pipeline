// $Id: PackageInfo.java.src.in,v 1.31 2007/05/06 05:57:03 jim Exp $

package us.temerity.pipeline;

import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   P A C K A G E   I N F O                                                                */
/*------------------------------------------------------------------------------------------*/

/**
 * Shared configuration information specific to this release of the Pipeline tools. <P>
 * 
 * The static fields of this class are initialized by <I>autoconf(1)</I> during the 
 * build of this release to contain site specific information.
 */
public
class PackageInfo
{ 
  /*----------------------------------------------------------------------------------------*/
  /*   I N I T I A L I Z A T I O N                                                          */
  /*----------------------------------------------------------------------------------------*/
 
  /**
   * Initialize fields which must be determined at runtime.
   */ 
  static {
    String opsys = null;
    String oarch = null;
    try {
      opsys = System.getProperty("os.name");
      oarch = System.getProperty("os.arch");
    }
    catch(Exception ex) {
    }
    if(opsys == null)
      throw new IllegalStateException(); 
    
    OsType os = null;
    if(opsys.equals("Linux")) 
      os = OsType.Unix;
    else if (opsys.equals("Mac OS X")) 
      os = OsType.MacOS;
    else if(opsys.equals("Windows XP") || 
	    opsys.equals("Windows 2000") ||
	    opsys.equals("Windows 2003") ||
	    opsys.equals("Windows NT")) 
      os = OsType.Windows; 
    else 
      throw new IllegalStateException("Unsupported OS type (" + opsys + ")!");
    sOsType = os;

    switch(os) {
    case Unix:
      sInstDir = new File("@ROOT_INST_DIR@");
      sProdDir = new File("@PRODDIR@");
      sRepoDir = new File("@PRODDIR@/repository");
      sWorkDir = new File("@PRODDIR@/working");
      sHomeDir = new File("@HOMEDIR@");
      sTempDir = new File("@TEMPDIR@");

      sInstPath   = new Path("@ROOT_INST_DIR@");
      sProdPath   = new Path("@PRODDIR@");
      sRepoPath   = new Path("@PRODDIR@/repository");
      sWorkPath   = new Path("@PRODDIR@/working");
      sTargetPath = new Path("@PRODDIR@/target");
      sHomePath   = new Path("@HOMEDIR@");
      sTempPath   = new Path("@TEMPDIR@");
      break;

    case MacOS:
      sInstDir = new File("@MAC_ROOT_INST_DIR@");
      sProdDir = new File("@MAC_PRODDIR@");
      sRepoDir = new File("@MAC_PRODDIR@/repository");
      sWorkDir = new File("@MAC_PRODDIR@/working");
      sHomeDir = new File("@MAC_HOMEDIR@");
      sTempDir = new File("@MAC_TEMPDIR@");

      sInstPath   = new Path("@MAC_ROOT_INST_DIR@");
      sProdPath   = new Path("@MAC_PRODDIR@");
      sRepoPath   = new Path("@MAC_PRODDIR@/repository");
      sWorkPath   = new Path("@MAC_PRODDIR@/working");
      sTargetPath = new Path("@MAC_PRODDIR@/target");
      sHomePath   = new Path("@MAC_HOMEDIR@");
      sTempPath   = new Path("@MAC_TEMPDIR@");
      break;

    case Windows:
      sInstDir = null;
      sProdDir = null;
      sRepoDir = null;
      sWorkDir = null;
      sHomeDir = null;
      sTempDir = null;

      sInstPath   = new Path("@WIN_ROOT_INST_DIR@");
      sProdPath   = new Path("@WIN_PRODDIR@");
      sRepoPath   = new Path("@WIN_PRODDIR@/repository");
      sWorkPath   = new Path("@WIN_PRODDIR@/working");
      sTargetPath = new Path("@WIN_PRODDIR@/target");
      sHomePath   = new Path("@WIN_HOMEDIR@");
      sTempPath   = new Path("@WIN_TEMPDIR@");
      break;

    default:
      sInstDir = null;
      sProdDir = null;
      sRepoDir = null;
      sWorkDir = null;
      sHomeDir = null;
      sTempDir = null;

      sInstPath   = null;
      sProdPath   = null;
      sRepoPath   = null;
      sWorkPath   = null;
      sTargetPath = null;
      sHomePath   = null;
      sTempPath   = null;
    } 
  } 


  /*----------------------------------------------------------------------------------------*/
  /*   M I S C                                                                              */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Gets the path seperator for the current operating system.
   */ 
  public static String
  getPathSep() 
  {
    return getPathSep(PackageInfo.sOsType);
  }

  /**
   * Gets the path seperator for the givenating system.
   */ 
  public static String
  getPathSep
  (
   OsType os
  ) 
  {
    switch(os) {
    case Unix:
    case MacOS:
      return ":";

    case Windows:
      return ";";

    default:
      throw new IllegalStateException();
    }
  }


  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S O R S                                                                    */
  /*----------------------------------------------------------------------------------------*/
  
  /** 
   * Gets the abstract pathname of Java Runtime Environment for the given operating system.
   */ 
  public static Path
  getJavaRuntime
  (
   OsType os
  ) 
  {
    return sJavaRuntimePaths[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/
 
  /** 
   * Gets the abstract pathname of the root installation directory for the given 
   * operating system.
   */ 
  public static Path
  getInstPath
  (
   OsType os
  ) 
  {
    return sOsInstPaths[os.ordinal()];
  }

  /** 
   * Gets the root installation directory for the given operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getInstPath} method instead for an operating system independent 
   *   abstract pathname.
   */ 
  @Deprecated
  public static File
  getInstDir
  (
   OsType os
  ) 
  {
    return sOsInstDirs[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/
  
  /** 
   * Gets the abstract pathname of the root installation directory for the given 
   * operating system.
   */ 
  public static Path
  getProdPath
  (
   OsType os
  ) 
  {
    return sOsProdPaths[os.ordinal()];
  }

  /** 
   * Gets the root production directory for the given operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getProdPath} method instead for an operating system independent 
   *   abstract pathname.
   */ 
  @Deprecated
  public static File
  getProdDir
  (
   OsType os
  ) 
  {
    return sOsProdDirs[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the root directory of the file repository for the 
   * given operating system.
   */ 
  public static Path
  getRepoPath
  (
   OsType os
  ) 
  {
    return sOsRepoPaths[os.ordinal()];
  }

  /** 
   * Gets the root directory of the file repository for the given operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getRepoPath} method instead for an operating system independent 
   *   abstract pathname.
   */ 
  @Deprecated
  public static File
  getRepoDir
  (
   OsType os
  ) 
  {
    return sOsRepoDirs[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the root directory of user working areas for the 
   * given operating system.
   */
  public static Path
  getWorkPath
  (
   OsType os
  ) 
  {
    return sOsWorkPaths[os.ordinal()];
  }

  /** 
   * Gets the root directory of user working areas for the given operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getWorkPath} method instead for an operating system independent 
   *   abstract pathname.
   */
  @Deprecated
  public static File
  getWorkDir
  (
   OsType os
  ) 
  {
    return sOsWorkDirs[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the root directory where the target files of jobs running
   * on Windows job servers are temporarily written as accessed from the given operating 
   * system.
   */
  public static Path
  getTargetPath
  (
   OsType os
  ) 
  {
    return sOsTargetPaths[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the directory which contains the home directories 
   * for users for this site for the given operating system.
   */ 
  public static Path
  getHomePath
  (
   OsType os
  ) 
  {
    return sOsHomePaths[os.ordinal()];
  }

  /** 
   * Gets the directory which contains the home directories for users for this site 
   * for the given operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getHomePath} method instead for an operating system independent 
   *   abstract pathname.
   */ 
  @Deprecated
  public static File
  getHomeDir
  (
   OsType os
  ) 
  {
    return sOsHomeDirs[os.ordinal()];
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the directory where Pipeline preferences and other 
   * settings should be stored for the current user on the current operating system.
   */ 
  public static Path
  getSettingsPath()
  {
    switch(sOsType) {
    case Windows:
      return new Path(sHomePath, "Application Data/Temerity/Pipeline");

    default:
      return new Path(new Path(sHomePath, sUser), ".pipeline"); 
    }
  }


  /*----------------------------------------------------------------------------------------*/

  /** 
   * Gets the abstract pathname of the directory used to store temporary files generated 
   * by Pipeline for the given operating system.
   */ 
  public static Path
  getTempPath
  (
   OsType os
  ) 
  {
    return sOsTempPaths[os.ordinal()];
  } 

  /** 
   * Gets the directory used to store temporary files generated by Pipeline for the given 
   * operating system.
   * 
   * @deprecated 
   *   The path returned by this method is not properly initialized on Windows systems.  
   *   Use the {@link #getTempPath} method instead for an operating system independent 
   *   abstract pathname.
   */ 
  @Deprecated
  public static File
  getTempDir
  (
   OsType os
  ) 
  {
    return sOsTempDirs[os.ordinal()];
  }



  /*----------------------------------------------------------------------------------------*/
  /*   P U B L I C   F I E L D S                                                            */
  /*----------------------------------------------------------------------------------------*/
 
  /**
   * The name of the user running this program.
   */ 
  public static final String sUser = System.getProperty("user.name");

  /**
   * The version identifier of this Pipeline release.
   */ 
  public static final String sVersion = "@VERSION@";        

  /**
   * The date and time when this version of Pipeline was released.
   */ 
  public static final String sRelease = "@RELEASE_STAMP@";  


  /*----------------------------------------------------------------------------------------*/

  /**
   * The date and time the license expires.
   */ 
  public static final String sLicenseEnd = "@LICENSE_END@";  

  /**
   * The hostnames of the Pipeline servers. <P> 
   */
  public static final String[] sHostNames = { @PIPELINE_HOST_NAMES@ };

  /**
   * The host IDs of the Pipeline servers. <P> 
   */
  public static final String[] sHostIDs = { @PIPELINE_HOST_IDS@ };


  /*----------------------------------------------------------------------------------------*/

  /** 
   * The abstract pathname of the root installation directory for the current 
   * operating system. <P> 
   * 
   * Set by the RootInstallDirectory customer profile entry.
   */ 
  public static final Path sInstPath;

  /** 
   * The root installation directory for the current operating system. <P> 
   * 
   * Set by the RootInstallDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sInstPath} 
   *   instead for an operating system independent abstract pathname.
   */ 
  @Deprecated
  public static final File sInstDir;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The number milliseconds Pipeline server programs wait for new connections before 
   * checking to see if the server should be shutdown. <P> 
   */
  public static final int sServerTimeOut = 5000;

  /**
   * The number milliseconds Pipeline server programs sleep after finding no new connection
   * before checking again for a new connection. <P> 
   */
  public static final int sServerSleep = 200;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The hostname which runs the Pipeline master server <I>plmaster(1)</I>. <P> 
   *
   * Set by the MasterHostname customer profile entry.
   */
  public static final String sMasterServer = "@PL_MASTER_SERVER@";

  /**
   * The port number listened to by the Pipeline master server <I>plmaster(1)</I>. <P> 
   *
   * Set by the MasterPort customer profile entry.
   */
  public static final int sMasterPort = @PL_MASTER_PORT@;


  /** 
   * The abstract pathname of the root directory of the persistent node storage area. <P>
   *
   * Set by the NodeDirectory customer profile entry.
   */
  public static final Path sNodePath = new Path("@NODEDIR@");

  /** 
   * The root directory of the persistent node storage area. <P>
   *
   * Set by the NodeDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sNodePath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sNodeDir = new File("@NODEDIR@");


  /**
   * The default maximum JVM heap size for the Pipeline master server. <P> 
   */ 
  public static final long sMasterHeapSize = @PL_MASTER_HEAP_SIZE@L;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The hostname which runs the Pipeline file server <I>plfilemgr(1)</I>. <P> 
   *
   * Set by the FileHostname customer profile entry.
   */
  public static final String sFileServer = "@PL_FILE_SERVER@";

  /**
   * The port number listened to by the Pipeline file server <I>plfilemgr(1)</I>. <P> 
   *
   * Set by the FilePort customer profile entry.
   */
  public static final int sFilePort = @PL_FILE_PORT@;


  /** 
   * The abstract pathname of the root production directory for the current 
   * operating system. <P>
   *
   * Set by the ProductionDirectory customer profile entry.
   */
  public static final Path sProdPath;

  /** 
   * The root production directory for the current operating system. <P>
   *
   * Set by the ProductionDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sProdPath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sProdDir;


  /** 
   * The abstract pathname of the root directory of the file repository for the 
   * current operating system. <P>
   *
   * Set by appending "/repository" to value of the ProductionDirectory customer 
   * profile entry.
   */
  public static final Path sRepoPath;

  /** 
   * The root directory of the file repository for the current operating system. <P>
   *
   * Set by appending "/repository" to value of the ProductionDirectory customer 
   * profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sRepoPath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sRepoDir;


  /** 
   * The abstract pathname of the root directory of user working areas for the 
   * current operating system. <P>
   *
   * Set by appending "/working" to value of the ProductionDirectory customer 
   * profile entry.
   */
  public static final Path sWorkPath;

  /** 
   * The root directory of user working areas for the current operating system. <P>
   *
   * Set by appending "/working" to value of the ProductionDirectory customer 
   * profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sWorkPath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sWorkDir;
  

  /** 
   * The abstract pathname of the root directory of where the target files of jobs 
   * running on Windows job servers are temporarily written as accessed for the 
   * current operating system. <P>
   *
   * Set by appending "/target" to value of the ProductionDirectory customer 
   * profile entry.
   */
  public static final Path sTargetPath;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The hostname which runs the Pipeline queue server <I>plqueuemgr(1)</I>. <P> 
   *
   * Set by the QueueHostname customer profile entry.
   */
  public static final String sQueueServer = "@PL_QUEUE_SERVER@";
  
  /**
   * The port number listened to by the Pipeline queue server <I>plqueuemgr(1)</I>. <P> 
   *
   * Set by the QueuePort customer profile entry.
   */
  public static final int sQueuePort = @PL_QUEUE_PORT@;

  /**
   * The port number listened to by the Pipeline job execution daemons 
   * <I>pljobmgr(1)</I>. <P> 
   *
   * Set by the JobPort customer profile entry.
   */
  public static final int sJobPort = @PL_JOB_PORT@;


  /** 
   * The abstract pathname of the root queue directory. <P>
   *
   * Set by the QueueDirectory customer profile entry.
   */
  public static final Path sQueuePath = new Path("@QUEUEDIR@"); 

  /** 
   * The root queue directory. <P>
   *
   * Set by the QueueDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sQueuePath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sQueueDir = new File("@QUEUEDIR@"); 


  /**
   * The job server resource sample collection interval (in milliseconds).
   */ 
  public static final long  sCollectorInterval = 15000L;  /* 15-seconds */

  /**
   * The maximum age of a resource sample file before it is deleted (in milliseconds).
   */
  public static final long  sSampleCleanupInterval = 86400000L;  /* 24-hours */ 

  
  /*----------------------------------------------------------------------------------------*/

  /**
   * The hostname which runs the Pipeline plugin server <I>plpluginmgr(1)</I>. <P> 
   *
   * Set by the PluginHostname customer profile entry.
   */
  public static final String sPluginServer = "@PL_PLUGIN_SERVER@";
  
  /**
   * The port number listened to by the Pipeline plugin manager daemon 
   * <I>plpluginmgr(1)</I>. <P> 
   *
   * Set by the PluginPort customer profile entry.
   */
  public static final int sPluginPort = @PL_PLUGIN_PORT@;


  /** 
   * The abstract pathname of the root plugin directory. <P>
   *
   * Set by appending "/plugins" to value of the RootInstallDirectory customer 
   * profile entry.
   */
  public static final Path sPluginsPath = new Path("@ROOT_INST_DIR@/plugins");

  /** 
   * The root plugin directory. <P>
   *
   * Set by appending "/plugins" to value of the RootInstallDirectory customer 
   * profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sPluginsPath} 
   *   instead for an operating system independent abstract pathname.
   */
  @Deprecated
  public static final File sPluginsDir = new File("@ROOT_INST_DIR@/plugins");


  /*----------------------------------------------------------------------------------------*/

  /**
   * The maximum difference (in milliseconds) between the client and server clocks which 
   * is acceptable.
   */
  public static final long  sMaxClockDelta = 1000L;  /* 1 second */ 


  /*----------------------------------------------------------------------------------------*/

  /** 
   * The abstract pathname of the directory which contains the home directories for users 
   * for this site for the current operating system. <P>
   *
   * Set by the [Mac|Win]HomeDirectory customer profile entry.
   */ 
  public static final Path sHomePath;

  /** 
   * The directory which contains the home directories for users for this site for 
   * the current operating system. <P>
   *
   * Set by the [Mac|Win]HomeDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sHomePath} 
   *   instead for an operating system independent abstract pathname.
   */ 
  @Deprecated
  public static final File sHomeDir;


  /** 
   * The abstract pathname of the directory used to store temporary files generated by 
   * Pipeline for the current operating system. <P>
   *
   * Set by the TemporaryDirectory customer profile entry.
   */ 
  public static final Path sTempPath;
  
  /** 
   * The directory used to store temporary files generated by Pipeline for the
   * current operating system. <P>
   *
   * Set by the TemporaryDirectory customer profile entry.
   * 
   * @deprecated 
   *   This field is not properly initialized on Windows systems.  Use {@link #sTempPath} 
   *   instead for an operating system independent abstract pathname.
   */ 
  @Deprecated
  public static final File sTempDir;


  /*----------------------------------------------------------------------------------------*/
  
  /**
   * The pipeline user name.
   */ 
  public static final String sPipelineUser = "@PIPELINE_USER@";

  /**
   * The pipeline user ID 
   */ 
  public static final int sPipelineUID = @PIPELINE_UID@;


  /**
   * The pipeline group name.
   */ 
  public static final String sPipelineGroup = "@PIPELINE_GROUP@";

  /**
   * The pipeline group ID 
   */ 
  public static final int sPipelineGID = @PIPELINE_GID@;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The operating system type of the host running the Java VM.
   */ 
  public static final OsType sOsType; 
  

  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the font used for OpenGL textured text.
   */ 
  public static final String sGLFont = "CharcoalRegular";


  /*----------------------------------------------------------------------------------------*/

  /**
   * The copyright notice for Pipeline. 
   */
  public static final String sCopyright = 
    ("Copyright (c) 2002-2007 Temerity Software, Inc.\n" + 
     "All rights reserved.");
  
  
  /**
   * The license agreement for Pipeline. 
   */
  public static final String sLicense = 
@JAVA_LICENSE_STRING@


  /*----------------------------------------------------------------------------------------*/
  /*   P R I V A T E   F I E L D S                                                          */
  /*----------------------------------------------------------------------------------------*/
 
  /**
   * The abstract pathname of Java Runtime Environment indexed by 
   * operating system type [OsType.ordinal()].
   */ 
  private static final Path sJavaRuntimePaths[] = {
    new Path("@JAVA_RUNTIME@"), 
    new Path("@WIN_JAVA_RUNTIME@"),
    new Path("@MAC_JAVA_RUNTIME@")
  };

  /** 
   * The root installation directory indexed by operating system type [OsType.ordinal()].
   */ 
  private static final Path sOsInstPaths[] = { 
    new Path("@ROOT_INST_DIR@"), 
    new Path("@WIN_ROOT_INST_DIR@"),
    new Path("@MAC_ROOT_INST_DIR@")
  };

  /** 
   * The root installation directory indexed by operating system type [OsType.ordinal()].
   */ 
  private static final File sOsInstDirs[] = { 
    new File("@ROOT_INST_DIR@"), 
    null,
    new File("@MAC_ROOT_INST_DIR@")
  };


  /** 
   * The root production directory indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final Path sOsProdPaths[] = {
    new Path("@PRODDIR@"),
    new Path("@WIN_PRODDIR@"),
    new Path("@MAC_PRODDIR@")
  };

  /** 
   * The root production directory indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final File sOsProdDirs[] = {
    new File("@PRODDIR@"),
    null,
    new File("@MAC_PRODDIR@")
  };

  /** 
   * The root directory of the file repository indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final Path sOsRepoPaths[] = {
    new Path("@PRODDIR@/repository"),    
    new Path("@WIN_PRODDIR@/repository"),
    new Path("@MAC_PRODDIR@/repository")
  };

  /** 
   * The root directory of the file repository indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final File sOsRepoDirs[] = {
    new File("@PRODDIR@/repository"),    
    null,
    new File("@MAC_PRODDIR@/repository")
  };


  /** 
   * The root directory of user working areas indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final Path sOsWorkPaths[] = {
    new Path("@PRODDIR@/working"), 
    new Path("@WIN_PRODDIR@/working"),
    new Path("@MAC_PRODDIR@/working")
  };

  /** 
   * The root directory of user working areas indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final File sOsWorkDirs[] = {
    new File("@PRODDIR@/working"), 
    null,
    new File("@MAC_PRODDIR@/working")
  };


  /** 
   * The root directory of windows job target files indexed by operating system 
   * type [OsType.ordinal()].
   */
  private static final Path sOsTargetPaths[] = {
    new Path("@PRODDIR@/target"), 
    new Path("@WIN_PRODDIR@/target"),
    new Path("@MAC_PRODDIR@/target")
  };


  /**
   * The directory which contains the home directories for users for this site indexed 
   * by operating system type [OsType.ordinal()].
   */ 
  private static final Path sOsHomePaths[] = {
    new Path("@HOMEDIR@"), 
    new Path("@WIN_HOMEDIR@"),
    new Path("@MAC_HOMEDIR@")
  };

  /**
   * The directory which contains the home directories for users for this site indexed 
   * by operating system type [OsType.ordinal()].
   */ 
  private static final File sOsHomeDirs[] = {
    new File("@HOMEDIR@"), 
    null,
    new File("@MAC_HOMEDIR@")
  };


  /**
   * The directory used to store temporary files generated by Pipeline indexed by 
   * operating system type [OsType.ordinal()].
   */ 
  private static final Path sOsTempPaths[] = {
    new Path("@TEMPDIR@"), 
    new Path("@WIN_TEMPDIR@"),
    new Path("@MAC_TEMPDIR@")
  };

  /**
   * The directory used to store temporary files generated by Pipeline indexed by 
   * operating system type [OsType.ordinal()].
   */ 
  private static final File sOsTempDirs[] = {
    new File("@TEMPDIR@"), 
    null,
    new File("@MAC_TEMPDIR@")
  };

}



