// $Id: HfsOPLibsAction.java,v 1.1 2005/06/28 20:51:10 jim Exp $

package us.temerity.pipeline.plugin.v1_0_0;

import us.temerity.pipeline.*; 

import java.lang.*;
import java.util.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   H F S   O P   L I B S   A C T I O N                                                    */
/*------------------------------------------------------------------------------------------*/

/** 
 * Generates an OPlibraries file which specifies the OTLs to be loaded by Houdini. <P>
 * 
 * Each Operator Type Library (.otl) which is the single member of the primary file sequence 
 * of one of the source nodes will be included in the generated OPlibraries file. <P> 
 * 
 * The operators loaded by Houdini are determined by the HOUDINI_OTL_PATH environmental 
 * variable.  In order to insure that Houdini related nodes use the proper OTLs when 
 * executing the actions of jobs and launching editors, a toolset package should be created 
 * which contains a definition of this HOUDINI_OTL_PATH variable.  The path should include 
 * the directories where the OPlibraries files generated by this action reside.  Toolsets 
 * can then be built which provide a specific set of OTLs required by a related set of 
 * Houdini nodes. <P> 
 * 
 * See the <A href="http://www.sidefx.com">Houdini</A> documentation for details on OTLs
 * and their usage with Houdini. <P> 
 * 
 * This action has no parameters. 
 */
public
class HfsOPLibsAction
  extends BaseAction
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  public
  HfsOPLibsAction() 
  {
    super("HfsOPLibs", new VersionID("1.0.0"), 
	  "Generates an OPlibraries file which specifies the OTLs to be loaded by Houdini.");
  }


  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct a {@link SubProcessHeavy SubProcessHeavy} instance which when executed will 
   * fulfill the given action agenda. <P> 
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @param outFile 
   *   The file to which all STDOUT output is redirected.
   * 
   * @param errFile 
   *   The file to which all STDERR output is redirected.
   * 
   * @return 
   *   The SubProcess which will fulfill the agenda.
   * 
   * @throws PipelineException 
   *   If unable to prepare a SubProcess due to illegal, missing or imcompatable 
   *   information in the action agenda or a general failure of the prep method code.
   */
  public SubProcessHeavy
  prep
  (
   ActionAgenda agenda,
   File outFile, 
   File errFile 
  )
    throws PipelineException
  {
    NodeID nodeID = agenda.getNodeID();

    /* file sequence checks */ 
    TreeSet<String> sources = new TreeSet<String>(); 
    {
      for(String sname : agenda.getSourceNames()) {
	NodeID snodeID = new NodeID(agenda.getNodeID(), sname);

	File sourceFile = null;
	{
	  FileSeq fseq = agenda.getPrimarySource(sname);
	  FilePattern fpat = fseq.getFilePattern();
	  String suffix = fpat.getSuffix();
	  if((suffix == null) || !suffix.equals("otl") || (fseq.numFrames() != 1))
	    throw new PipelineException
	    ("The source primary file sequence (" + fseq + ") must contain a single " + 
	     "Operator Type Library (.otl) file.");
	  
	  sources.add(snodeID.getParent() + "/" + fseq.getFile(0));
	}
      }

      {
	FileSeq fseq = agenda.getPrimaryTarget();
	if(!fseq.getFile(0).getName().equals("OPlibraries"))
	  throw new PipelineException
	    ("The target primary file sequence (" + fseq + ") must contain a single " + 
	     "(OPlibraries) files.");
      }
    }

    File script = createTemp(agenda, 0755, "bash");
    try {      
      FileWriter out = new FileWriter(script);
      out.write("#!/bin/bash\n\n" +
		"cat > OPlibraries <<EOF\n");

      String targetDir = nodeID.getParent().getPath();
      String tpath[] = targetDir.split("/");

      for(String source : sources) {
	String spath[] = source.split("/");
	
	int tk, sk;
	for(tk=0, sk=0; tk<tpath.length; tk++, sk++) {
	  if((sk >= (spath.length-1)) || !spath[sk].equals(tpath[tk]))
	    break;
	}

	for(; tk<tpath.length; tk++)
	  out.write("../");

	for(; sk<(spath.length-1); sk++)
	  out.write(spath[sk] + "/");
	
	out.write(spath[sk] + "\n");
      }

      out.write("EOF\n");
      
      out.close();
    }
    catch(IOException ex) {
      throw new PipelineException
	("Unable to write temporary script file (" + script + ") for Job " + 
	 "(" + agenda.getJobID() + ")!\n" +
	 ex.getMessage());
    }
    
    try {
      return new SubProcessHeavy
	(agenda.getNodeID().getAuthor(), getName() + "-" + agenda.getJobID(), 
	 script.getPath(), new ArrayList<String>(), 
	 agenda.getEnvironment(), agenda.getWorkingDir(), 
	 outFile, errFile); 
    }
    catch(Exception ex) {
      throw new PipelineException
	("Unable to generate the SubProcess to perform this Action!\n" +
	 ex.getMessage());
    }
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = -4187159042596311410L;

}

