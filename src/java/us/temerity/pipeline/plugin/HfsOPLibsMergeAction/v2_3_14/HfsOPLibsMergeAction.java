// $Id: HfsOPLibsMergeAction.java,v 1.1 2007/10/23 01:47:37 jim Exp $

package us.temerity.pipeline.plugin.HfsOPLibsMergeAction.v2_3_14;

import us.temerity.pipeline.*; 
import us.temerity.pipeline.plugin.*; 

import java.lang.*;
import java.util.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   H F S   O P   L I B S   M E R G E   A C T I O N                                        */
/*------------------------------------------------------------------------------------------*/

/** 
 * Generates a single target OPlibraries file by choosing among the OTLs included in one or
 * more source source OPlibraries files.<P>
 * 
 * The operators loaded by Houdini are determined by the HOUDINI_OTL_PATH environmental 
 * variable.  In order to insure that Houdini related nodes use the proper OTLs when 
 * executing the actions of jobs and launching editors, a toolset package should be created 
 * which contains a definition of this HOUDINI_OTL_PATH variable.  The path should include 
 * the directories where the OPlibraries files generated by this action reside.  Toolsets 
 * can then be built which provide a specific set of OTLs required by a related set of 
 * Houdini nodes. <P> 
 * 
 * See the <A href="http://www.sidefx.com">Houdini</A> documentation for details on OTLs
 * and their usage with Houdini. <P> 
 * 
 * This action defines the following single valued parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Strict Naming <BR>
 *   <DIV style="margin-left: 40px;"> 
 *     Whether to require that the generated target file be named (OPlibraries).
 *   </DIV> 
 * </DIV> <P> 
 * 
 * This action defines the following per-source parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Order <BR>
 *   <DIV style="margin-left: 40px;">
 *     Each source node sequence which sets this parameter should contain a OPlibraries
 *     file, although it may be have any filename.  This parameter determines the order in 
 *     which the OPlibraries files are processed.  If this parameter is not set for a 
 *     source node file sequence, it will be ignored.
 *   </DIV> <BR>
 * 
 *   Merge Policy <BR>
 *   <DIV style="margin-left: 40px;">
 *     The policy for how the source OTLs listed the source OPlibraries file which sets 
 *     this parameter are merged with previously processed OTLs of the same name from 
 *     other source OPlibraries files.
 *   </DIV> 
 * </DIV> <P> 
 */
public
class HfsOPLibsMergeAction
  extends CommonActionUtils
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  public
  HfsOPLibsMergeAction() 
  {
    super("HfsOPLibsMerge", new VersionID("2.3.14"), "Temerity", 
	  "Generates a single target OPlibraries file by choosing among the OTLs included " + 
          "in one or more source source OPlibraries files.");

    {
      ActionParam param = 
	new BooleanActionParam
	(aStrictNaming,
	 "Whether to require that the generated target file be named (OPlibraries).",
	 true);
      addSingleParam(param);
    }

    addSupport(OsType.Windows);  
  }



  /*----------------------------------------------------------------------------------------*/
  /*   B A S E   A C T I O N   O V E R R I D E S                                            */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Does this action support per-source parameters?  
   */ 
  public boolean 
  supportsSourceParams()
  {
    return true;
  }
  
  /**
   * Get an initial set of action parameters associated with an upstream node. 
   */ 
  public TreeMap<String,ActionParam>
  getInitialSourceParams()
  {
    TreeMap<String,ActionParam> params = new TreeMap<String,ActionParam>();
    
    {
      ActionParam param = 
	new IntegerActionParam
	(aOrder, 
	 "Each source node sequence which sets this parameter should contain a OPlibraries " +
         "file, although it may be have any filename.  This parameter determines the order " +
         "in which the OPlibraries files are processed.  If this parameter is not set for " + 
         "a source node file sequence, it will be ignored.", 
	 100);
      params.put(param.getName(), param);
    }

    {    
      ArrayList<String> choices = OPLibsMergePolicy.titles();

      ActionParam param = 
	new EnumActionParam
	(aMergePolicy,
	 "The policy for how the source OTLs listed the source OPlibraries file which sets " +
         "this parameter are merged with previously processed OTLs of the same name from " + 
         "other source OPlibraries files.", 
         choices.get(0), choices);  	 
      params.put(param.getName(), param);
    }

    return params;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct a {@link SubProcessHeavy SubProcessHeavy} instance which when executed will 
   * fulfill the given action agenda. <P> 
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @param outFile 
   *   The file to which all STDOUT output is redirected.
   * 
   * @param errFile 
   *   The file to which all STDERR output is redirected.
   * 
   * @return 
   *   The SubProcess which will fulfill the agenda.
   * 
   * @throws PipelineException 
   *   If unable to prepare a SubProcess due to illegal, missing or imcompatable 
   *   information in the action agenda or a general failure of the prep method code.
   */
  public SubProcessHeavy
  prep
  (
   ActionAgenda agenda,
   File outFile, 
   File errFile 
  )
    throws PipelineException
  {
    /* target file */ 
    Path target = getPrimaryTargetPath(agenda, "file");
    if(getSingleBooleanParamValue(aStrictNaming) && !target.getName().equals(aOPlibraries))
      throw new PipelineException
        ("The target primary file sequence (" + agenda.getPrimaryTarget() + ") must be " + 
         "a single file named (" + aOPlibraries + ").");

    /* the OPlibraries files to process */ 
    MappedLinkedList<Integer,Path> sourceOPLibPaths = new MappedLinkedList<Integer,Path>();
    TreeMap<Path,OPLibsMergePolicy> policies = new TreeMap<Path,OPLibsMergePolicy>();
    {
      for(String sname : agenda.getSourceNames()) {
	if(hasSourceParams(sname)) {
	  FileSeq fseq = agenda.getPrimarySource(sname);
	  Integer order = (Integer) getSourceParamValue(sname, aOrder);
	  String policy = (String) getSourceParamValue(sname, aMergePolicy);
	  addOPLib(agenda, sname, fseq, order, policy, sourceOPLibPaths, policies);
	}

	for(FileSeq fseq : agenda.getSecondarySources(sname)) {
	  FilePattern fpat = fseq.getFilePattern();
	  if(hasSecondarySourceParams(sname, fpat)) {
	    Integer order = (Integer) getSecondarySourceParamValue(sname, fpat, aOrder);
            String policy = (String) getSecondarySourceParamValue(sname, fpat, aMergePolicy);
            addOPLib(agenda, sname, fseq, order, policy, sourceOPLibPaths, policies);
	  }
	}
      }

      if(sourceOPLibPaths.isEmpty()) 
	throw new PipelineException
	  ("No OPlibraries files where specified using the per-source Order parameter!"); 
    }

    /* process the source OPlibraries files in order */ 
    LinkedList<Path> otls = new LinkedList<Path>();
    {
      MappedLinkedList<String,Path> found = new MappedLinkedList<String,Path>();
      for(Integer order : sourceOPLibPaths.keySet()) {
        for(Path source : sourceOPLibPaths.get(order)) {
          OPLibsMergePolicy policy = policies.get(source);
          try {
            BufferedReader in = new BufferedReader(new FileReader(source.toFile()));
          
            /* process each OTL path */ 
            while(true) {
              String line = in.readLine();
              if(line == null) 
                break;

              Path opath = new Path(line);
              String oname = opath.getName();
            
              LinkedList<Path> prevPaths = found.get(oname);
              switch(policy) {
              case Exclusive:
                if(prevPaths != null) {
                  StringBuilder buf = new StringBuilder();
                  buf.append
                    ("The OTL file (" + opath + ") from the OPlibraries file " + 
                     "(" + source + ") with a MergePolicy of (" + policy + ") conflicts " + 
                     "with the previously encountered OTLs of the same name:\n");
                  for(Path ppath : prevPaths) 
                    buf.append("  " + ppath + "\n");
                  throw new PipelineException(buf.toString());
                }
                break;

              case Override:
                if(prevPaths != null) {
                  found.remove(oname);
                  for(Path ppath : prevPaths) 
                    while(otls.remove(ppath));
                }
              }

              if((policy != OPLibsMergePolicy.Ignore) || (prevPaths == null)) {
                found.put(oname, opath);
                otls.add(opath);                
              }
            }
            in.close();
          }
          catch(IOException ex) {
            throw new PipelineException
              ("Unable to read source OPLibraries file (" + source + ")!");
          }
        }
      }
    }

    /* generate the target OPlibrary file */ 
    File temp = createTemp(agenda, "temp");
    try {      
      FileWriter out = new FileWriter(temp);

      for(Path opath : otls) 
        out.write(opath + "\n");

      out.close();
    }
    catch(IOException ex) {
      throw new PipelineException
	("Unable to write temporary file (" + temp + ") for Job " + 
	 "(" + agenda.getJobID() + ")!\n" +
	 ex.getMessage());
    }
    
    /* create the process to run the action */ 
    return createTempCopySubProcess(agenda, temp, target, outFile, errFile);    
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  /**
   * A helper method for generating OPlibraries filenames and merge policies.
   */ 
  private void 
  addOPLib
  (
   ActionAgenda agenda, 
   String sname, 
   FileSeq fseq, 
   Integer order, 
   String policyStr, 
   MappedLinkedList<Integer,Path> sourceOPLibPaths,
   TreeMap<Path,OPLibsMergePolicy> policies
  )
    throws PipelineException 
  {
    if(order == null) 
      return;

    if(!fseq.isSingle())
      throw new PipelineException
        ("The " + getName() + " Action requires that the file sequence (" + fseq + ") of " + 
         "the source node (" + sname + ") selected for processing must be a single  " + 
         "OPlibraries file!"); 
      
    Path path = getWorkingNodeFilePath(agenda, sname, fseq);
    sourceOPLibPaths.put(order, path); 

    try {
      OPLibsMergePolicy policy = 
        OPLibsMergePolicy.valueOf(OPLibsMergePolicy.class, policyStr);
      policies.put(path, policy);
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException
        ("Somehow the value for MergePolicy (" + policyStr + ") was not a legal value!");
    }
  }


  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = -8666080865680612868L;

  public static final String aStrictNaming = "StrictNaming"; 
  public static final String aOPlibraries  = "OPlibraries";
  public static final String aOrder        = "Order";
  public static final String aMergePolicy  = "MergePolicy";

}

