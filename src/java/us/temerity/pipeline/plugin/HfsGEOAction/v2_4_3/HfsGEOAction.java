// $Id: HfsGEOAction.java,v 1.1 2008/05/30 09:07:59 jim Exp $

package us.temerity.pipeline.plugin.HfsGEOAction.v2_4_3;

import us.temerity.pipeline.*; 
import us.temerity.pipeline.plugin.HfsActionUtils; 

import java.lang.*;
import java.util.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   H F S   G E O   A C T I O N                                                            */
/*------------------------------------------------------------------------------------------*/

/** 
 * Generates a sequence of cooked geometry files by evaluating a SOP. <P> 
 * 
 * This action provides a convienent method for evaluating a Geometry output operator 
 * contained in the source Houdini scene using hscript(1).  The target primary file 
 * sequences should contain Houdini geometry files (.geo/.bgeo) which will be generated by 
 * this operator.  The frame range (trange f1 f2 f3) and output filename (sopoutput) 
 * parameters of this operator will be overridden by the Action to correspond to the files
 * to be regenerated by the job. <P> 
 * 
 * See the <A href="http://www.sidefx.com">Houdini</A> documentation for details on the
 * usage and behavior of the Geometry output operator and hscript(1).<P> 
 * 
 * This action defines the following single valued parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Houdini Scene <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the Houdini scene file to load.  This scene should
 *     contain the Geometry output operator which will be evaluated.
 *   </DIV> <BR>
 * 
 *   Output Operator <BR>
 *   <DIV style="margin-left: 40px;">
 *     The full Houdini path name of the Geometry output operator to evaluate in order to 
 *     generate the target geometry files.  
 *   </DIV> <BR> 
 * 
 *   Use Graphical License<BR> 
 *   <DIV style="margin-left: 40px;">
 *     Whether to use an interactive graphical Houdini license when running hscript(1).  
 *     Normally, hscript(1) is run using a non-graphical license (-R option).  A graphical 
 *     license may be required if the site has not obtained any non-graphical licenses.
 *   </DIV>
 * 
 *   <DIV style="margin-left: 40px;">
 *     Extra Options <BR>
 *     <DIV style="margin-left: 40px;">
 *       Additional hbatch(1) command-line arguments. <BR> 
 *     </DIV> <BR>
 *   </DIV> <P> 
 * 
 * 
 *   Pre Render Script <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the command script to evaluate before geometry output 
 *     begins.  <BR>
 *   </DIV> <BR>
 * 
 *   Post Render Script <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the command script to evaluate after geometry output 
 *     ends. <BR>
 *   </DIV> <BR>
 * 
 *   Pre Frame Script <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the command script to evaluate before processing each 
 *     frame. <BR>
 *   </DIV> <BR>
 * 
 *   Post Frame Script <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node which contains the command script to evaluate after processing each 
 *     frame. <BR>
 *   </DIV> <BR> 
 * </DIV> <P> 
 */
public
class HfsGEOAction
  extends HfsActionUtils
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  public
  HfsGEOAction() 
  {
    super("HfsGEO", new VersionID("2.4.3"), "Temerity", 
	  "Generates a sequence of cooked geometry files by evaluating a SOP.");
    
    addHoudiniSceneParam();
    addOutputOperatorParam("/out/geometry1"); 
    addUseGraphicalLicenseParam();
    addExtraOptionsParam();

    addPreRenderScriptParam();
    addPostRenderScriptParam();
    addPreFrameScriptParam();
    addPostFrameScriptParam();

    {
      LayoutGroup layout = new LayoutGroup(true);
      layout.addEntry(aHoudiniScene);
      layout.addEntry(aOutputOperator);
      layout.addSeparator();
      layout.addEntry(aUseGraphicalLicense);
      addExtraOptionsParamToLayout(layout);

      addScriptParamsToLayout(layout); 
      
      setSingleLayout(layout);
    }

    //addSupport(OsType.Windows); 
  }

  
  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct a {@link SubProcessHeavy SubProcessHeavy} instance which when executed will 
   * fulfill the given action agenda. <P> 
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @param outFile 
   *   The file to which all STDOUT output is redirected.
   * 
   * @param errFile 
   *   The file to which all STDERR output is redirected.
   * 
   * @return 
   *   The SubProcess which will fulfill the agenda.
   * 
   * @throws PipelineException 
   *   If unable to prepare a SubProcess due to illegal, missing or imcompatable 
   *   information in the action agenda or a general failure of the prep method code.
   */
  public SubProcessHeavy
  prep
  (
   ActionAgenda agenda,
   File outFile, 
   File errFile 
  )
    throws PipelineException
  { 
    /* target files */ 
    FileSeq targetSeq = 
      new FileSeq(agenda.getTargetPath().toString(), agenda.getPrimaryTarget()); 

    /* houdini scene */ 
    Path source = getHoudiniSceneSourcePath(aHoudiniScene, agenda);

    /* houdini version */ 
    VersionID hvid = getHoudiniVersion(agenda); 

    /* create the temporary Houdini command script */ 
    Path hscript = new Path(createTemp(agenda, "cmd"));
    try {      
      FileWriter out = new FileWriter(hscript.toFile());
    
      String opname = getSingleStringParamValue(aOutputOperator, false);

      if(targetSeq.hasFrameNumbers()) {
	FilePattern fpat = targetSeq.getFilePattern();
	FrameRange frange = targetSeq.getFrameRange();
	out.write("opparm " + opname + " trange on\n" +
		  "opparm " + opname + " f1 " + frange.getStart() + "\n" +
		  "opparm " + opname + " f2 " + frange.getEnd() + "\n" +
		  "opparm " + opname + " f3 " + frange.getBy() + "\n" +
		  "opparm " + opname + " sopoutput '" + fpat.getPrefix() + ".$F");

	if(fpat.getPadding() > 1) 
	  out.write(String.valueOf(fpat.getPadding()));
	
	out.write("." + fpat.getSuffix() + "'\n");
      }
      else {
	out.write("opparm " + opname + " trange off\n" +
		  "opparm " + opname + " sopoutput '" + targetSeq + "'\n");
      }

      writePreRenderScriptOpparm(opname, agenda, out); 
      writePostRenderScriptOpparm(opname, agenda, out); 
      writePreFrameScriptOpparm(opname, agenda, out); 
      writePostFrameScriptOpparm(opname, agenda, out); 

      out.write("opparm -c " + opname + " execute\n" + 
                "quit\n");

      out.close();
    }
    catch(IOException ex) {
      throw new PipelineException
	("Unable to write temporary script file (" + hscript + ") for Job " + 
	 "(" + agenda.getJobID() + ")!\n" +
	 ex.getMessage());
    }

    /* create the process to run the action */ 
    {
      String program = "hscript";
      if((hvid != null) && (hvid.compareTo(new VersionID("8.1.0")) >= 0))
        program = "hbatch";

      ArrayList<String> args = new ArrayList<String>(); 
      if(!getSingleBooleanParamValue(aUseGraphicalLicense)) 
        args.add("-R"); 
      args.add("-i"); 
      args.add("-v"); 
      args.addAll(getExtraOptionsArgs()); 
      args.add(source.toOsString());
      args.add(hscript.toOsString());

      return createSubProcess(agenda, program, args, outFile, errFile);
    }
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = 3973826521563775546L;

}

