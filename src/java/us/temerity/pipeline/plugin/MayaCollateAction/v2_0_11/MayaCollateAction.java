// $Id: MayaCollateAction.java,v 1.1 2007/06/19 18:24:50 jim Exp $

package us.temerity.pipeline.plugin.MayaCollateAction.v2_0_11;

import us.temerity.pipeline.*; 

import java.lang.*;
import java.util.*;
import java.io.*;
import java.text.*;

/*------------------------------------------------------------------------------------------*/
/*   M A Y A   C O L L A T E   A C T I O N                                                  */
/*------------------------------------------------------------------------------------------*/

/** 
 * Generates a new Maya scene from model scenes and imported animation data. <P> 
 * 
 * A new empty scene is first created.  The model scenes are imported as Maya references 
 * from each source node who's primary file sequence is a Maya scene file (.ma or .mb).  
 * Each of these model scenes should contain a DAG node which has a name that matches the
 * Root DAG Node single parameter (usually called ROOT) under which all visible geometry is 
 * grouped. These scenes should also contain a Maya set which has a name that matches the 
 * value of the Import Set single parameter (usually called SELECT).  When a model scene is 
 * imported, it is placed in a Maya namespace which matches the prefix of the model scene 
 * file name. This default namespace can be overridden by setting the per-source PrefixName 
 * parameter for the referenced scene.<P>
 * 
 * Then the animation data is imported from each animation file (.anim) sequence which sets
 * the per-source Order parameter. This animation data is then applied to the imported
 * reference objects in the generated scene. <P> 
 * 
 * The animation data is composed of a series of shots.  Each shot contains one or more 
 * animations of equal frame length which share the same Shot Order.  Shots are processed 
 * in lowest to higest Shot Order.  The animations which make up the first shot (lowest Shot 
 * Order) are applied to the generated Maya scene starting at Begin Frame. Subsequent shots 
 * are concatented after each previous shot.  All animation file sequences which share the
 * same Order must be of the same length.  Animstion length is determined by looking at
 * the single parameters of the MayaExportAnim action which generated the animation files.
 * This means that all animations used by MayaCollate must have been generated by a 
 * MayaExportAnim action. <P> 
 * 
 * For each shot, the prefixes of the animation files (which set Order) must correspond to
 * the prefix of one of the imported reference model scenes (or PrefixName, if set). If
 * there is no model to for an animation, an error will be generated. Conversely, any models
 * which have no corresponding animation for a shot will have the visibility of their "ROOT"
 * DAG node set to (false) for the duration of the shot. This allows objects which only
 * should appear in a subset of the shots to remain properly hidden when not animated. <P>
 * 
 * At each stage in the process, optional MEL scripts may be evaluated.  The MEL scripts
 * must be the primary file sequence of one of the source nodes and are assigned to the 
 * appropriate stage using the Intial MEL, Model MEL, Anim MEL and Final MEL single valued 
 * parameters. <P> 
 * 
 * This action defines the following single valued parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Root DAG Node <BR>
 *   <DIV style="margin-left: 40px;">
 *     The DAG node in each the model scene under which all visible geometry is grouped.
 *   </DIV> <BR>
 * 
 *   Import Set
 *   <DIV style="margin-left: 40px;">
 *     The name of the Maya Set in each model scene used to identify the DAG nodes
 *     to which the imported animation will be applied.
 *   </DIV>
 *
 *   Begin Frame <BR>
 *   <DIV style="margin-left: 40px;">
 *     The frame number of the first animation keyframe in the generated Maya scene. 
 *   </DIV> <BR>
 *   
 *   Linear Unit <BR>
 *   <DIV style="margin-left: 40px;">
 *     The linear unit that the generated scene will use. 
 *   </DIV> <BR>
 * 
 *   Angular Unit <BR>
 *   <DIV style="margin-left: 40px;">
 *     The angular unit that the generated scene will use. 
 *   </DIV> <BR>
 *   
 *   Time Unit <BR>
 *   <DIV style="margin-left: 40px;">
 *     The unit of time and frame rate that the generated scene will use. 
 *   </DIV> <BR>
 * 
 *   Initial MEL <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node containing the MEL script to evaluate just after scene creation
 *     and before importing any models.
 *   </DIV> <BR>
 * 
 *   Model MEL <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node containing the MEL script to evaluate after importing all models,
 *     but before loading and applying any animation data.
 *   </DIV> <BR>
 * 
 *   Anim MEL <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node containing the MEL script to evaluate after loading and applying all
 *     animation data, but before saving the generated Maya scene.
 *   </DIV> <BR>
 * 
 *   Final MEL <BR>
 *   <DIV style="margin-left: 40px;">
 *     The source node containing the MEL script to evaluate after saving the generated 
 *     Maya scene.
 *   </DIV> <BR>
 * </DIV> <P> 
 * 
 * 
 * This action defines the following per-source parameters: <BR>
 * 
 * <DIV style="margin-left: 40px;">
 *   Order <BR>
 *   <DIV style="margin-left: 40px;">
 *      Determines the order in which the animations are concatenated.  Animations are 
 *      processed from least to greatest Order.  All animations with the same Order
 *      are applied to the same frame range in the generate Maya scene.
 *   </DIV> <BR>
 * 
 *   Prefix Name <BR>
 *   <DIV style="margin-left: 40px;"> 
 *     The namespace prefix for the referenced scene in Maya instead of the filename prefix. 
 *   </DIV> <BR>
 * </DIV> <P> 
 */
public
class MayaCollateAction
  extends BaseAction
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/
  
  public
  MayaCollateAction() 
  {
    super("MayaCollate", new VersionID("2.0.11"), "Temerity", 
	  "Builds a Maya scene from model scenes and animation files.");
    
    {
      ActionParam param = 
	new StringActionParam
	(aRootDAGNode,
	 "The DAG node in each the model scene under which all visible geometry is grouped.", 
	 "ROOT");
      addSingleParam(param);
    }

    {
      ActionParam param = 
	new StringActionParam
	(aImportSet, 
	 "The name of the Maya Set in each model scene used to identify the DAG nodes " +
	 "to which the imported animation will be applied.", 
	 "SELECT");
      addSingleParam(param);
    }

    {
      ActionParam param = 
	new IntegerActionParam
	(aBeginFrame,
	 "The start frame of animation in the generated Maya scene.", 
	 0);
      addSingleParam(param);
    }


    {
      ActionParam param = 
	new LinkActionParam
	(aInitialMEL,
	 "The MEL script to evaluate after scene creation and before importing models.",
	 null);
      addSingleParam(param);
    }
    
    {
      ActionParam param = 
	new LinkActionParam
	(aModelMEL,
	 "The MEL script to evaluate after importing models but before animation.",
	 null);
      addSingleParam(param);
    }
    
    {
      ActionParam param = 
	new LinkActionParam
	(aAnimMEL,
	 "The MEL script to evaluate after applying animation but before saving the scene.",
	 null);
      addSingleParam(param);
    }
    
    {
      ActionParam param = 
	new LinkActionParam
	(aFinalMEL,
	 "The MEL script to evaluate after saving the scene.", 
	 null);
      addSingleParam(param);
    }
    
    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("millimeter");
      choices.add("centimeter");
      choices.add("meter");
      choices.add("inch");
      choices.add("foot");
      choices.add("yard");
      
      ActionParam param = 
	new EnumActionParam
	(aLinearUnits,
	 "The linear units format the constructed maya scene should use.", 
	 "centimeter", 
	 choices);
      addSingleParam(param);
    }
    
    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("degrees");
      choices.add("radians");
      
      ActionParam param = 
	new EnumActionParam
	(aAngularUnits,
	 "The angular units format the constructed maya scene should use.", 
	 "degrees", 
	 choices);
      addSingleParam(param);
    }
    
    {
      ArrayList<String> choices = new ArrayList<String>();
      choices.add("15 fps");
      choices.add("Film (24 fps)");
      choices.add("PAL (25 fps)");
      choices.add("NTSC (30 fps)");
      choices.add("Show (48 fps)");
      choices.add("PAL Field (50 fps)");
      choices.add("NTSC Field (60 fps)");
      choices.add("milliseconds");
      choices.add("seconds");
      choices.add("minutes");
      choices.add("hours");
      choices.add("2fps");
      choices.add("3fps");
      choices.add("4fps");
      choices.add("5fps");
      choices.add("6fps");
      choices.add("8fps");
      choices.add("10fps");
      choices.add("12fps");
      choices.add("16fps");
      choices.add("20fps");
      choices.add("40fps");
      choices.add("75fps");
      choices.add("80fps");
      choices.add("100fps");
      choices.add("120fps");
      choices.add("150fps");
      choices.add("200fps");
      choices.add("240fps");
      choices.add("250fps");
      choices.add("300fps");
      choices.add("375fps");
      choices.add("400fps");
      choices.add("500fps");
      choices.add("600fps");
      choices.add("750fps");
      choices.add("1200fps");
      choices.add("1500fps");
      choices.add("2000fps");
      choices.add("3000fps");
      choices.add("6000fps");
           
      
      ActionParam param = 
	new EnumActionParam
	(aTimeUnits,
	 "The time format the constructed maya scene should use.", 
	 "Film (24 fps)", 
	 choices);
      addSingleParam(param);
    }


    {
      LayoutGroup layout = new LayoutGroup(true);
      layout.addEntry(aRootDAGNode);
      layout.addEntry(aImportSet);
      layout.addEntry(aBeginFrame);
      layout.addSeparator();
      layout.addEntry(aLinearUnits);
      layout.addEntry(aAngularUnits);
      layout.addEntry(aTimeUnits);
      layout.addSeparator();
      layout.addEntry(aInitialMEL);
      layout.addEntry(aModelMEL);
      layout.addEntry(aAnimMEL);
      layout.addEntry(aFinalMEL);

      setSingleLayout(layout);
    }

    addSupport(OsType.MacOS);
    //addSupport(OsType.Windows);   // SHOULD WORK, BUT UNTESTED
  }

  

  /*----------------------------------------------------------------------------------------*/
  /*   B A S E   A C T I O N   O V E R R I D E S                                            */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Does this action support per-source parameters?  
   */ 
  public boolean 
  supportsSourceParams()
  {
    return true;
  }
  
  /**
   * Get an initial set of action parameters associated with an upstream node. 
   */ 
  public TreeMap<String,ActionParam>
  getInitialSourceParams()
  {
    TreeMap<String,ActionParam> params = new TreeMap<String,ActionParam>();

    {
      ActionParam param = 
	new IntegerActionParam
	(aOrder, 
	 "The order in which to apply the imported animation.",
	 100);
      params.put(param.getName(), param);
    }
    
    {
      ActionParam param = 
	new StringActionParam
	(aPrefixName,
	 "The namespace prefix for the referenced scene in Maya instead of the filename.", 
	 null);
      params.put(param.getName(), param);
    }
    return params;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   A C T I O N                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct a {@link SubProcessHeavy SubProcessHeavy} instance which when executed will 
   * fulfill the given action agenda. <P> 
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @param outFile 
   *   The file to which all STDOUT output is redirected.
   * 
   * @param errFile 
   *   The file to which all STDERR output is redirected.
   * 
   * @return 
   *   The SubProcess which will fulfill the agenda.
   * 
   * @throws PipelineException 
   *   If unable to prepare a SubProcess due to illegal, missing or imcompatable 
   *   information in the action agenda or a general failure of the prep method code.
   */
  public SubProcessHeavy
  prep
  (
   ActionAgenda agenda,
   File outFile, 
   File errFile 
  )
    throws PipelineException
  {
    /* sanity checks */ 
    String rootDAG = null;
    String importSet = null;
    Path initialMel = null;
    Path modelMel = null;
    Path animMel = null;
    Path finalMel = null;
    TreeMap<String,Path> modelPaths = new TreeMap<String,Path>();
    TreeMap<Integer,TreeMap<String,Path>> anims = new TreeMap<Integer,TreeMap<String,Path>>();
    TreeMap<Integer,Integer> shotLengths = new TreeMap<Integer,Integer>();
    Path saveScene = null;
    String linearUnit;
    int angularIndex;
    int timeIndex;
    
    boolean isAscii = false;
    {
      {
	rootDAG = (String) getSingleParamValue(aRootDAGNode); 
	if((rootDAG == null) || (rootDAG.length() == 0))
	  throw new PipelineException 
	    ("The MayaCollate Action requires a valid Root DAG Node!");
      }
      
      {
	importSet = (String) getSingleParamValue(aImportSet); 
	if((importSet == null) || (importSet.length() == 0))
	  throw new PipelineException 
	    ("The MayaCollate Action requires a valid Import Set!");
      }
      
      {
	linearUnit = (String) getSingleParamValue(aLinearUnits);
	if(linearUnit == null)
	  throw new PipelineException 
	    ("The MayaCollate Action requires a valid linear units value!");
      }
      
      {
	angularIndex = ((EnumActionParam) getSingleParam(aAngularUnits)).getIndex() ;
	if (angularIndex < 0)
	  throw new PipelineException 
	    ("The MayaCollate Action requires a valid angular units value!");
      }
      
      {
	timeIndex = ((EnumActionParam) getSingleParam(aTimeUnits)).getIndex() ;
	if (angularIndex < 0)
	  throw new PipelineException 
	    ("The MayaCollate Action requires a valid time units value!");
	timeIndex++;
      }


      /* MEL script filenames */ 
      initialMel = getMelPath(aInitialMEL, "Initial MEL", agenda);
      modelMel   = getMelPath(aModelMEL, "Model MEL", agenda);
      animMel    = getMelPath(aAnimMEL, "Anim MEL", agenda);
      finalMel   = getMelPath(aFinalMEL, "Final MEL", agenda);

      /* model and animation filenames */ 
      for(String sname : agenda.getSourceNames()) {
	NodeID snodeID = new NodeID(agenda.getNodeID(), sname);
	boolean hasModelSourceParam = false;

	{
	  FileSeq fseq = agenda.getPrimarySource(sname);
	  FilePattern fpat = fseq.getFilePattern();
	  String suffix = fpat.getSuffix();
	  if(fseq.isSingle() && (suffix != null)) {
	    if(suffix.equals("ma") || suffix.equals("mb")) {
	      String prefix = fpat.getPrefix();
	      if(hasSourceParams(sname)) {
		hasModelSourceParam = true;
		prefix = (String) getSourceParamValue(sname, "PrefixName");
	      }

	      if(modelPaths.containsKey(prefix)) 		
		throw new PipelineException
		  ("The MayaCollate Action requires that all model files have a unique " + 
		   "filename prefix!");

	      Path path = new Path(sname);
	      modelPaths.put(prefix, new Path(path.getParentPath(), fseq.getPath(0)));
	    }
	  }

	  if(hasSourceParams(sname)) {
	    if(fseq.isSingle() && (suffix != null) && suffix.equals("anim")) {
	      Integer order = (Integer) getSourceParamValue(sname, aOrder);
	      addAnimSeq(order, snodeID, agenda.getSourceActionInfo(sname), fseq, 
			 anims, shotLengths);
	    }
	    else if(!hasModelSourceParam) {
	      throw new PipelineException
		("The MayaCollate Action requires that only single animation file " + 
		 "sequences set the Order per-source parameter!");
	    }
	  }
	}

	for(FileSeq fseq : agenda.getSecondarySources(sname)) {
	  FilePattern fpat = fseq.getFilePattern();
	  if(hasSecondarySourceParams(sname, fpat)) {
	    String suffix = fseq.getFilePattern().getSuffix();
	    if(fseq.isSingle() && (suffix != null) && suffix.equals("anim")) {
	      Integer order = (Integer) getSecondarySourceParamValue(sname, fpat, aOrder);
	      addAnimSeq(order, snodeID, agenda.getSourceActionInfo(sname), fseq,
			 anims, shotLengths);
	    }
	    else {
	      throw new PipelineException
		("The MayaCollate Action requires that only single animation file " + 
		 "sequences set per-source parameters!");
	    }
	  }
	}
      }
      
      /* the generated Maya scene filename */ 
      {
	FileSeq fseq = agenda.getPrimaryTarget();
	String suffix = fseq.getFilePattern().getSuffix();
	if(!fseq.isSingle() || 
	   (suffix == null) || !(suffix.equals("ma") || suffix.equals("mb"))) 
	  throw new PipelineException
	    ("The MayaCollate Action requires that the primary target file sequence must " + 
	     "be a single Maya scene file."); 
	
	isAscii = suffix.equals("ma");
	saveScene = new Path(PackageInfo.sProdPath,
			     agenda.getNodeID().getWorkingParent() + "/" + fseq.getFile(0));
	
      }
    }

    /* create a temporary MEL script file */ 
    File script = createTemp(agenda, 0644, "mel");
    try {      
      FileWriter out = new FileWriter(script);

      out.write("print (\"$WORKING = \" + getenv(\"WORKING\") + \"\\n\");\n"); 

      /* a workaround needed in "maya -batch" mode */ 
      out.write("// WORK AROUNDS:\n" + 
		"lightlink -q;\n\n");
      
      /* load the animImportExport plugin */ 
      out.write("if(!`pluginInfo -q -l \"animImportExport.so\"`)\n" + 
		"  loadPlugin \"animImportExport.so\";\n\n");

      /* rename the current scene as the output scene */ 
      out.write("// SCENE SETUP\n" + 
		"file -rename \"" + saveScene + "\";\n" + 
		"file -type \"" + (isAscii ? "mayaAscii" : "mayaBinary") + "\";\n\n");
      out.write("// UNIT SETUP\n" +
      		"changeLinearUnit(\""+ linearUnit  +"\");\n");
      if (angularIndex == 0)
	out.write("currentUnit -a degree;\n");
      else
	out.write("currentUnit -a radian;\n");
      
      writeTimeUnit(timeIndex, out);
      

      /* the initial MEL script */ 
      if(initialMel != null) {
	out.write("// INTITIAL MEL\n" + 
		  "source \"" + initialMel + "\";\n\n");
      }
      
      /* the model file reference imports */ 
      for(String prefix : modelPaths.keySet()) {
	Path mpath = modelPaths.get(prefix);

	String format = "";
	{
	  String fname = mpath.getName();
	  if(fname.endsWith("ma")) 
	    format = "  -type \"mayaAscii\"\n";
	  else if(fname.endsWith("mb")) 
	    format = "  -type \"mayaBinary\"\n";
	}

	out.write
	  ("// MODEL: " + prefix + "\n" + 
	   "print \"Importing Reference Model: " + mpath + "\\n\";\n" + 
	   "file\n" +
	   "  -reference\n" + 
	   format +
	   "  -namespace \"LOADANIM" + prefix + "\"\n" + 
	   "  -options \"v=0\"\n" + 
	   "  \"$WORKING" + mpath + "\";\n" + 
	   "file\n" +
	   "  -reference\n" +
	   format +
	   "  -namespace \"" + prefix + "\"\n" + 
	   "  -options \"v=0\"\n" + 
	   "  \"$WORKING" + mpath + "\";\n" +
	   "\n\n");
      }
      
      /* the model MEL script */ 
      if(modelMel != null) {
	out.write("// MODEL MEL\n" + 
		  "source \"" + modelMel + "\";\n\n");
      }
      
      /* real number formatter */ 
      DecimalFormat fmt = new DecimalFormat("######0.0000");

      /* import the animation */ 
      double minFrame = -1.0;
      double maxFrame = -1.0;
      TreeMap<Integer,Double> shotStarts = new TreeMap<Integer,Double>();
      {
	/* the current start frame of the shot in the generated scene */ 
	double shotStart = 0.0; 
	{
	  Integer begin = (Integer) getSingleParamValue(aBeginFrame); 
	  if(begin != null) 
	    shotStart = (double) begin;

	  minFrame = shotStart; 
	}

	/* process the shots */ 
	for(Integer order : anims.keySet()) {
	  TreeMap<String,Path> animPaths = anims.get(order);
	  double animLength = (double) shotLengths.get(order);

	  out.write("// SHOT (Order): " + order + "\n\n");

	  /* apply the animations for each element in the shot */ 
	  for(String prefix : animPaths.keySet()) {
	    String loadSet  = ("LOADANIM" + prefix + ":" + importSet);
	    String applySet = (prefix + ":" + importSet);

 	    out.write("// ELEMENT: " + prefix + "\n");

	    /* import the entire animation onto the WORKING model */ 
	    {
	      Path apath = animPaths.get(prefix);
	      out.write
		("print \"Importing Animation: " + apath + "\\n\";\n" +
		 "select -r \"" + loadSet + "\";\n" +
		 "file\n" + 
		 "  -import\n" + 
		 "  -type \"animImport\"\n" + 
		 "  -options \";targetTime=1;time=0;copies=1;" + 
		 "option=replaceCompletely;pictures=0;connect=0;\"\n" + 
		 "  \"" + apath + "\";\n" +
		 "select -r \"" + loadSet + "\";\n" +
		 "setInfinity -postInfinite linear;\n");
	    }

	    /* copy the animation from the WORKING model to FINAL model */ 
	    {
	      /* cut the animation for the specified range from the WORKING model */ 
	      out.write
		("select -r \"" + loadSet + "\";\n" +
		 "copyKey\n" +
		 "  -clipboard anim\n" +
		 "  -option curve\n" +
		 "  -hierarchy below\n" +
		 "  -animation objects\n" + 
		 "  -time \"0.0:" + fmt.format(animLength - 0.01) + "\"\n" +
		 "  -includeUpperBound on\n" +
		 "  -forceIndependentEulerAngles on\n" + 
		 "  -controlPoints off\n" +
		 "  -shape on;\n");       
	      
	      /* paste the cut animation onto the real model node */ 
	      out.write
		("select -r \"" + applySet + "\";\n" +
		 "pasteKey\n" + 
		 "  -clipboard anim\n" + 
		 "  -option insert\n" +
		 "  -time " + fmt.format(shotStart) + "\n" +
		 //		 "  -includeUpperBound on\n" + 
		 "  -copies 1;\n\n");  
	    }
	  }
	    
	  /* advance to the next shot in the sequence */ 
	  shotStarts.put(order, shotStart);
	  shotStart += animLength;
	}
	
	maxFrame = shotStart;
      }
      
      {
	out.write("// CLEAN UP\n"); 

	/* clean up the working model references */ 
	for(Path mpath : modelPaths.values()) 
	  out.write("file -removeReference \"$WORKING" + mpath + "\";\n");
	
	/* general scene sanitation */ 
	out.write("source cleanUpScene;\n" + 
		  "deleteUnusedCommon(\"animCurve\", 0, \"Maya6 needs this...\");\n\n");
      }

      /* set visibility keys on the models */       
      {
	out.write("// VISIBILITY KEYS\n");
	for(Integer order : anims.keySet()) {
	  TreeSet<String> visible = new TreeSet<String>(anims.get(order).keySet());
	  for(String prefix : modelPaths.keySet()) {
	    out.write("setKeyframe -t " + fmt.format(shotStarts.get(order)) + 
		      " -v " + (visible.contains(prefix) ? "1" : "0") + 
		      " -at visibility \"" + prefix + ":" + rootDAG + "\";\n");
	  }
	}
	out.write("\n");
      }

      /* change range slider */ 
      if((minFrame < Integer.MAX_VALUE) && (maxFrame > -1))
	out.write("// FRAME RANGE\n" + 
		  "playbackOptions\n" + 
		  "  -minTime " + minFrame + "\n" +
		  "  -maxTime " + maxFrame + "\n" +
		  "  -animationStartTime " + minFrame + "\n" +
		  "  -animationEndTime " + maxFrame + ";\n\n");

      /* the anim MEL script */ 
      if(animMel != null) {
	out.write("// ANIM MEL\n" + 
		  "source \"" + animMel + "\";\n\n");
      }

      /* save the file */ 
      out.write("// SAVE\n" + 
		"print \"Saving Scene: " + saveScene + "\\n\";\n" + 
		"file -save;\n");

      /* the final MEL script */ 
      if(finalMel != null) {
	out.write("// FINAL MEL\n" + 
		  "source \"" + finalMel + "\";\n\n");
      }

      out.write("print \"ALL DONE.\\n\";\n");
      out.close();
    }
    catch(IOException ex) {
      throw new PipelineException
	("Unable to write temporary MEL script file (" + script + ") for Job " + 
	 "(" + agenda.getJobID() + ")!\n" +
	 ex.getMessage());
    }

    /* create the process to run the action */ 
    try {
      ArrayList<String> args = new ArrayList<String>();
      args.add("-batch");
      args.add("-script");
      args.add(script.getPath());

      String program = "maya";
      if(PackageInfo.sOsType == OsType.Windows) 
	program = (program + ".exe");
      
      /* add the custom Mental Ray shader path to the environment */
      Map<String, String> env = agenda.getEnvironment();
      Map<String, String> nenv = env;
      String midefs = env.get("PIPELINE_MI_SHADER_PATH");
      if(midefs != null) {
	nenv = new TreeMap<String, String>(env);
	Path dpath = new Path(new Path(agenda.getWorkingDir()), midefs);
	nenv.put("MI_CUSTOM_SHADER_PATH", dpath.toOsString());
      }

      return new SubProcessHeavy
	(agenda.getNodeID().getAuthor(), getName() + "-" + agenda.getJobID(), 
	 program, args, nenv, agenda.getWorkingDir(), 
	 outFile, errFile);
    }
    catch(Exception ex) {
      throw new PipelineException
	("Unable to generate the SubProcess to perform this Action!\n" +
	 ex.getMessage());
    }
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Get the abstract path to the MEL file specified by the given parameter.
   * 
   * @param pname
   *   The name of the single valued MEL parameter.
   * 
   * @param title
   *   The title of the parameter in exception messages.
   * 
   * @param agenda
   *   The agenda to be accomplished by the action.
   * 
   * @return 
   *   The MEL file or <CODE>null</CODE> if none was specified.
   */ 
  private Path
  getMelPath
  (
   String pname, 
   String title, 
   ActionAgenda agenda
  ) 
    throws PipelineException 
  {
    Path script = null; 
    String mname = (String) getSingleParamValue(pname); 
    if(mname != null) {
      FileSeq fseq = agenda.getPrimarySource(mname);
      if(fseq == null) 
	throw new PipelineException
	  ("Somehow the " + title + " node (" + mname + ") was not one of the " + 
	   "source nodes!");
      
      String suffix = fseq.getFilePattern().getSuffix();
      if(!fseq.isSingle() || (suffix == null) || !suffix.equals("mel")) 
	throw new PipelineException
	  ("The MayaCollate Action requires that the source node specified by the " + 
	   title + " parameter (" + mname + ") must have a single MEL file as its " + 
	   "primary file sequence!");
      
      NodeID mnodeID = new NodeID(agenda.getNodeID(), mname);
      script = new Path(PackageInfo.sProdPath, 
			mnodeID.getWorkingParent() + "/" + fseq.getFile(0)); 
    }

    return script;	      
  }

  /**
   * Add the given source animation file sequence.
   */ 
  private void 
  addAnimSeq
  (
   Integer order,
   NodeID nodeID,
   ActionInfo info, 
   FileSeq fseq,
   TreeMap<Integer,TreeMap<String,Path>> anims,
   TreeMap<Integer,Integer> shotLengths
  ) 
    throws PipelineException
  {
    if(order != null) {
      if((info == null) || !info.getName().equals("MayaAnimExport")) 
	throw new PipelineException
	  ("The MayaCollate Action requires that all animation file sequences where " + 
	   "generated by a MayaAnimExport action!");
      
      Integer firstFrame = (Integer) info.getSingleParamValue("FirstFrame");
      if(firstFrame == null)
	throw new PipelineException
	  ("Unable to determine the value of the First Frame single parameter of the " +
	   "MayaAnimExport action of the source node (" + nodeID + ")!");

      Integer lastFrame = (Integer) info.getSingleParamValue("LastFrame");  
      if(lastFrame == null)
	throw new PipelineException
	  ("Unable to determine the value of the Last Frame single parameter of the " +
	   "MayaAnimExport action of the source node (" + nodeID + ")!");

      int length = lastFrame - firstFrame + 1;
      Integer shotLength = shotLengths.get(order);
      if(shotLength == null) 
	shotLengths.put(order, length);
      else if(length != shotLength)
	throw new PipelineException
	  ("The MayaCollate Action requires that the length of all animations be identical " +
	   "for all file sequences with the same Order per-source parameter!");

      TreeMap<String,Path> animPaths = anims.get(order);
      if(animPaths == null) {
	animPaths = new TreeMap<String,Path>();
	anims.put(order, animPaths);
      }

      String prefix = fseq.getFilePattern().getPrefix();
      if(animPaths.containsKey(prefix)) 
	throw new PipelineException
	  ("All animation file sequences having the same Order must have unique filename " +
	   "prefixes!");
      
      Path path = new Path(PackageInfo.sProdPath,
			   nodeID.getWorkingParent() + "/" + fseq.getPath(0));
      animPaths.put(prefix, path);
    }
    
    
  }
  
  /**
   * Writes out the correct line of Mel to set the time unit, based on the timeIndex value
   * @param timeIndex
   * 	The index into the Enum Parameter for the time unit, 
   * 	incremented by one to match the borrowed mel.
   * @param out
   * 	The FileWriter to print the mel line to.
   * @throws IOException
   */
  private void writeTimeUnit(int timeIndex, FileWriter out) throws IOException
  {
    switch (timeIndex) {
    case 1: 
      out.write("currentUnit -t game -updateAnimation true;\n"); 
      break;
    case 2: 
      out.write("currentUnit -t film -updateAnimation true;\n"); 
      break;
    case 3: 
      out.write("currentUnit -t pal -updateAnimation true;\n"); 
      break;
    case 4: 
      out.write("currentUnit -t ntsc -updateAnimation true;\n"); 
      break;
    case 5: 
      out.write("currentUnit -t show -updateAnimation true;\n"); 
      break;
    case 6: 
      out.write("currentUnit -t palf -updateAnimation true;\n"); 
      break;
    case 7: 
      out.write("currentUnit -t ntscf -updateAnimation true;\n"); 
      break;
    case 8: 
      out.write("currentUnit -t millisec -updateAnimation true;\n"); 
      break;
    case 9: 
      out.write("currentUnit -t sec -updateAnimation true;\n"); 
      break;
    case 10: 
      out.write("currentUnit -t min -updateAnimation true;\n"); 
      break;
    case 11: 
      out.write("currentUnit -t hour -updateAnimation true;\n"); 
      break;
    case 12: 
      out.write("currentUnit -t 2fps -updateAnimation true;\n"); 
      break;
    case 13: 
      out.write("currentUnit -t 3fps -updateAnimation true;\n"); 
      break;
    case 14: 
      out.write("currentUnit -t 4fps -updateAnimation true;\n"); 
      break;
    case 15: 
      out.write("currentUnit -t 5fps -updateAnimation true;\n"); 
      break;
    case 16: 
      out.write("currentUnit -t 6fps -updateAnimation true;\n"); 
      break;
    case 17: 
      out.write("currentUnit -t 8fps -updateAnimation true;\n"); 
      break;
    case 18: 
      out.write("currentUnit -t 10fps -updateAnimation true;\n"); 
      break;
    case 19: 
      out.write("currentUnit -t 12fps -updateAnimation true;\n"); 
      break;
    case 20: 
      out.write("currentUnit -t 16fps -updateAnimation true;\n"); 
      break;
    case 21: 
      out.write("currentUnit -t 20fps -updateAnimation true;\n"); 
      break;
    case 22: 
      out.write("currentUnit -t 40fps -updateAnimation true;\n"); 
      break;
    case 23: 
      out.write("currentUnit -t 75fps -updateAnimation true;\n"); 
      break;
    case 24: 
      out.write("currentUnit -t 80fps -updateAnimation true;\n"); 
      break;
    case 25: 
      out.write("currentUnit -t 100fps -updateAnimation true;\n"); 
      break;
    case 26: 
      out.write("currentUnit -t 120fps -updateAnimation true;\n"); 
      break;
    case 27: 
      out.write("currentUnit -t 125fps -updateAnimation true;\n"); 
      break;
    case 28: 
      out.write("currentUnit -t 150fps -updateAnimation true;\n"); 
      break;
    case 29: 
      out.write("currentUnit -t 200fps -updateAnimation true;\n"); 
      break;
    case 30: 
      out.write("currentUnit -t 240fps -updateAnimation true;\n"); 
      break;
    case 31: 
      out.write("currentUnit -t 250fps -updateAnimation true;\n"); 
      break;
    case 32: 
      out.write("currentUnit -t 300fps -updateAnimation true;\n"); 
      break;
    case 33: 
      out.write("currentUnit -t 375fps -updateAnimation true;\n"); 
      break;
    case 34: 
      out.write("currentUnit -t 400fps -updateAnimation true;\n"); 
      break;
    case 35: 
      out.write("currentUnit -t 500fps -updateAnimation true;\n"); 
      break;
    case 36: 
      out.write("currentUnit -t 600fps -updateAnimation true;\n"); 
      break;
    case 37: 
      out.write("currentUnit -t 750fps -updateAnimation true;\n"); 
      break;
    case 38: 
      out.write("currentUnit -t 1200fps -updateAnimation true;\n"); 
      break;
    case 39: 
      out.write("currentUnit -t 1500fps -updateAnimation true;\n"); 
      break;
    case 40: 
      out.write("currentUnit -t 2000fps -updateAnimation true;\n"); 
      break;
    case 41: 
      out.write("currentUnit -t 3000fps -updateAnimation true;\n"); 
      break;
    case 42: 
      out.write("currentUnit -t 6000fps -updateAnimation true;\n"); 
      break;
    }
    out.write("optionVar\n" +
	"\t-fv playbackMin `playbackOptions -q -min`\n" +
    	"\t-fv playbackMax `playbackOptions -q -max`;\n");
  }



    
  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = -1941622558293866743L;
  
  /** 
   * Single action parameter names.
   */ 
  private static final String aRootDAGNode  = "RootDAGNode";
  private static final String aImportSet    = "ImportSet";
  private static final String aBeginFrame   = "BeginFrame";
  private static final String aInitialMEL   = "InitialMEL";
  private static final String aModelMEL     = "ModelMEL";
  private static final String aAnimMEL      = "AnimMEL";
  private static final String aFinalMEL     = "FinalMEL";
  private static final String aLinearUnits  = "LinearUnits";
  private static final String aAngularUnits = "AngularUnits";
  private static final String aTimeUnits    = "TimeUnits";

  /** 
   * Per-source action parameter names.
   */ 
  private static final String aOrder       = "Order";
  private static final String aPrefixName  = "PrefixName";

}

