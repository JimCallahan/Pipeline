options {
  STATIC = false;
}

PARSER_BEGIN(JavaOptsParser)

package us.temerity.pipeline.apps;

import us.temerity.pipeline.*;
import us.temerity.pipeline.parser.*;

import java.util.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   J A V A   O P T S   P A R S E R                                                        */
/*                                                                                          */
/*    The parser for the pljava(1) tool.                                                  */
/*------------------------------------------------------------------------------------------*/

class 
JavaOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   JavaApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  private void 
  init()
  {
    pLogBackups = 10;
    pClassPaths = new TreeSet<Path>(); 
    pJavaArgs = new ArrayList<String>();
  }
 


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private JavaApp  pApp;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the log file.
   */ 
  private Path  pLogFile; 

  /**
   * The number of backup to maintain of the log file.
   */ 
  private int  pLogBackups;


  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Whether non-information commands have been given.
   */   
  private boolean  pHasCommands; 

  /**
   * The path to the JAR archive containing the program to load and run.
   */ 
  private Path  pJarPath; 

  /**
   * The class loading directory paths. 
   */ 
  private TreeSet<Path>  pClassPaths;

  /**
   * The path to the Java source file containing the program to load and run.
   */ 
  private Path  pSourcePath; 

  /**
   * The name of the entry point class with the main(String[]) method. 
   */ 
  private String  pMainClassName; 

  /**
   * The command line arguments to pass to the loaded program.
   */ 
  private ArrayList<String>  pJavaArgs; 

}


PARSER_END(JavaOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */
| <LOG_FILE:          "--log-file">            : PATH_SEP
| <STANDARD_LOG_FILE: "--standard-log-file"> 
| <LOG_BACKUPS:       "--log-backups">         : INTEGER_SEP
| <LOG:               "--log">                 : LOG_SEP

  /* action options */	
| <JAR:        "--jar">                        : PATH_SEP
| <CLASSPATH:  "--classpath">                  : PATH_SEP
| <SOURCE:     "--source">                     : PATH_SEP
| <MAIN:       "--main">                       : STRING_SEP 

  /* java command line arguments */ 
| <ARGS_SEP: "--">                             : JAVA_ARGS_STATE

  /* seperators */ 
| <AE1: (["\0"])+>

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+> : DEFAULT
| <MISSING_INTEGER: ["\0"]>       : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>   : IGNORE_STATE
}


/* string arguments */   
<STRING_SEP> 
TOKEN :
{
  <EQ4:                  "=">   : STRING_STATE
| <MISSING_STRING_ARG: ~["="]>  : IGNORE_STATE
}

<STRING_STATE>
TOKEN :
{
  <STRING:         (~["\0"])*> : DEFAULT
| <EMPTY_STRING:   "\0">       : IGNORE_STATE
}

/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}


/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ3:               "=">   : LOG_TYPE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_TYPE> 
TOKEN :
{
  <LOG_ALL:          "all">       
| <LOG_ARG: 	     "arg">     
| <LOG_OPS: 	     "ops">      
| <LOG_NET: 	     "net">     
| <LOG_PLG: 	     "plg">     
| <LOG_SUB: 	     "sub">     
| <COLON:  	     ":">        : LOG_LEVEL  
| <ILLEGAL_LOG_TYPE: (~[":"])+>  : IGNORE_STATE    
}

<LOG_LEVEL> 
TOKEN : 
{
  <SEVERE:  	      "severe">  
| <WARNING: 	      "warning"> 
| <INFO:    	      "info">    
| <FINE:    	      "fine">    
| <FINER :  	      "finer">   
| <FINEST:    	      "finest">  
| <COMMA:  	      ",">             : LOG_TYPE
| <AE2:               (["\0"])+>       : DEFAULT
| <ILLEGAL_LOG_LEVEL: (~["\0",","])+>  : IGNORE_STATE
}


/* -- args ... */ 
<JAVA_ARGS_STATE> 
TOKEN :
{
  <JAVA_ARG:  (~["\0"])+>       
| <AE3:         (["\0"])+>
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine() 
  throws PipelineException :
{
  init();
}
{
  (InformationOpts() | Commands()) <EOF>
  {
    if(pHasCommands) {
      /* setup the log files */ 
      if(pLogFile != null) {
        try {
          LogMgr.getInstance().logToFile(pLogFile, pLogBackups, 10485760L);
        }
        catch(Exception ex) {
          System.out.print("Unable to setup log file: " + ex.getMessage());
          System.exit(1);
        }
      }
      
      if(pJarPath != null) {
        if(!pClassPaths.isEmpty()) 
          throw new PipelineException
            ("The --jar and --classpath options are mutially exclusive!"); 

        if(pSourcePath != null) 
          throw new PipelineException
            ("The --jar and --source options are mutially exclusive!"); 
        
        pApp.loadFromJar(pJarPath, pMainClassName); 
      }
      else if(!pClassPaths.isEmpty()) {
        if(pSourcePath != null) 
          throw new PipelineException
            ("The --classpath and --source options are mutially exclusive!"); 

        if(pMainClassName == null) 
          throw new PipelineException
            ("The --main option must be given with the --classpath option!"); 
          
        pApp.loadFromClassPaths(pClassPaths, pMainClassName); 
      }
      else if(pSourcePath != null) {
        pApp.compileAndLoad(pSourcePath); 
      }
      else {
        throw new PipelineException
          ("One of --jar, --classpath or --source must be specified!"); 
      }

      pApp.runProgram(pJavaArgs); 
    }
  }
}


void
Commands()
  throws PipelineException :
{
  pJarPath = null;
  pClassPaths.clear(); 
  pSourcePath = null;
  pMainClassName = null;
  pJavaArgs.clear(); 
}
{
  (GlobalOpts() AE())* 
    ((JarPath() | ClassPath() | SourcePath() | MainClass())+ 
     (<ARGS_SEP> AE() (JavaArg())+)?)?
  { 
    pHasCommands = true;
  }
}

void
JarPath() :
{
  Token t;
}
{
  <JAR> EQ() t=<PATH_ARG> AE() 
  { 
    pJarPath = new Path(t.image);
  }
}

void
ClassPath() :
{
  Token t;
}
{
  <CLASSPATH> EQ() t=<PATH_ARG> AE() 
  { 
    pClassPaths.add(new Path(t.image)); 
  }
}

void
SourcePath() :
{
  Token t;
}
{
  <SOURCE> EQ() t=<PATH_ARG> AE() 
  { 
    pSourcePath = new Path(t.image);
  }
}

void
MainClass() :
{
  Token t;
}
{
  <MAIN> EQ() t=<STRING> AE() 
  { 
    pMainClassName = new String(t.image); 
  }
}

void
JavaArg() :
{
  Token t;
}
{
  t=<JAVA_ARG> AE()
  { 
    pJavaArgs.add(t.image);
  }
}



/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts() :
{}
{
  (Log() | LogFile() | StandardLogFile() | LogBackups())
  {}
}


void LogFile() : 
{
  Token t;
}
{
  <LOG_FILE> EQ() t=<PATH_ARG>
  { 
    pLogFile = new Path(t.image);
  }
}

void StandardLogFile() : 
{}
{
  <STANDARD_LOG_FILE>
  { 
    pLogFile = new Path(PackageInfo.sInstPath, "/logs/plplugin.log");
  }
}

void LogBackups() : 
{
  Token t;
}
{
  <LOG_BACKUPS> EQ() t=<INTEGER>
  { 
    pLogBackups = Integer.parseInt(t.image);
  }
}

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}


void LoggerAll() : 
{
  LogMgr.Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevels(v);
  }
}

void LoggerPair() : 
{
  LogMgr.Kind k;
  LogMgr.Level v;
}
{
  (k=LogKind() <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevel(k, v);
  }
}

LogMgr.Kind LogKind() : 
{
  LogMgr.Kind g;
}
{
  (g=ArgKind() | g=OpsKind() | g=NetKind() | g=PlgKind() | g=SubKind())
  {
    return g;
  }
}

LogMgr.Kind ArgKind() : 
{}
{
  <LOG_ARG>
  {
    return LogMgr.Kind.Arg;
  }
}

LogMgr.Kind OpsKind() : 
{}
{
  <LOG_OPS>
  {
    return LogMgr.Kind.Ops;
  }
}

LogMgr.Kind NetKind() : 
{}
{
  <LOG_NET>
  {
    return LogMgr.Kind.Net;
  }
}

LogMgr.Kind PlgKind() : 
{}
{
  <LOG_PLG>
  {
    return LogMgr.Kind.Plg;
  }
}

LogMgr.Kind SubKind() : 
{}
{
  <LOG_SUB>
  {
    return LogMgr.Kind.Sub;
  }
}



LogMgr.Level LogLevel() : 
{
  LogMgr.Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

LogMgr.Level SevereLevel() :
{
  LogMgr.Level v;
}
{
  <SEVERE> 
  {
    return LogMgr.Level.Severe;
  }
}

LogMgr.Level WarningLevel() :
{
  LogMgr.Level v;
}
{
  <WARNING> 
  {
    return LogMgr.Level.Warning;
  }
}

LogMgr.Level InfoLevel() :
{
  LogMgr.Level v;
}
{
  <INFO> 
  {
    return LogMgr.Level.Info;
  }
}

LogMgr.Level FineLevel() :
{
  LogMgr.Level v;
}
{
  <FINE> 
  {
    return LogMgr.Level.Fine;
  }
}

LogMgr.Level FinerLevel() :
{
  LogMgr.Level v;
}
{
  <FINER> 
  {
    return LogMgr.Level.Finer;
  }
}

LogMgr.Level FinestLevel() :
{
  LogMgr.Level v;
}
{
  <FINEST> 
  {
    return LogMgr.Level.Finest;
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2> | t=<AE3>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4>)  
  { 
    return t; 
  }
}
