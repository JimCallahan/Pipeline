// $Id: UpdateState.java,v 1.1 2008/05/16 01:11:40 jim Exp $

package us.temerity.pipeline;

import java.util.*;

/*------------------------------------------------------------------------------------------*/
/*   U P D A T E   S T A T E                                                                */
/*------------------------------------------------------------------------------------------*/

/**
 * The status of individual files associated with a node with respect to the 
 * <CODE>QueueStates</CODE> of those files which are their upstream dependencies.<P> 
 * 
 * If the node has secondary file sequences, the <CODE>UpdateState</CODE> is shared for the 
 * corresponding files in the primary and secondary file sequences.  This is due to the fact
 * that secondary files are generated by the same queue job which generates the primary file
 * and therefore cannot have independent <CODE>UpdateState</CODE> values. <P> 
 * 
 * The <CODE>UpdateState</CODE> of a given file is computed by examining the current
 * <CODE>QueueState</CODE> of the file and the <CODE>UpdateStates</CODE> of all upstream 
 * files which are dependencies of the file.  
 * 
 * @see QueueState
 */
public
enum UpdateState
{  
  /**
   * No working version exists, therefore the state is undefined. <P> 
   * 
   * This is the only possible state when the <CODE>VersionState</CODE> is 
   * {@link VersionState#CheckedIn CheckedIn}.
   */ 
  Undefined, 

  /**
   * The file has a <CODE>QueueState</CODE> of <CODE>Finished</CODE> and all of the upstream 
   * per-file dependencies have a <CODE>UpdateState</CODE> of <CODE>Unknown</CODE>.<P> 
   * 
   * This does not mean that this file cannot cause nodes further downstream to become 
   * <CODE>Stale</CODE> or <CODE>Dubious</CODE>, just that it cannot be trivially determined 
   * by only looking at the files <CODE>QueueState</CODE> and <CODE>UpdateState</CODE> of the 
   * upstream files.
   */ 
  Unknown, 

  /**
   * The file has a <CODE>QueueState</CODE> which is not <CODE>Finished</CODE> or any of the
   * upstream per-file dependencies have an <CODE>UpdateState</CODE> of <CODE>Stale</CODE>.<P>
   * 
   * This can be taken as an indication that all downstream files which have the potential to 
   * be <CODE>Stale</CODE> or <CODE>Dubious</CODE> can be considered to be so without further
   * examination of per-file timestamps. 
   */
  Stale,

  /**
   * The file has a <CODE>QueueState</CODE> which is <CODE>Dubious</CODE> or any of the 
   * upstream per-file dependencies have an <CODE>UpdateState</CODE> of 
   * <CODE>Dubious</CODE>.<P> 
   * 
   * This can be taken as an indication that all downstream files which have the potential to 
   * be <CODE>Stale</CODE> or <CODE>Dubious</CODE> can be considered to be so without further
   * examination of per-file timestamps. <P> 
   * 
   * This state has precedence over <CODE>Stale</CODE>.
   */
  Dubious; 

  

  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Get the list of all possible states.
   */ 
  public static ArrayList<UpdateState>
  all() 
  {
    UpdateState values[] = values();
    ArrayList<UpdateState> all = new ArrayList<UpdateState>(values.length);
    int wk;
    for(wk=0; wk<values.length; wk++)
      all.add(values[wk]);
    return all;
  }



  /*----------------------------------------------------------------------------------------*/
  /*   C O N V E R S I O N                                                                  */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Convert to a more human friendly string representation.
   */ 
  public String
  toTitle() 
  {
    return toString();
  }

}
