// $Id: JobStatus.java,v 1.1 2004/08/26 06:05:15 jim Exp $

package us.temerity.pipeline;

import java.util.*;
import java.util.logging.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   J O B   S T A T U S                                                                    */
/*------------------------------------------------------------------------------------------*/

/**
 * The abreviated status of queue job.
 */
public
class JobStatus
  implements Serializable
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct with the given name.
   * 
   * @param jobID
   *   The unique job identifier.
   * 
   * @param nodeID
   *   The unique working version identifier of the target node.
   * 
   * @param state 
   *   The status of the job in the queue.
   * 
   * @param target
   *   The primary file sequence to generate.
   * 
   * @param sourceIDs
   *   The unique identifiers of the upstream jobs.
   */
  public 
  JobStatus
  (
   long jobID, 
   NodeID nodeID, 
   JobState state, 
   FileSeq target, 
   Set<Long> sourceIDs
  ) 
  {
    if(jobID < 0) 
      throw new IllegalArgumentException
	("The job ID (" + jobID + ") must be positive!");
    pJobID = jobID;

    if(nodeID == null) 
      throw new IllegalArgumentException("The node ID cannot be (null)!");
    pNodeID = nodeID;

    if(state == null) 
      throw new IllegalArgumentException("The job state cannot be (null)!");
    pState = state;

    if(target == null) 
      throw new IllegalArgumentException("The target file sequence cannot be (null)!");
    pTargetFileSeq = target; 

    pSourceJobIDs = new TreeSet<Long>();
    if(sourceIDs != null) 
      pSourceJobIDs.addAll(sourceIDs);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/
  
  /**
   * Get the unique job identifier.
   */ 
  public long 
  getJobID() 
  {
    return pJobID; 
  }

  /**
   * Gets the unique working version identifier of the target node.
   */
  public NodeID
  getNodeID() 
  {
    return pNodeID; 
  }

  /**
   * Get the status of the job in the queue.
   */
  public synchronized JobState
  getState() 
  {
    return pState;
  }

  /**
   * Get the primary target file sequence generated by the job.
   */ 
  public FileSeq 
  getTargetSequence() 
  {
    return pTargetFileSeq;
  }
  
  /**
   * Are there any jobs upstream of this job?
   */ 
  public boolean
  hasSources()
  {
    return (!pSourceJobIDs.isEmpty());
  }

  /**
   * Get the unique identifiers of the upstream jobs.
   */ 
  public SortedSet<Long>
  getSourceJobIDs()
  {
    return Collections.unmodifiableSortedSet(pSourceJobIDs);
  }
  


  /*----------------------------------------------------------------------------------------*/
  /*   C O N V E R S I O N                                                                  */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The string representation of the primary file sequence.
   */ 
  public String
  toString() 
  {
    return pTargetFileSeq.toString();
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final long serialVersionUID = 6067779274752979919L; 



  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The unique job identifier.
   */ 
  private long  pJobID;

  /**
   * The unique working version identifier.
   */ 
  private NodeID  pNodeID;

  /**
   * The status of the job in the queue.
   */
  private JobState  pState;

  /**
   * The primary target file sequence generated by the job. 
   */ 
  private FileSeq  pTargetFileSeq;

  /**
   * The unique identifiers of the upstream jobs.
   */
  private TreeSet<Long>  pSourceJobIDs; 
  
  
}

