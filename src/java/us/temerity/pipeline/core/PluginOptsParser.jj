options {
  STATIC = false;
}

PARSER_BEGIN(PluginOptsParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;
import us.temerity.pipeline.parser.*;

import java.util.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   P L U G I N   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plplugin(1) plugin tool.                                           */
/*------------------------------------------------------------------------------------------*/

class 
PluginOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   PluginApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  private void 
  init()
  {
    pLogBackups   = 10;
    pList         = false;
    pContents     = false;
    pSummary      = false;
    pInstall      = false;
    pExtract      = false;
    pVendorSet    = new TreeSet<String>();
    pTypeSet      = new TreeSet<PluginType>();
    pNameSet      = new TreeSet<String>();
    pVersionSet   = new TreeSet<VersionID>();
    pStatusSet    = new TreeSet<PluginStatus>();
    pPluginFiles  = new TreeSet<File>();
    pExtractPaths = new TreeSet<String>();
  }
 


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private PluginApp  pApp;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the log file.
   */ 
  private Path  pLogFile; 

  /**
   * The number of backup to maintain of the log file.
   */ 
  private int  pLogBackups;


  /*----------------------------------------------------------------------------------------*/

  /**
   * Whether non-information commands have been given.
   */   
  private boolean  pHasCommands; 

  /**
   * Whether to list information about the installed plugins.
   */ 
  private boolean  pList; 

  /**
   * Whether to list the contents of installed plugins with plugins.
   */
  private boolean  pContents;

  /**
   * Whether to display a summary table about the installed plugins.
   */
  private boolean  pSummary;

  /**
   * The list of PluginStatus enums used to filter the display of installed plugins.
   */
  private TreeSet<PluginStatus>  pStatusSet;

  /**
   * The list of PluginType enums used to filter the display of installed plugins.
   */
  private TreeSet<PluginType>  pTypeSet;

  /**
   * The list of plugin vendor name Strings used to filter the 
   * display of installed plugins.
   */
  private TreeSet<String>  pVendorSet;

  /**
   * The list of plugin name Strings used to filter the display of installed plugins.
   */
  private TreeSet<String>  pNameSet;

  /**
   * The list of VersionID objects used to filter the display of installed plugins.
   */
  private TreeSet<VersionID>  pVersionSet;

  /**
   * Whether to ignore the Local Vendor check.
   */ 
  private boolean  pExternal;

  /**
   * Whether to ignore the Java class/package aliasing check.
   */ 
  private boolean  pRename;

  /**
   * Whether to just perform plugin validation and not load the plugin.
   */
  private boolean  pDryRun;

  /**
   * Whether to install the given plugins. 
   */ 
  private boolean  pInstall;

  /**
   * The list of compiled Java plugin files containing plugins.
   */ 
  private TreeSet<File>  pPluginFiles; 

  /**
   * Whether to extract resources.
   */
  private boolean  pExtract;

  /**
   *
   */
  private TreeSet<String>  pExtractPaths;

  /**
   *
   */
  private File pExtractDir;
}


PARSER_END(PluginOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */
| <LOG_FILE:          "--log-file">                : PATH_SEP
| <STANDARD_LOG_FILE: "--standard-log-file"> 
| <LOG_BACKUPS:       "--log-backups">             : INTEGER_SEP
| <LOG:               "--log">                     : LOG_SEP

  /* commands */
| <LIST:     "list">                               :  OPTIONS
| <CONTENTS: "contents">                           :  OPTIONS
| <SUMMARY:  "summary">
| <INSTALL:  "install">                            :  OPTIONS
| <EXTRACT:  "extract">                            :  OPTIONS

  /* seperators */ 
| <AE1: (["\0"])+>

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>    : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>       : IGNORE_STATE
}

<OPTIONS>
TOKEN :
{
  /* action options */	
  <FILTER_STATUS:  "--status">                     : PLUGIN_STATUS_SEP
| <FILTER_TYPE:    "--type">                       : PLUGIN_TYPE_SEP
| <FILTER_VENDOR:  "--vendor">                     : PLUGIN_VENDOR_SEP
| <FILTER_NAME:    "--name">                       : PLUGIN_NAME_SEP
| <FILTER_VERSION: "--version">                    : PLUGIN_VERSION_SEP
| <EXTERNAL:       "--external">    
| <RENAME:         "--rename">    
| <DRYRUN:         "--dry-run">
| <EXTRACT_DIR:    "--dir">                        : EXTRACT_PATH_SEP

  /* plugin files */
| <PLUGIN_FILE:   (["/","\\"])* ("../" | "..\\")* <PLUGIN_COMP> 
                  (["/","\\"] (".." | (<PLUGIN_COMP>)+)?)* (".jar" | ".class")>  
| <#PLUGIN_COMP:  (["a"-"z","A"-"Z","0"-"9","_","-","."])*>

  /* extract paths */
| <EXTRACT_PATH:        (["a"-"z","A"-"Z","0"-"9","_","-","."])+ 
		        ("/" (".." | (<EXTRACT_PATH_COMP>)+)?)*>
| <#EXTRACT_PATH_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>

  /* argument end separator */ 
| <AE2:               (["\0"])+>   

  /* errors */ 
| <UNKNOWN_OPTION2:     "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN_COMMAND2:  ~["-","\0"] (~["\0"])*>      : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: ["\0"]>      : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>  : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}


/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ3:               "=">   : LOG_TYPE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_TYPE> 
TOKEN :
{
  <LOG_ALL:          "all">       
| <LOG_ARG: 	     "arg">     
| <LOG_OPS: 	     "ops">      
| <LOG_NET: 	     "net">     
| <LOG_PLG: 	     "plg">     
| <COLON:  	     ":">        : LOG_LEVEL  
| <ILLEGAL_LOG_TYPE: (~[":"])+>  : IGNORE_STATE    
}

<LOG_LEVEL> 
TOKEN : 
{
  <SEVERE:  	      "severe">  
| <WARNING: 	      "warning"> 
| <INFO:    	      "info">    
| <FINE:    	      "fine">    
| <FINER :  	      "finer">   
| <FINEST:    	      "finest">  
| <COMMA:  	      ",">             : LOG_TYPE
| <AE3:               (["\0"])+>       : DEFAULT
| <ILLEGAL_LOG_LEVEL: (~["\0",","])+>  : IGNORE_STATE
}


/* plugins status arguments */ 
<PLUGIN_STATUS_SEP> 
TOKEN :
{
  <EQ4:                         "=">   : PLUGIN_STATUS_STATE
| <MISSING_PLUGIN_STATUS_ARG: ~["="]>  : IGNORE_STATE
}

<PLUGIN_STATUS_STATE> 
TOKEN :
{
  <PLUGIN_STATUS_ALL:        "all"> 
| <PLUGIN_STATUS_REQ:        "req"> 
| <PLUGIN_STATUS_INST:       "inst"> 
| <PLUGIN_STATUS_DEV:        "dev"> 
| <PLUGIN_STATUS_PERM:       "perm"> 
| <PLUGIN_STATUS_MISS:       "miss"> 
| <PLUGIN_STATUS_UNKNOWN:    "unknown"> 
| <COMMA1:                   ","> 
| <AE4:                      "\0">         : OPTIONS
| <ILLEGAL_PLUGIN_STATUS: (~[",","\0"])+>  : IGNORE_STATE
}


/* plugin type arguments */ 
<PLUGIN_TYPE_SEP> 
TOKEN :
{
  <EQ5:                       "=">   : PLUGIN_TYPE_STATE
| <MISSING_PLUGIN_TYPE_ARG: ~["="]>  : IGNORE_STATE
}

<PLUGIN_TYPE_STATE> 
TOKEN :
{
  <PLUGIN_TYPE_ALL:        "all"> 
| <PLUGIN_TYPE_ACT:        "act"> 
| <PLUGIN_TYPE_ANNOT:      "annot"> 
| <PLUGIN_TYPE_ARCH:       "arch"> 
| <PLUGIN_TYPE_BUILD:      "build"> 
| <PLUGIN_TYPE_COMP:       "comp"> 
| <PLUGIN_TYPE_EDIT:       "edit"> 
| <PLUGIN_TYPE_KEY:        "key">
| <PLUGIN_TYPE_MASTER:     "master">
| <PLUGIN_TYPE_QUEUE:      "queue">
| <PLUGIN_TYPE_TOOL:       "tool">
| <COMMA2:                 ","> 
| <AE5:                    "\0">         : OPTIONS
| <ILLEGAL_PLUGIN_TYPE: (~[",","\0"])+>  : IGNORE_STATE
}


/* plugin vendor arguments */
<PLUGIN_VENDOR_SEP>
TOKEN :
{
  <EQ6:                          "=">   : PLUGIN_VENDOR_STATE
| <MISSING_PLUGIN_VENDOR_ARG:  ~["="]>  : IGNORE_STATE
}

<PLUGIN_VENDOR_STATE> 
TOKEN :
{
  <PLUGIN_VENDOR:           (["a"-"z","A"-"Z"]) 
	   	            (["a"-"z","A"-"Z","0"-"9","_","-","."])+>  
| <COMMA3:                    ",">
| <AE6:                      ["\0"]>                                   : OPTIONS
| <ILLEGAL_PLUGIN_VENDOR:  (~[",","\0"])+>                             : IGNORE_STATE
}


/* plugin name arguments */
<PLUGIN_NAME_SEP>
TOKEN :
{
  <EQ7:                        "=">   : PLUGIN_NAME_STATE
| <MISSING_PLUGIN_NAME_ARG:  ~["="]>  : IGNORE_STATE
}

<PLUGIN_NAME_STATE> 
TOKEN :
{
  <PLUGIN_NAME:           (["a"-"z","A"-"Z"]) 
	   	          (["a"-"z","A"-"Z","0"-"9","_","-","."])+>
| <COMMA4:                  ",">
| <AE7:                    ["\0"]>                                   : OPTIONS
| <ILLEGAL_PLUGIN_NAME:  (~[",","\0"])+>                             : IGNORE_STATE
}


/* plugin version arguments */
<PLUGIN_VERSION_SEP>
TOKEN :
{
  <EQ8:                           "=">   : PLUGIN_VERSION_STATE
| <MISSING_PLUGIN_VERSION_ARG:  ~["="]>  : IGNORE_STATE
}

<PLUGIN_VERSION_STATE> 
TOKEN :
{
  <PLUGIN_VERSION:           (<IREVNUM> "." <REVNUM> "." <REVNUM>)>
| <#IREVNUM:                  ["1"-"9"] (["0"-"9"])*>
| <#REVNUM:                  (["0"-"9"])+>
| <COMMA5:                     ",">
| <AE8:                       ["\0"]>                                : OPTIONS
| <ILLEGAL_PLUGIN_VERSION:  (~[",","\0"])+>                          : IGNORE_STATE
}

/* filesystem path arguments */ 
<EXTRACT_PATH_SEP> 
TOKEN :
{
  <EQ9:                        "=">   : EXTRACT_PATH_STATE
| <MISSING_EXTRACT_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<EXTRACT_PATH_STATE> 
TOKEN :
{
  <EXTRACT_PATH_ARG:        ("/")* ("../")* <EXTRACT_PATH_ARG_COMP> 
		            ("/" (".." | (<EXTRACT_PATH_ARG_COMP>)+)?)*>  : OPTIONS
| <#EXTRACT_PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_EXTRACT_PATH:    ["\0"]>                                       : IGNORE_STATE
| <ILLEGAL_EXTRACT_PATH:  (~["\0"])+>                                     : IGNORE_STATE
}


/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine() 
  throws PipelineException :
{
  init();
}
{
  (InformationOpts() | Commands()) <EOF>
  {
    if(pHasCommands) {
      /* setup the log files */ 
      if(pLogFile != null) {
        try {
          LogMgr.getInstance().logToFile(pLogFile, pLogBackups, 10485760L);
        }
        catch(Exception ex) {
          System.out.print("Unable to setup log file: " + ex.getMessage());
          System.exit(1);
        }
      }

      /* initialize the plugins */ 
      PluginMgrControlClient client = new PluginMgrControlClient();
      try {
        try {
          client.update();
        }
        catch(PipelineException ex) {
          LogMgr.getInstance().log
            (LogMgr.Kind.Plg, LogMgr.Level.Severe,
             "Unable to load plugins: " + ex);
          System.exit(1);
        }
      
        /* run the program */ 
        if(pList) {
          pApp.listPlugins(client, 
	                   pStatusSet, pTypeSet, 
			   pVendorSet, pNameSet, pVersionSet, 
			   false);
        }
	else if(pContents) {
	  pApp.listPlugins(client, 
	                   pStatusSet, pTypeSet, 
			   pVendorSet, pNameSet, pVersionSet, 
			   true);
	}
	else if(pSummary) {
	  pApp.pluginSummary(client);
	}
        else if(pInstall) {
          if(pPluginFiles.isEmpty()) 
            throw new ParseException
              ("No plugins where installed, since no Java class or JAR files were given!");
	
          boolean success = true;
          try {
            File plugindir = new File(".");
            Iterator iter = pPluginFiles.iterator();
            while(iter.hasNext()) {
              File pluginfile = (File) iter.next();
              
              LogMgr.getInstance().logAndFlush
                (LogMgr.Kind.Ops, LogMgr.Level.Info,
                 "\n" + 
                 "------------------------------------------------------------------------\n" +
                 (pDryRun ? "Testing Installation: " : "Installing: ") + pluginfile); 
              
              try {
                client.installPlugin(plugindir, pluginfile, pExternal, pRename, pDryRun);
              }
              catch(PipelineException ex) {
                success = false;
                LogMgr.getInstance().log
                  (LogMgr.Kind.Ops, pDryRun ? LogMgr.Level.Warning : LogMgr.Level.Severe, 
                 ex.getMessage());
              }
              catch(Exception ex) {
                success = false;
                LogMgr.getInstance().log
                  (LogMgr.Kind.Ops, LogMgr.Level.Severe,
                   Exceptions.getFullMessage(ex));
              }
            }
          }
          finally { 
            LogMgr.getInstance().logAndFlush
              (LogMgr.Kind.Ops, LogMgr.Level.Info,
               "\n" + 
               "------------------------------------------------------------------------");
            
            if(success) {
              LogMgr.getInstance().logAndFlush
                (LogMgr.Kind.Ops, LogMgr.Level.Info,
                 (pDryRun ? "Testing" : "Installation") + " Complete."); 
            }
            else {
              if(pDryRun) {
                throw new PipelineException
                  ("While testing the installtion of plugins, problems were encountered " + 
                   "that would have prevented some of the given plugins from being " + 
                   "installed successfully.");
              }
              else {
                throw new PipelineException
                ("While installing plugins, problems were encountered that prevented " + 
                 "some of the given plugins from being installed successfully.");
              }
            }
          }
        }
	else if(pExtract) {
	  if(pVendorSet.size() == 0 && 
	     pTypeSet.size() == 0 && 
	     pNameSet.size() == 0 && 
	     pVersionSet.size() == 0) {
	     throw new PipelineException
	      ("Please provide some information about the plugin.  " + 
	       "No options will result in too many matches.");
	  }
	  if(pExtractDir == null)
	    pExtractDir = new File(".");

	  try {
	    pApp.extractPluginResources(client, 
	                                pVendorSet, pTypeSet, pNameSet, pVersionSet, 
	                                pExtractPaths, pExtractDir);
	  }
	  catch(PipelineException ex) {
	    LogMgr.getInstance().log
	      (LogMgr.Kind.Ops, LogMgr.Level.Warning,
               ex.getMessage());
	  }
	}
      }
      finally {
        client.disconnect();
        LogMgr.getInstance().flush();
      }
    }
  }
}


void
Commands()
  throws PipelineException :
{}
{
  (GlobalOpts() AE())* 
  (ListCmd() | ContentsCmd() | SummaryCmd() | InstallCmd() | ExtractCmd())
  { 
    pHasCommands = true;
  }
}

void
ListCmd() :
{}
{
  <LIST> AE() (PluginFilterOpts())*
  {
    pList = true;
  }
}

void
ContentsCmd() :
{}
{
  <CONTENTS> AE() (PluginFilterOpts())*
  {
    pContents = true;
  }
}

void
PluginFilterOpts() :
{}
{
  (PluginStatus() | PluginType() | PluginVendor() | PluginName() | PluginVersion())
}

void
SummaryCmd() :
{}
{
  <SUMMARY> AE()
  {
    pSummary = true;
  }
}

void
InstallCmd() :
{}
{
  <INSTALL> AE() InstallOpts()
  {
    pInstall = true;
  }
}

void
InstallOpts() :
{}
{
  ((External() | Rename() | DryRun())* (PluginFile() AE())+)
}

void
ExtractCmd() :
{}
{
  <EXTRACT> AE() (ExtractOpts())* (ExtractPath() AE())*
  {
    pExtract = true;
  }
}

void
ExtractOpts() :
{}
{
  (PluginVendor() | PluginType() | PluginName() | PluginVersion() | ExtractDir())
}

void
ExtractDir() :
{
  Token t;
}
{
  <EXTRACT_DIR> EQ() t=<EXTRACT_PATH_ARG> AE()
  {
    pExtractDir = new File(t.image);
  }
}

void
ExtractPath() :
{
  Token t;
}
{
  (t=<EXTRACT_PATH>)
  {
    pExtractPaths.add(t.image);
  }
}

void
PluginStatus() :
{}
{
  <FILTER_STATUS> EQ() PluginStatusToken() (COMMA() PluginStatusToken())* AE()
}

void
PluginType() :
{}
{
  <FILTER_TYPE> EQ() PluginTypeToken() (COMMA() PluginTypeToken())* AE()
}

void
PluginVendor() :
{}
{
  <FILTER_VENDOR> EQ() PluginVendorToken() (COMMA() PluginVendorToken())* AE()
}

void
PluginName() :
{}
{
  <FILTER_NAME> EQ() PluginNameToken() (COMMA() PluginNameToken())* AE()
}

void
PluginVersion() :
{}
{
  <FILTER_VERSION> EQ() PluginVersionToken() (COMMA() PluginVersionToken())* AE()
}

void
PluginVendorToken() :
{
  Token t;
}
{
  t=<PLUGIN_VENDOR>
  {
    pVendorSet.add(t.image);
  }
}

void
PluginNameToken() :
{
  Token t;
}
{
  t=<PLUGIN_NAME>
  {
    pNameSet.add(t.image);
  }
}

void
PluginVersionToken() :
{
  Token t;
}
{
  t=<PLUGIN_VERSION>
  {
    pVersionSet.add(new VersionID(t.image));
  }
}

void
PluginStatusToken() :
{}
{
  (PluginStatusAll() | 
   PluginStatusRequired() | PluginStatusMissing() | 
   PluginStatusInstalled() | PluginStatusUnderDevelopment() | PluginStatusPermanent() | 
   PluginStatusUnknown())
}

void
PluginTypeToken() :
{}
{
  (PluginTypeAll() | 
   PluginTypeAction() | PluginTypeAnnotation() | PluginTypeArchiver() | 
   PluginTypeBuilderCollection() | PluginTypeComparator() | PluginTypeEditor() | 
   PluginTypeKeyChooser() | PluginTypeMasterExt() | PluginTypeQueueExt() | 
   PluginTypeTool())
}

void
PluginStatusAll() :
{}
{
  <PLUGIN_STATUS_ALL>
  {
    for(PluginStatus status : PluginStatus.all())
      pStatusSet.add(status);
  }
}

void
PluginStatusRequired() :
{}
{
  <PLUGIN_STATUS_REQ>
  {
    pStatusSet.add(PluginStatus.Required);
  }
}

void
PluginStatusInstalled() :
{}
{
  <PLUGIN_STATUS_INST>
  {
    pStatusSet.add(PluginStatus.Installed);
  }
}

void
PluginStatusUnderDevelopment() :
{}
{
  <PLUGIN_STATUS_DEV>
  {
    pStatusSet.add(PluginStatus.UnderDevelopment);
  }
}

void
PluginStatusPermanent() :
{}
{
  <PLUGIN_STATUS_PERM>
  {
    pStatusSet.add(PluginStatus.Permanent);
  }
}

void
PluginStatusMissing() :
{}
{
  <PLUGIN_STATUS_MISS>
  {
    pStatusSet.add(PluginStatus.Missing);
  }
}

void
PluginStatusUnknown() :
{}
{
  <PLUGIN_STATUS_UNKNOWN>
  {
    pStatusSet.add(PluginStatus.Unknown);
  }
}

void
PluginTypeAll() :
{}
{
  <PLUGIN_TYPE_ALL>
  {
    for(PluginType type : PluginType.all())
      pTypeSet.add(type);
  }
}

void
PluginTypeAction() :
{}
{
  <PLUGIN_TYPE_ACT>
  {
    pTypeSet.add(PluginType.Action);
  }
}

void
PluginTypeAnnotation() :
{}
{
  <PLUGIN_TYPE_ANNOT>
  {
    pTypeSet.add(PluginType.Annotation);
  }
}

void
PluginTypeArchiver() :
{}
{
  <PLUGIN_TYPE_ARCH>
  {
    pTypeSet.add(PluginType.Archiver);
  }
}

void
PluginTypeBuilderCollection() :
{}
{
  <PLUGIN_TYPE_BUILD>
  {
    pTypeSet.add(PluginType.BuilderCollection);
  }
}

void
PluginTypeComparator() :
{}
{
  <PLUGIN_TYPE_COMP>
  {
    pTypeSet.add(PluginType.Comparator);
  }
}

void
PluginTypeEditor() :
{}
{
  <PLUGIN_TYPE_EDIT>
  {
    pTypeSet.add(PluginType.Editor);
  }
}

void
PluginTypeKeyChooser() :
{}
{
  <PLUGIN_TYPE_KEY>
  {
    pTypeSet.add(PluginType.KeyChooser);
  }
}

void
PluginTypeMasterExt() :
{}
{
  <PLUGIN_TYPE_MASTER>
  {
    pTypeSet.add(PluginType.MasterExt);
  }
}

void
PluginTypeQueueExt() :
{}
{
  <PLUGIN_TYPE_QUEUE>
  {
    pTypeSet.add(PluginType.QueueExt);
  }
}

void
PluginTypeTool() :
{}
{
  <PLUGIN_TYPE_TOOL>
  {
    pTypeSet.add(PluginType.Tool);
  }
}

void
External() :
{}
{
  <EXTERNAL> AE() 
  { 
    pExternal = true;
  }
}

void
Rename() :
{}
{
  <RENAME> AE() 
  { 
    pRename = true;
  }
}


void
DryRun() :
{}
{
  <DRYRUN> AE()
  {
    pDryRun = true;
  }
}

void PluginFile() : 
{
  Token t; 
}
{
  (t=<PLUGIN_FILE>) 
  {
    File file = new File(t.image);
    if(!file.isFile()) 
      throw new ParseException
	("The given plugin file (" + file + ") does not exist!");

    pPluginFiles.add(file);
  }
}


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts() :
{}
{
  (Log() | LogFile() | StandardLogFile() | LogBackups())
  {}
}


void LogFile() : 
{
  Token t;
}
{
  <LOG_FILE> EQ() t=<PATH_ARG>
  { 
    pLogFile = new Path(t.image);
  }
}

void StandardLogFile() : 
{}
{
  <STANDARD_LOG_FILE>
  { 
    pLogFile = new Path(PackageInfo.sInstPath, "/logs/plplugin.log");
  }
}

void LogBackups() : 
{
  Token t;
}
{
  <LOG_BACKUPS> EQ() t=<INTEGER>
  { 
    pLogBackups = Integer.parseInt(t.image);
  }
}

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}


void LoggerAll() : 
{
  LogMgr.Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevels(v);
  }
}

void LoggerPair() : 
{
  LogMgr.Kind k;
  LogMgr.Level v;
}
{
  (k=LogKind() <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevel(k, v);
  }
}

LogMgr.Kind LogKind() : 
{
  LogMgr.Kind g;
}
{
  (g=ArgKind() | g=OpsKind() | g=NetKind() | g=PlgKind())
  {
    return g;
  }
}

LogMgr.Kind ArgKind() : 
{}
{
  <LOG_ARG>
  {
    return LogMgr.Kind.Arg;
  }
}

LogMgr.Kind OpsKind() : 
{}
{
  <LOG_OPS>
  {
    return LogMgr.Kind.Ops;
  }
}

LogMgr.Kind NetKind() : 
{}
{
  <LOG_NET>
  {
    return LogMgr.Kind.Net;
  }
}

LogMgr.Kind PlgKind() : 
{}
{
  <LOG_PLG>
  {
    return LogMgr.Kind.Plg;
  }
}



LogMgr.Level LogLevel() : 
{
  LogMgr.Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

LogMgr.Level SevereLevel() :
{
  LogMgr.Level v;
}
{
  <SEVERE> 
  {
    return LogMgr.Level.Severe;
  }
}

LogMgr.Level WarningLevel() :
{
  LogMgr.Level v;
}
{
  <WARNING> 
  {
    return LogMgr.Level.Warning;
  }
}

LogMgr.Level InfoLevel() :
{
  LogMgr.Level v;
}
{
  <INFO> 
  {
    return LogMgr.Level.Info;
  }
}

LogMgr.Level FineLevel() :
{
  LogMgr.Level v;
}
{
  <FINE> 
  {
    return LogMgr.Level.Fine;
  }
}

LogMgr.Level FinerLevel() :
{
  LogMgr.Level v;
}
{
  <FINER> 
  {
    return LogMgr.Level.Finer;
  }
}

LogMgr.Level FinestLevel() :
{
  LogMgr.Level v;
}
{
  <FINEST> 
  {
    return LogMgr.Level.Finest;
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2> | t=<AE3> | 
   t=<AE4> | t=<AE5> | t=<AE6> | t=<AE7> | t=<AE8>)
  { 
    return t; 
  }
}


Token
COMMA() :
{
  Token t;
}
{
  (t=<COMMA1> | t=<COMMA2> | t=<COMMA3> | t=<COMMA4> | t=<COMMA5>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | 
   t=<EQ4> | t=<EQ5> | t=<EQ6> | t=<EQ7> | t=<EQ8> | t=<EQ9>)  
  { 
    return t; 
  }
}
