options {
  STATIC = false;
}

PARSER_BEGIN(BatchParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;
import us.temerity.pipeline.ui.*;

import java.util.*;
import java.text.*;
import java.io.*;
import java.util.logging.*;
import javax.swing.*;        

/*------------------------------------------------------------------------------------------*/
/*   B A T C H   P A R S E R                                                                */
/*                                                                                          */
/*    The parser of command-line batch files.                                               */
/*------------------------------------------------------------------------------------------*/

class 
BatchParser
{
  private ArrayList     pLines; 
  private StringBuffer  pBuf; 
}


PARSER_END(BatchParser)

<DEFAULT> 
TOKEN :
{       
  <OPEN_QUOTE:       "'">                      : QUOTED_STATE 
| <NEWLINE:          (([" ","\t"]) | ("\\" "\n"))* "\n">
| <WS:               (([" ","\t"])+ (([" ","\t"]) | ("\\" "\n"))*) | 
	             ((([" ","\t"]) | ("\\" "\n"))* ([" ","\t"])+)>
| <ANY:              (~["\n","'"," ","\t"])+>
} 

<QUOTED_STATE> 
TOKEN :
{
  <QUOTED:         (~["'"])+>  
| <CLOSE_QUOTE:    "'">                        : DEFAULT
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

ArrayList
Contents() :
{
  pLines = new ArrayList();
}
{
  (Line())+ 
  { 
    return pLines;
  }	
}

void
Line() :
{}
{
  (<WS>)? (Command() | <NEWLINE>)
  {}  
}

void
Command() : 
{
  pBuf = new StringBuffer();
}
{
  Argument() (<WS> Argument())* NewLine()
  {}
}

void
Argument() : 
{}
{
  (Any() | Quoted())+ 
  {
    pBuf.append('\0');
  }
}

void
Any() : 
{
  Token t;
} 
{
  t=<ANY>
  {
    pBuf.append(t.image);
  }
}

void
Quoted() : 
{
  Token t;
} 
{
  <OPEN_QUOTE> t=<QUOTED> <CLOSE_QUOTE> 
  {
    pBuf.append(t.image);
  }
}

void 
NewLine() : 
{}
{
  (<NEWLINE> | <EOF>)
  {
    if(pBuf.length() > 0) 
      pLines.add(pBuf.toString());
    pBuf = new StringBuffer();
  }
}
