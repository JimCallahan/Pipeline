// $Id: VerifiedApp.java.in,v 1.14 2009/07/06 10:25:27 jim Exp $

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;
import us.temerity.pipeline.apps.*;

import java.io.*; 
import java.net.*; 
import java.util.*;
import java.text.*;
import java.math.*;
import java.security.*;

/*------------------------------------------------------------------------------------------*/
/*   V E R I F I E D   A P P                                                                */
/*------------------------------------------------------------------------------------------*/

/**
 * The common base class for application which must verify the host ID of the machine
 * running the class.
 */
abstract
class VerifiedApp
  extends BaseApp
{  
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Construct and the application with the given command-line arguments.
   * 
   * @param name 
   *   The name of the application executable.
   */
  public
  VerifiedApp
  (
   String name
  ) 
  {
    super(name);

    TreeMap<String,BigInteger> IDs = null;
    try {
      IDs = generateIDs();
    }
    catch(IOException ex) {
      LogMgr.getInstance().log
	(LogMgr.Kind.Net, LogMgr.Level.Severe,
	 ex.getMessage());
      System.exit(1);
    }

    /* verify the hostID for this machine */ 
    {
      assert(!IDs.isEmpty());
      assert(sHostNames.length == sHostIDs.length);

      boolean verified = false;
      int wk;
      for(wk=0; wk<sHostNames.length; wk++) {
	BigInteger id = IDs.get(sHostNames[wk]);
	if(id != null) {
	  BigInteger big = new BigInteger(sHostIDs[wk]);
	  if(big.equals(id)) {
	    verified = true; 
	    break;
	  }
	}
      }
      
      if(!verified) {
	LogMgr.getInstance().log
	  (LogMgr.Kind.Net, LogMgr.Level.Severe,
	   "Pipeline is not licensed for this machine!");

	System.exit(1);
      }
    }

    /* check the license time window (unless the license is Perpetual) */ 
    if(!isLicenseValid()) 
      System.exit(1);
  }



  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Check if the license is still valid.
   */ 
  public boolean
  isLicenseValid() 
  {
    /* check the license time window (unless the license is Perpetual) */ 
    if(sLicenseEnd < Long.MAX_VALUE) {
      try {
	if(!TimeService.isValid(sLicenseStart, sLicenseEnd)) {
	  SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd"); 
	  LogMgr.getInstance().log
	    (LogMgr.Kind.Ops, LogMgr.Level.Severe,  
	     "The current site license is only valid until: " + 
             PackageInfo.sLicenseEnd + "\n" + 
	     "Please contact <support@temerity.us> to renew your license.");
	  
	  return false; 
	}
      }
      catch(IOException ex) {
	LogMgr.getInstance().log
	  (LogMgr.Kind.Ops, LogMgr.Level.Severe,  
	   "Unable to reliably determine the time!\n" +
	   "Pipeline was unable to contact any well known Network Time Servers via the " +
	   "Internet in order to determine whether the current license has expired.\n" + 
	   "Contact your system administrator to verify that your connection to the " + 
	   "Internet is functioning properly and that NTP packets are not being " + 
	   "filtered by your firewall.");
	
	return false;
      }      
    }

    return true; 
  }

  /**
   * Log a warning message about when the licenses will expire.
   * 
   * @return 
   *   The time interval (in msec) until the next message should be issued or 
   *   <CODE>null</CODE> if its a Perpetual license.
   */ 
  public Long
  warnLicenseExpiration() 
  {
    if(sLicenseEnd < Long.MAX_VALUE) {
      try {
        long aMinute = 60000L;
        long anHour  = 60L * aMinute; 
        long aDay    = 24L * anHour; 
        long aWeek   = 7L * aDay;
        long aMonth  = 4L * aWeek;
        
        long now = TimeService.getTime(); 
        long timeLeft = sLicenseEnd - now;
        
        String extra = "";
        if(timeLeft < aMonth) {
          String until = "";
          if(timeLeft < (2L * aDay)) {
            long t = timeLeft;
            long d = t / aDay; 
            t -= d * aDay; 
            long h = t / anHour; 
            t -= h * anHour;
            long m = t / aMinute; 

            until = ("\n  The server will shutdown in less than "); 
            if(d > 0) 
              until += d + "-days."; 
            else if(h > 0) 
              until += h + "-hours.";
            else if(m > 0) 
              until += m + "-min.";
          }

          extra = (until + 
                   "\n  Please contact <support@temerity.us> to renew your license.");
        }

        LogMgr.getInstance().log
          (LogMgr.Kind.Ops, LogMgr.Level.Warning,  
           "****************************************************************************\n" + 
           "  The current site license expires on: " + PackageInfo.sLicenseEnd + 
           extra + "\n" +
           "****************************************************************************"); 
        
        if(timeLeft < (2L * aDay))
          return Math.min(timeLeft, anHour);
        else if(timeLeft < (2L * aWeek)) 
          return aDay; 
        else if(timeLeft < (2L * aMonth)) 
          return aWeek;
        else 
          return aMonth; 
      }
      catch(IOException ex) {
        /* if we can't determine the time, force an immediate license recheck */ 
        return 0L;
      }
    }
    else {
      return null;
    }
  }

  /**
   * Generate the hardware IDs for the local machine.
   */
  private TreeMap<String,BigInteger>
  generateIDs() 
    throws IOException 
  {
    /* the name of this host */ 
    String hostname = null;
    try {
      InetAddress addr = InetAddress.getLocalHost();
      if((addr instanceof Inet4Address) && !addr.isLoopbackAddress()) 
        hostname = addr.getCanonicalHostName().toLowerCase(Locale.ENGLISH);
    }
    catch(Exception ex) {
      throw new IOException 
	("Could not determine the name of this machine!");
    }

    if(hostname == null) 
      throw new IOException 
        ("Could not determine the name of this machine!");

    /* determine the hardware IDs */ 
    TreeMap<String,BigInteger> IDs = new TreeMap<String,BigInteger>();
    try {
      MessageDigest md = MessageDigest.getInstance("MD5");

      /* get OS release/version info */ 
      {
	StringBuffer buf = new StringBuffer();

	FileReader in = new FileReader("/proc/version");
        try {
          char[] cs = new char[4096];
          while(true) {
            int cnt = in.read(cs);
            if(cnt == -1) 
              break;
            
            buf.append(cs);
          }
        }
        finally {
          in.close();
        }

        md.update(buf.toString().getBytes());
      }

      /* get the CPU info */ 
      {
	FileReader in = new FileReader("/proc/cpuinfo");
        try {
          StringBuffer buf = new StringBuffer();
          char[] cs = new char[4096];
          while(true) {
            int cnt = in.read(cs);
            if(cnt == -1) 
              break;
            
            int wk;
            for(wk=0; wk<cnt; wk++) {
              if(cs[wk] == '\n') {
                String line = buf.toString();
                if(!line.startsWith("cpu MHz") && 
                   !line.startsWith("bogomips") &&
                   !line.startsWith("core id")) 
                  md.update(line.getBytes());
                buf = new StringBuffer();
              }
              else {
                buf.append(cs[wk]);
              }
            }
          }
        }
        finally {
          in.close();
        }
      }

      BigInteger hardwareID = new BigInteger(md.digest());
      IDs.put(hostname, hardwareID);
    }
    catch(Exception ex) {
      throw new IOException
        (Exceptions.getFullMessage("Unable to determine local host ID.", ex));
    }      

    return IDs;
  }



  /*----------------------------------------------------------------------------------------*/
  /*   S T A T I C   I N T E R N A L S                                                      */
  /*----------------------------------------------------------------------------------------*/

  private static final String[] sHostNames = {
    @PIPELINE_HOST_NAMES@
  };

  private static final String[] sHostIDs = {
    @PIPELINE_HOST_IDS@
  };

  private static final long sLicenseStart = @LICENSE_START_STAMP@L;
  private static final long sLicenseEnd   = @LICENSE_END_STAMP@L;
  
}
