options {
  STATIC = false;
}

PARSER_BEGIN(GraphicalOptsParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;
import us.temerity.pipeline.ui.core.*;

import java.util.*;
import java.text.*;
import java.io.*;
import java.util.logging.*;
import javax.swing.*;        

/*------------------------------------------------------------------------------------------*/
/*   G R A P H I C A L   O P T S   P A R S E R                                              */
/*                                                                                          */
/*    The parser for the plui(1) graphical client program.                                  */
/*------------------------------------------------------------------------------------------*/

public class 
GraphicalOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   GraphicalApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  private void 
  init()
  {
    pLogBackups = 10;

    pMasterServer = PackageInfo.sMasterServer;
    pMasterPort   = PackageInfo.sMasterPort;

    pQueueServer = PackageInfo.sQueueServer; 
    pQueuePort   = PackageInfo.sQueuePort;
    pJobPort     = PackageInfo.sJobPort;

    pRestoreLayout     = true;
    pRestoreSelections = true;
  }
 

  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private GraphicalApp  pApp;


  
  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the log file.
   */ 
  private String  pLogFile; 

  /**
   * The number of backup to maintain of the log file.
   */ 
  private int  pLogBackups;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the host running the <B>plmaster</B><A>(1) daemon.
   */ 
  private String  pMasterServer;

  /**
   * The network port listened to by the <B>plmaster</B><A>(1) daemon.
   */
  private int  pMasterPort;


  /*----------------------------------------------------------------------------------------*/

  /*
   * The name of the host running the <B>plqueuemgr</B><A>(1) daemon. 
   */
  private String  pQueueServer;

  /**
   * The network port listened to by the <B>plqueuemgr</B><A>(1) daemon.
   */
  private int  pQueuePort;

  /**
   * The network port listened to by the <B>pljobmgr</B><A>(1) daemons.
   */
  private int  pJobPort;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the override panel layout or <CODE>null</CODE> to use the default layout.
   */ 
  private String  pLayout;

  /** 
   * Whether to restore the panel layout.
   */
  private boolean  pRestoreLayout;

  /**
   * Whether the restored layout should include node and/or job group selections.
   */ 
  private boolean  pRestoreSelections; 

}


PARSER_END(GraphicalOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */	
| <MASTER_HOST:  "--master-host">   : HOSTNAME_SEP
| <MASTER_PORT:  "--master-port">   : INTEGER_SEP

| <QUEUE_HOST:   "--queue-host">    : HOSTNAME_SEP
| <QUEUE_PORT:   "--queue-port">    : INTEGER_SEP
| <JOB_PORT:     "--job-port">      : INTEGER_SEP 

| <LOG_FILE:          "--log-file">           : PATH_SEP
| <STANDARD_LOG_FILE: "--standard-log-file"> 
| <LOG_BACKUPS:       "--log-backups">        : INTEGER_SEP
| <LOG:               "--log">                : LOG_SEP

| <LAYOUT:         "--layout">        : LAYOUT_SEP
| <NO_LAYOUT:      "--no-layout">     
| <NO_SELECTIONS:  "--no-selections">     


  /* seperators */ 
| <AE1: (["\0"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: ["\0"]>          : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>      : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}


/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ3:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9","-"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9","-"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: ["\0"]>                                      : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~["\0"])+>                                  : IGNORE_STATE
}


/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ4:               "=">   : LOG_STATE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_STATE> 
TOKEN :
{
  <LOG_ALL:         "all">       
| <LOG_ARG: 	    "arg">        
| <LOG_OPS: 	    "ops">     
| <LOG_NET: 	    "net">      
| <LOG_PLG: 	    "plg">       
| <LOG_SUB: 	    "sub">       
| <LOG_TEX: 	    "tex">     
| <COLON:  	    ":">       
| <SEVERE:  	    "severe">  
| <WARNING: 	    "warning"> 
| <INFO:    	    "info">    
| <FINE:    	    "fine">    
| <FINER :  	    "finer">   
| <FINEST:    	    "finest">  
| <COMMA:  	    ",">       
| <AE2:             (["\0"])+>                   : DEFAULT
| <ILLEGAL_LOG_ARG: (~["\0","a"-"z",":",","])+>  : IGNORE_STATE
}


/* layout name arguments */ 
<LAYOUT_SEP> 
TOKEN :
{
  <EQ5:                "=">     : LAYOUT_STATE
| <MISSING_LAYOUT_ARG: ~["="]>  : IGNORE_STATE
}

<LAYOUT_STATE> 
TOKEN :
{
  <LAYOUT_NAME:      ("/" (["a"-"z","A"-"Z","0"-"9","-","_"])+)* 
		       ("/" ["a"-"z","A"-"Z"] 
		            (["a"-"z","A"-"Z","0"-"9","_","-"])*)+>  : DEFAULT
| <MISSING_LAYOUT:   ["\0"]>                                         : IGNORE_STATE
| <ILLEGAL_LAYOUT:   (~["\0"])+>                                     : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine() :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() :
{
  init();
}
{
  (GlobalOpts() AE())*
  {
    /* setup the log files */ 
    if(pLogFile != null) {
      try {
	Logs.fileHandler(pLogFile, pLogBackups);
      }
      catch(Exception ex) {
	System.out.print("Unable to setup log file: " + ex.getMessage());
	System.exit(1);
      }
    }

    /* initialize the plugins */
    try {
      PluginMgr.init();
    }
    catch(PipelineException ex) {
      Logs.plg.severe("Unable to load plugins: " + ex);
      System.exit(1);
    }

    /* start the application */ 
    UIMaster.init(pMasterServer, pMasterPort, 
		  pQueueServer, pQueuePort, pJobPort, 
		  pLayout, pRestoreLayout, pRestoreSelections);
  }
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts() :
{}
{
  (MasterHost() | MasterPort() | 
   QueueHost() | QueuePort() | JobPort() | 
   Log() | LogFile() | StandardLogFile() | LogBackups() |
   Layout() | NoLayout() | NoSelections())
  {}
}


void
MasterHost() :
{
  Token t;
}
{
  <MASTER_HOST> EQ() t=<HOSTNAME>
  { 
    pMasterServer = t.image;
  }
}

void
MasterPort() :
{
  Token t;
}
{
  <MASTER_PORT> EQ() t=<INTEGER>
  { 
    pMasterPort = Integer.parseInt(t.image);
  }
}

void
QueueHost() :
{
  Token t;
}
{
  <QUEUE_HOST> EQ() t=<HOSTNAME>
  { 
    pQueueServer = t.image;
  }
}

void
QueuePort() :
{
  Token t;
}
{
  <QUEUE_PORT> EQ() t=<INTEGER>
  { 
    pQueuePort = Integer.parseInt(t.image);
  }
}

void
JobPort() :
{
  Token t;
}
{
  <JOB_PORT> EQ() t=<INTEGER>
  { 
    pJobPort = Integer.parseInt(t.image);
  }
}



void LogFile() : 
{
  Token t;
}
{
  <LOG_FILE> EQ() t=<PATH_ARG>
  { 
    pLogFile = t.image;
  }
}

void StandardLogFile() : 
{}
{
  <STANDARD_LOG_FILE>
  { 
    pLogFile = (PackageInfo.sHomeDir + "/" + PackageInfo.sUser + "/plui.log");
  }
}

void LogBackups() : 
{
  Token t;
}
{
  <LOG_BACKUPS> EQ() t=<INTEGER>
  { 
    pLogBackups = Integer.parseInt(t.image);
  }
}

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}

void LoggerAll() : 
{
  Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    Logs.arg.setLevel(v); 
    Logs.ops.setLevel(v);
    Logs.net.setLevel(v);
    Logs.plg.setLevel(v);
    Logs.sub.setLevel(v);
    Logs.tex.setLevel(v);
  }
}

void LoggerPair() : 
{
  Logger g; 
  Level v;
}
{
  (g=Logger() <COLON> v=LogLevel())
  {
    g.setLevel(v);
  }
}

Logger Logger() :
{
  Logger g;
}
{
  (g=ArgLogger() | g=OpsLogger() | g=NetLogger() | 
   g=PlgLogger() | g=SubLogger() | g=TexLogger())
  {
    return g;
  }
}

Logger ArgLogger() : 
{}
{
  <LOG_ARG>
  {
    return Logs.arg;
  }
}

Logger OpsLogger() : 
{}
{
  <LOG_OPS>
  {
    return Logs.ops;
  }
}

Logger NetLogger() : 
{}
{
  <LOG_NET>
  {
    return Logs.net;
  }
}

Logger PlgLogger() : 
{}
{
  <LOG_PLG>
  {
    return Logs.plg;
  }
}

Logger SubLogger() : 
{}
{
  <LOG_SUB>
  {
    return Logs.sub;
  }
}

Logger TexLogger() : 
{}
{
  <LOG_TEX>
  {
    return Logs.tex;
  }
}


Level LogLevel() : 
{
  Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

Level SevereLevel() :
{
  Level v;
}
{
  <SEVERE> 
  {
    return Level.SEVERE;
  }
}

Level WarningLevel() :
{
  Level v;
}
{
  <WARNING> 
  {
    return Level.WARNING;
  }
}

Level InfoLevel() :
{
  Level v;
}
{
  <INFO> 
  {
    return Level.INFO;
  }
}

Level FineLevel() :
{
  Level v;
}
{
  <FINE> 
  {
    return Level.FINE;
  }
}

Level FinerLevel() :
{
  Level v;
}
{
  <FINER> 
  {
    return Level.FINER;
  }
}

Level FinestLevel() :
{
  Level v;
}
{
  <FINEST> 
  {
    return Level.FINEST;
  }
}


void Layout() : 
{
  Token t;
}
{
  <LAYOUT> EQ() t=<LAYOUT_NAME>
  {
    pLayout = t.image;
  }
}

void NoLayout() : 
{}
{
  <NO_LAYOUT> 
  {
    pRestoreLayout = false;
  }
}

void NoSelections() : 
{}
{
  <NO_SELECTIONS> 
  {
    pRestoreSelections = false;
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2>)
  { 
    return t; 
  }
}

Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4> | t=<EQ5>)
  { 
    return t; 
  }
}
