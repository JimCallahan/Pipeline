options {
  STATIC = false;
}

PARSER_BEGIN(ScriptOptsParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;
import us.temerity.pipeline.ui.*;

import java.util.*;
import java.text.*;
import java.io.*;
import java.util.logging.*;
import javax.swing.*;        

/*------------------------------------------------------------------------------------------*/
/*   S C R I P T   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plscript(1) tool.                                                  */
/*------------------------------------------------------------------------------------------*/

public class 
ScriptOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   ScriptApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N I T I A L I Z A T I O N                                                          */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Initialize the parser.
   */
  private void 
  init()
  {
    pMasterServer = PackageInfo.sMasterServer;
    pMasterPort   = PackageInfo.sMasterPort;

    pQueueServer = PackageInfo.sQueueServer; 
    pQueuePort   = PackageInfo.sQueuePort;
    pJobPort     = PackageInfo.sJobPort;

    pBatchFiles = new Stack();
  }
 
  /**
   * Initialize the parser from a parent parser.
   */ 
  public void 
  init
  (
   ScriptOptsParser parent
  ) 
  {
    pApp = parent.pApp;

    pMasterServer    = parent.pMasterServer;
    pMasterPort      = parent.pMasterPort;
    pMasterMgrClient = parent.pMasterMgrClient;

    pQueueServer    = parent.pQueueServer;
    pQueuePort      = parent.pQueuePort;
    pJobPort        = parent.pJobPort;
    pQueueMgrClient = parent.pQueueMgrClient;

    pBatchFiles = new Stack(); 
    pBatchFiles.addAll(parent.pBatchFiles);
  }


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private ScriptApp  pApp;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the host running the <B>plmaster</B><A>(1) daemon.
   */ 
  private String  pMasterServer;

  /**
   * The network port listened to by the <B>plmaster</B><A>(1) daemon.
   */
  private int  pMasterPort;

  /**
   * The connection to the <B>plmaster</B><A>(1) daemon. 
   */ 
  private MasterMgrClient  pMasterMgrClient; 


  /*----------------------------------------------------------------------------------------*/

  /*
   * The name of the host running the <B>plqueuemgr</B><A>(1) daemon. 
   */
  private String  pQueueServer;

  /**
   * The network port listened to by the <B>plqueuemgr</B><A>(1) daemon.
   */
  private int  pQueuePort;

  /**
   * The network port listened to by the <B>pljobmgr</B><A>(1) daemons.
   */
  private int  pJobPort;

  /**
   * The connection to the <B>plqueuemgr</B><A>(1) daemon. 
   */ 
  private QueueMgrClient  pQueueMgrClient; 



  /*----------------------------------------------------------------------------------------*/

  /**
   * The stack of currently open batch files.
   */ 
  private Stack pBatchFiles; 


  /*----------------------------------------------------------------------------------------*/

  /**
   * job-server command option temporaries
   */ 
  private QueueHost.Status  pJobStatus; 

  private String   pJobReserve;
  private boolean  pSetJobReserve;
  private Integer  pJobSlots;
  private TreeMap  pJobSelectionBiases;
  private TreeSet  pJobSelectionRemoves;

  
  /**
   * working node version command option temporaries
   */   
  private ArrayList  pFrames; 
  private ArrayList  pIndices; 
  private FileSeq    pFileSeq; 
  private Integer    pPadding; 
  private Boolean    pWait; 

  private String    pMsg; 
  private String    pAuthor; 
  private String    pView; 
  private TreeSet   pSections; 
  private String    pToolset;
  private String    pEditorName;
  private VersionID pEditorVersionID;

  private Boolean    pNoAction; 
  private String     pActionName;
  private VersionID  pActionVersionID; 
  private Boolean    pActionEnabled;
  private TreeMap    pParams;
  private TreeMap    pSourceParams;

  private OverflowPolicy   pOverflowPolicy;
  private ExecutionMethod  pExecutionMethod;
  private Integer          pBatchSize;
  private Integer          pPriority;
  private Float            pMaxLoad;
  private Long             pMinMemory;
  private Long             pMinDisk;
  private TreeMap          pLicenseKeys;
  private TreeMap          pSelectionKeys;

  private Boolean     pRemoveFiles;
  private Boolean     pRenameFiles;
  private String      pNewName; 
  private FrameRange  pFrameRange; 

  private String            pLinkSourceName;  
  private LinkPolicy        pLinkPolicy;      
  private LinkRelationship  pLinkRelationship;
  private Integer           pLinkFrameOffset; 
}


PARSER_END(ScriptOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION1:     "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */	
| <MASTER_HOST:  "--master-host">   : HOST_NAME_SEP
| <MASTER_PORT:  "--master-port">   : PORT_NUMBER_SEP

| <QUEUE_HOST:   "--queue-host">    : HOST_NAME_SEP
| <QUEUE_PORT:   "--queue-port">    : PORT_NUMBER_SEP
| <JOB_PORT:     "--job-port">      : PORT_NUMBER_SEP

| <LOG:          "--log">           : LOG_SEP

  /* batch */ 
| <BATCH:        "--batch">         : PATH_SEP
		   
  /* commands */ 
| <PRIVILEGED:        "privileged">       : PRIVILEGED_OPTS 
| <ADMIN:             "admin">            : OPTIONS
| <DEFAULT_TOOLSET:   "default-toolset">  : TOOLSET_OPTS 
| <ACTIVE_TOOLSET:    "active-toolset">   : TOOLSET_OPTS 
| <TOOLSET1:          "toolset">          : TOOLSET_OPTS 
| <LICENSE_KEY1:      "license-key">      : KEY_OPTS 
| <SELECTION_KEY1:    "selection-key">    : KEY_OPTS  
| <JOB_SERVER:        "job-server">       : JOB_SERVER_OPTS
| <SUFFIX_EDITOR:     "suffix-editor">    : SUFFIX_EDITOR_OPTS
| <VIEW1:             "view">             : VIEW_OPTS
| <WORKING:           "working">          : WORKING_OPTS
| <CHECKED_IN:        "checked-in">       : CHECKED_IN_OPTS
| <NODE:              "node">             : NODE_OPTS
| <JOB_GROUP:         "job-group">        : JOB_GROUP_OPTS
| <JOB:               "job">              : JOB_OPTS

  /* argument end separator */ 
| <AE1: ("\0")+>

  /* errors */ 
| <UNKNOWN_OPTION1:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND1: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


<OPTIONS> 
TOKEN :
{
  /* command options */ 
  <MSG:            "--msg">             : STRING_SEP  
| <TOTAL:          "--total">           : INTEGER_SEP  
| <SHUTDOWN:       "--shutdown">       
| <DISABLE:        "--disable">       
| <ENABLE:         "--enable">  
| <RESERVE:        "--reserve">         : USER_NAME_SEP            
| <OPEN:           "--open">  
| <SLOTS:          "--slots">           : INTEGER_SEP  
| <SELECTION_BIAS: "--selection-bias">  : KEY_BIAS_SEP  
| <REMOVE_KEY:     "--remove-key">      : KEY_NAME_SEP   
| <EDITOR:         "--editor">          : EDITOR_NAME_SEP 
| <VERSION2:       "--version">         : REVISION_NUMBER_SEP
| <AUTHOR:         "--author">          : USER_NAME_SEP 
| <VIEW2:          "--view">            : VIEW_NAME_SEP 
| <SHOW:           "--show">            : SECTION_SEP   
| <HIDE:           "--hide">            : SECTION_SEP   
| <TOOLSET2:       "--toolset">         : TOOLSET_NAME_SEP
| <NO_ACTION:      "--no-action">       
| <ACTION1:        "--action">          : ACTION_NAME_SEP
| <ACTION_ENABLED: "--action-enabled">  : BOOLEAN_SEP
| <PARAM:          "--param">           : PARAM_SEP 
| <NO_PARAM:       "--no-param">        : LINK_PARAM_SEP 
| <SOURCE_PARAM:   "--source-param">    : SOURCE_PARAM_SEP 
| <IGNORE:         "--ignore">           
| <ABORT:          "--abort">           
| <SERIAL:         "--serial">           
| <PARALLEL:       "--parallel">           
| <BATCH_SIZE:     "--batch-size">      : INTEGER_SEP
| <PRIORITY:       "--priority">        : INTEGER_SEP
| <MAX_LOAD:       "--max-load">        : REAL_SEP     
| <MIN_MEMORY:     "--min-memory">      : BYTE_SIZE_SEP
| <MIN_DISK:       "--min-disk">        : BYTE_SIZE_SEP
| <LICENSE_KEY2:   "--license-key">     : KEY_TOGGLE_SEP
| <SELECTION_KEY2: "--selection-key">   : KEY_TOGGLE_SEP
| <ASSOC:          "--assoc">           : LINK_PARAM_SEP
| <REF:            "--ref">             : LINK_PARAM_SEP
| <DEPEND:         "--depend">          : LINK_PARAM_SEP
| <SOURCE:         "--source">          : LINK_PARAM_SEP
| <FSEQ:           "--fseq">            : FILE_SEQ_SEP
| <NAME:           "--name">            : NODE_NAME_SEP  
| <RENAME_FILES:   "--rename-files">   
| <REMOVE_FILES:   "--remove-files">    
| <RANGE:          "--range">           : FRAME_RANGE_SEP
| <FRAME:          "--frame">           : FRAME_NUMBERS_SEP
| <INDEX:          "--index">           : FRAME_INDICES_SEP
| <WAIT:           "--wait">


  /* argument end separator */ 
| <AE2: ("\0")+>

  /* errors */ 
| <UNKNOWN_OPTION2:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND2: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* boolean arguments */ 
<BOOLEAN_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : BOOLEAN_STATE
| <MISSING_BOOLEAN_ARG: ~["="]>  : IGNORE_STATE
}

<BOOLEAN_STATE> 
TOKEN :
{
  <TRUE:            ["t","T"] ["r","R"] ["u","U"] ["e","E"]>            : OPTIONS
| <FALSE:           ["f","F"] ["a","A"] ["l","L"] ["s","S"] ["e","E"]>  : OPTIONS
| <MISSING_BOOLEAN: ["\0"]>                                             : IGNORE_STATE
| <ILLEGAL_BOOLEAN: (~["\0"])+>                                         : IGNORE_STATE
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ2:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : OPTIONS
| <MISSING_INTEGER: ["\0"]>          : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>      : IGNORE_STATE
}


/* port number arguments */ 
<PORT_NUMBER_SEP> 
TOKEN :
{
  <EQ3:                       "=">   : PORT_NUMBER_STATE
| <MISSING_PORT_NUMBER_ARG: ~["="]>  : IGNORE_STATE
}

<PORT_NUMBER_STATE> 
TOKEN :
{
  <PORT_NUMBER:         (["0"-"9"])+>    : OPTIONS
| <MISSING_PORT_NUMBER: ["\0"]>          : IGNORE_STATE
| <ILLEGAL_PORT_NUMBER: (~["\0"])+>      : IGNORE_STATE
}


/* byte size arguments */ 
<BYTE_SIZE_SEP> 
TOKEN :
{
  <EQ4:                     "=">   : BYTE_SIZE_STATE
| <MISSING_BYTE_SIZE_ARG: ~["="]>  : IGNORE_STATE
}

<BYTE_SIZE_STATE> 
TOKEN :
{
  <BYTE_SIZE:         (["0"-"9"])+>   
| <KILO:              ["k","K"]>                           : OPTIONS
| <MEGA:              ["m","M"]>                           : OPTIONS
| <GIGA:              ["g","G"]>                           : OPTIONS
| <AE3:               ["\0"]>                              : OPTIONS
| <ILLEGAL_BYTE_SIZE: (~["k","K","m","M","g","G","\0"])+>  : IGNORE_STATE
}


/* real arguments */ 
<REAL_SEP> 
TOKEN :
{
  <EQ5:                "=">   : REAL_STATE
| <MISSING_REAL_ARG: ~["="]>  : IGNORE_STATE
}

<REAL_STATE> 
TOKEN :
{
  <REAL:         ((["0"-"9"])+ "." (["0"-"9"])*) | 
		 ((["0"-"9"])* "." (["0"-"9"])+)>    : OPTIONS
| <MISSING_REAL: ["\0"]>                             : IGNORE_STATE
| <ILLEGAL_REAL: (~["\0"])+>                         : IGNORE_STATE
}


/* string arguments */   
<STRING_SEP> 
TOKEN :
{
  <EQ6:                  "=">   : STRING_STATE
| <MISSING_STRING_ARG: ~["="]>  : IGNORE_STATE
}

<STRING_STATE>
TOKEN :
{
  <STRING:         (~["\0"])*>  : OPTIONS
| <EMPTY_STRING:   "\0">        : OPTIONS
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ7:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : OPTIONS
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])+>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}


/* hostname arguments */ 
<HOST_NAME_SEP> 
TOKEN :
{
  <EQ8:                    "=">   : HOST_NAME_STATE
| <MISSING_HOST_NAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOST_NAME_STATE> 
TOKEN :
{
  <HOST_NAME:         ((["a"-"z","A"-"Z","0"-"9"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9"])+)*)>    : OPTIONS
| <MISSING_HOST_NAME: ["\0"]>                                  : IGNORE_STATE
| <ILLEGAL_HOST_NAME: (~["\0"])+>                              : IGNORE_STATE
}


/* node name arguments */ 
<NODE_NAME_SEP> 
TOKEN :
{
  <EQ9:                     "=">   : NODE_NAME_STATE
| <MISSING_NODE_NAME_ARG: ~["="]>  : IGNORE_STATE
}

<NODE_NAME_STATE> 
TOKEN :
{
  <NODE_NAME:           ("/" (["a"-"z","A"-"Z","0"-"9","-","_"])+)* 
			("/" ["a"-"z","A"-"Z"] 
		          (["a"-"z","A"-"Z","0"-"9","_","-"])*)+>  : OPTIONS
| <MISSING_NODE_NAME:   ["\0"]>                                    : IGNORE_STATE
| <ILLEGAL_NODE_NAME:   (~["\0"])+>                                : IGNORE_STATE
}


/* toolset name arguments */ 
<TOOLSET_NAME_SEP> 
TOKEN :
{
  <EQ10:                       "=">           : TOOLSET_NAME_STATE
| <MISSING_TOOLSET_NAME_ARG: ~["="]>  : IGNORE_STATE
}

<TOOLSET_NAME_STATE> 
TOKEN :
{
  <TOOLSET_NAME:           (["a"-"z","A"-"Z"]) 
		           (["a"-"z","A"-"Z","0"-"9","_","-"])*>  
| <AE4:                    ["\0"]>                                   : OPTIONS
| <ILLEGAL_TOOLSET_NAME:   (~["\0"])+>                               : IGNORE_STATE
}


/* user name arguments */ 
<USER_NAME_SEP> 
TOKEN :
{
  <EQ11:                    "=">   : USER_NAME_STATE
| <MISSING_USER_NAME_ARG: ~["="]>  : IGNORE_STATE
}

<USER_NAME_STATE> 
TOKEN :
{
  <USER_NAME:           (["a"-"z","A"-"Z"]) 
	   	          (["a"-"z","A"-"Z","0"-"9","_","-"])+>  
| <AE5:                 ["\0"]>                                   : OPTIONS
| <ILLEGAL_USER_NAME:   (~["\0"])+>                               : IGNORE_STATE
}


/* key name arguments */ 
<KEY_NAME_SEP> 
TOKEN :
{
  <EQ12:                   "=">   : KEY_NAME_STATE
| <MISSING_KEY_NAME_ARG: ~["="]>  : IGNORE_STATE
}

<KEY_NAME_STATE> 
TOKEN :
{
  <KEY_NAME1:          (["a"-"z","A"-"Z"]) 
		         (["a"-"z","A"-"Z","0"-"9","_","-"])+>  
| <AE6:                ["\0"]>                                   : OPTIONS
| <ILLEGAL_KEY_NAME:   (~["\0"])+>                               : IGNORE_STATE
}


/* key bias arguments */ 
<KEY_BIAS_SEP> 
TOKEN :
{
  <EQ13:                   "=">   : KEY_BIAS_STATE
| <MISSING_KEY_BIAS_ARG: ~["="]>  : IGNORE_STATE
}

<KEY_BIAS_STATE> 
TOKEN :
{
  <KEY_BIAS_NAME:      (["a"-"z","A"-"Z"]) 
		         (["a"-"z","A"-"Z","0"-"9","_","-"])+>  
| <COLON1:             ":">      
| <KEY_BIAS:           (["0"-"9"])+>                             : OPTIONS  
| <AE7:                ["\0"]>                                   : OPTIONS
| <ILLEGAL_KEY_BIAS:   (~[":","\0"])+>                           : IGNORE_STATE
}


/* key toggle arguments */ 
<KEY_TOGGLE_SEP> 
TOKEN :
{
  <EQ14:                     "=">   : KEY_TOGGLE_STATE
| <MISSING_KEY_TOGGLE_ARG: ~["="]>  : IGNORE_STATE
}

<KEY_TOGGLE_STATE> 
TOKEN :
{
  <KEY_NAME2:            (["a"-"z","A"-"Z"]) 
		          (["a"-"z","A"-"Z","0"-"9","_","-"])+>  
| <COLON2:               ":">                                      : BOOLEAN_STATE
| <AE8:                  ["\0"]>                                   : OPTIONS
| <ILLEGAL_KEY_TOGGLE:   (~[":","\0"])+>                           : IGNORE_STATE
}


/* filename suffix arguments */ 
<SUFFIX_SEP> 
TOKEN :
{
  <EQ15:                 "=">   : SUFFIX_STATE
| <MISSING_SUFFIX_ARG: ~["="]>  : IGNORE_STATE
}

<SUFFIX_STATE> 
TOKEN :
{
  <SUFFIX1:          (["a"-"z","A"-"Z","0"-"9"])+>  
| <AE9:              ["\0"]>                          : OPTIONS
| <ILLEGAL_SUFFIX:   (~["\0"])+>                      : IGNORE_STATE
}


/* editor arguments */ 
<EDITOR_NAME_SEP> 
TOKEN :
{
  <EQ16:                 "=">   : EDITOR_NAME_STATE
| <MISSING_EDITOR_ARG: ~["="]>  : IGNORE_STATE
}

<EDITOR_NAME_STATE> 
TOKEN :
{
  <EDITOR_NAME:      (["a"-"z","A"-"Z"]) 
	               (["a"-"z","A"-"Z","0"-"9","_","-"])+>   
| <COLON3:           ":">                                     : REVISION_NUMBER_STATE 
| <AE10:             ["\0"]>                                  : OPTIONS
| <ILLEGAL_EDITOR:   (~[":","\0"])+>                          : IGNORE_STATE
}


/* action arguments */ 
<ACTION_NAME_SEP> 
TOKEN :
{
  <EQ17:                 "=">   : ACTION_NAME_STATE
| <MISSING_ACTION_ARG: ~["="]>  : IGNORE_STATE
}

<ACTION_NAME_STATE> 
TOKEN :
{
  <ACTION_NAME:      (["a"-"z","A"-"Z"]) 
	               (["a"-"z","A"-"Z","0"-"9","_","-"])+>   
| <COLON4:           ":">                                     : REVISION_NUMBER_STATE
| <AE11:             ["\0"]>                                  : OPTIONS
| <ILLEGAL_ACTION:   (~[":","\0"])+>                          : IGNORE_STATE
}


/* revision number arguments */ 
<REVISION_NUMBER_SEP> 
TOKEN :
{
  <EQ18:                          "=">   : REVISION_NUMBER_STATE
| <MISSING_REVISION_NUMBER_ARG: ~["="]>  : IGNORE_STATE
}

<REVISION_NUMBER_STATE> 
TOKEN :
{
  <REVISION_NUMBER:            (<IREVNUM> "." <REVNUM> "." <REVNUM>)>  
| <#IREVNUM:                   ["1"-"9"] (["0"-"9"])*>
| <#REVNUM:                    (["0"-"9"])+>
| <AE12:                       ["\0"]>                       : OPTIONS
| <ILLEGAL_REVISION_NUMBER:    (~["\0"])+>                   : IGNORE_STATE
}


/* view name arguments */ 
<VIEW_NAME_SEP> 
TOKEN :
{
  <EQ19:               "=">     : VIEW_NAME_STATE
| <MISSING_VIEW_ARG: ~["="]>    : IGNORE_STATE
}

<VIEW_NAME_STATE> 
TOKEN :
{
  <VIEW_NAME:      (["a"-"z","A"-"Z"]) 
	             (["a"-"z","A"-"Z","0"-"9","_","-"])+>   
| <AE13:           ["\0"]>                                  : OPTIONS
| <ILLEGAL_VIEW:   (~["\0"])+>                              : IGNORE_STATE
}


/* param name arguments */ 
<PARAM_SEP> 
TOKEN :
{
  <EQ20:                "=">      : PARAM_STATE
| <MISSING_PARAM_ARG: ~["="]>    : IGNORE_STATE
}

<PARAM_STATE> 
TOKEN :
{
  <PARAM_NAME:      (["a"-"z","A"-"Z"]) 
	             (["a"-"z","A"-"Z","0"-"9","_","-"])+>   
| <COLON5:          ":">                                    : PARAM_VALUE_STATE
| <AE14:            ["\0"]>                                 : OPTIONS
| <ILLEGAL_PARAM:   (~[":","\0"])+>                         : IGNORE_STATE
}

<PARAM_VALUE_STATE> 
TOKEN :
{
  <PARAM_VALUE:         (~["\0"])*>  : OPTIONS
| <EMPTY_PARAM_VALUE:   "\0">        : OPTIONS
}


/* source param arguments */ 
<SOURCE_PARAM_SEP> 
TOKEN :
{
  <EQ21:                       "=">   : SOURCE_PARAM_STATE
| <MISSING_SOURCE_PARAM_ARG: ~["="]>  : IGNORE_STATE
}

<SOURCE_PARAM_STATE> 
TOKEN :
{
  <SOURCE_NAME:         ("/" (["a"-"z","A"-"Z","0"-"9","_","-"])+)* 
			("/" ["a"-"z","A"-"Z"] 
		          (["a"-"z","A"-"Z","0"-"9","_","-"])*)+> 
| <COMMA1:              ",">                                       : PARAM_STATE
| <ILLEGAL_SOURCE_NAME: (~[","])+>                                 : IGNORE_STATE
}


/* link param arguments */ 
<LINK_PARAM_SEP> 
TOKEN :
{
  <EQ22:                     "=">    : LINK_PARAM_STATE
| <MISSING_LINK_PARAM_ARG: ~["="]>  : IGNORE_STATE
}

<LINK_PARAM_STATE> 
TOKEN :
{
  <LINK_NAME:         ("/" (["a"-"z","A"-"Z","0"-"9","_","-"])+)* 
		      ("/" ["a"-"z","A"-"Z"] 
		        (["a"-"z","A"-"Z","0"-"9","_","-"])*)+> 
| <COMMA2:            ",">                                       : LINK_RELATION_STATE
| <AE15:              "\0">                                      : OPTIONS
| <ILLEGAL_LINK_NAME: (~[",","\0"])+>                            : IGNORE_STATE
}

<LINK_RELATION_STATE> 
TOKEN :
{
  <LINK_ALL:          ["a","A"] ["l","L"] ["l","L"]>  : OPTIONS
| <OFFSET:            (["0"-"9"])+>                   : OPTIONS
| <MISSING_RELATION:  ["\0"]>                         : IGNORE_STATE
| <ILLEGAL_RELATION:  (~["\0"])+>                     : IGNORE_STATE
}
  

/* file sequence arguments */ 
<FILE_SEQ_SEP> 
TOKEN :
{
  <EQ23:                   "=">   : FILE_SEQ_STATE
| <MISSING_FILE_SEQ_ARG: ~["="]>  : IGNORE_STATE
}

<FILE_SEQ_STATE> 
TOKEN :
{
  <PREFIX:            (["a"-"z","A"-"Z"] 
		        (["a"-"z","A"-"Z","0"-"9","_","-"])*)+>  
| <DOT1:              ".">                                       : FILE_SEQ_STATE2
| <COMMA3:            ",">                                       : FRAME_RANGE_STATE
| <AE16:              "\0">                                      : OPTIONS
| <ILLEGAL_FILE_SEQ:  (~[".",",","\0"])+>                        : IGNORE_STATE
}

<FILE_SEQ_STATE2> 
TOKEN :
{
  <SUFFIX2:           (["a"-"z","A"-"Z","0"-"9"])+>  
| <DOT2:              ".">                                       
| <AT:                "@"> 
| <POUND:             "#"> 
| <COMMA4:            ",">                          : FRAME_RANGE_STATE
| <AE17:              "\0">                         : OPTIONS
| <ILLEGAL_FILE_SEQ2: (~[".","@","#",",","\0"])+>   : IGNORE_STATE
}


/* frame range arguments */ 
<FRAME_RANGE_SEP> 
TOKEN :
{
  <EQ24:                      "=">   : FRAME_RANGE_STATE
| <MISSING_FRAME_RANGE_ARG: ~["="]>  : IGNORE_STATE
}

<FRAME_RANGE_STATE> 
TOKEN :
{
  <FRAME_NUMBER:         (["0"-"9"])+>   
| <DASH1:                "-"> 
| <BY:                   "x"> 
| <AE18:                 "\0">           : OPTIONS
| <ILLEGAL_FRAME_RANGE:  (~["-","x","\0"])+>     : IGNORE_STATE
}

  
/* frame numbers arguments */ 
<FRAME_NUMBERS_SEP> 
TOKEN :
{
  <EQ25:                        "=">   : FRAME_NUMBERS_STATE
| <MISSING_FRAME_NUMBERS_ARG: ~["="]>  : IGNORE_STATE
}

<FRAME_NUMBERS_STATE> 
TOKEN :
{
  <FRAME_NUMBER2:          (["0"-"9"])+>   
| <DASH2:                  "-"> 
| <COMMA5:                 ","> 
| <AE19:                   "\0">                  : OPTIONS
| <ILLEGAL_FRAME_NUMBERS:  (~["-",",","\0"])+>     : IGNORE_STATE
}
  

/* frame indices arguments */ 
<FRAME_INDICES_SEP> 
TOKEN :
{
  <EQ26:                        "=">   : FRAME_INDICES_STATE
| <MISSING_FRAME_INDICES_ARG: ~["="]>  : IGNORE_STATE
}

<FRAME_INDICES_STATE> 
TOKEN :
{
  <FRAME_INDEX:            (["0"-"9"])+>   
| <DASH3:                  "-"> 
| <COMMA6:                 ","> 
| <AE20:                   "\0">                  : OPTIONS
| <ILLEGAL_FRAME_INDICES:  (~["-",",","\0"])+>     : IGNORE_STATE
}
  

/* hide/show section arguments */ 
<SECTION_SEP> 
TOKEN :
{
  <EQ27:                  "=">   : SECTION_STATE
| <MISSING_SECTION_ARG: ~["="]>  : IGNORE_STATE
}

<SECTION_STATE> 
TOKEN :
{
  <ALL:              "all"> 
| <VSN:              "vsn"> 
| <PROP:             "prop"> 
| <ACT:              "act"> 
| <JREQ:             "jreq"> 
| <KEY:              "key"> 
| <LINK:             "link"> 
| <TIME:             "time"> 
| <PROC:             "proc"> 
| <WKDIR:            "wkdir"> 
| <CMD:              "cmd"> 
| <ENV:              "env"> 
| <OUT:              "out"> 
| <ERR:              "err"> 
| <FILE:             "file"> 
| <COMMA7:           ","> 
| <AE21:             "\0">               : OPTIONS
| <ILLEGAL_SECTION:  (~[",","\0"])+>     : IGNORE_STATE
}


/* job group arguments */ 
<JOB_GROUP_ID_SEP>  
TOKEN :
{
  <EQ28:                       "=">   : JOB_GROUP_ID_STATE
| <MISSING_JOB_GROUP_ID_ARG: ~["="]>  : IGNORE_STATE
}

<JOB_GROUP_ID_STATE> 
TOKEN :
{
  <JOB_GROUP_ID:          (["0"-"9"])+> 
| <COMMA8:                ","> 
| <AE22:                  "\0">             : OPTIONS
| <ILLEGAL_JOB_GROUP_ID:  (~[",","\0"])+>   : IGNORE_STATE
}

/* job arguments */ 
<JOB_ID_SEP>  
TOKEN :
{
  <EQ29:                       "=">   : JOB_ID_STATE
| <MISSING_JOB_ID_ARG: ~["="]>  : IGNORE_STATE
}

<JOB_ID_STATE> 
TOKEN :
{
  <JOB_ID:          (["0"-"9"])+> 
| <COMMA9:          ","> 
| <AE23:            "\0">             : OPTIONS
| <ILLEGAL_JOB_ID:  (~[",","\0"])+>   : IGNORE_STATE
}




/*------------------------------------------------------------------------------------------*/

/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ30:              "=">   : LOG_STATE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_STATE> 
TOKEN :
{
  <LOG_ALL:         "all">       
| <LOG_ARG: 	    "arg">        
| <LOG_OPS: 	    "ops">     
| <LOG_NET: 	    "net">      
| <LOG_PLG: 	    "plg">       
| <LOG_SUB: 	    "sub">     
| <COLON6:  	    ":">       
| <SEVERE:  	    "severe">  
| <WARNING: 	    "warning"> 
| <INFO:    	    "info">    
| <FINE:    	    "fine">    
| <FINER :  	    "finer">   
| <FINEST:    	    "finest">  
| <COMMA10: 	    ",">       
| <AE24:            (["\0"])+>                   : OPTIONS
| <ILLEGAL_LOG_ARG: (~["\0","a"-"z",":",","])+>  : IGNORE_STATE
}


/*------------------------------------------------------------------------------------------*/

/* privileged command options */ 
<PRIVILEGED_OPTS> 
TOKEN :
{
  <PRIVILEGED_GET:    "--get">                   : OPTIONS
| <PRIVILEGED_GRANT:  "--grant">                 : USER_NAME_SEP 
| <PRIVILEGED_REVOKE: "--revoke">                : USER_NAME_SEP 
| <AE25:              ["\0"]>  
| <UNKNOWN_OPTION3:   "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN3:          ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}


/* toolset command options */ 
<TOOLSET_OPTS> 
TOKEN :
{
  <TOOLSET_GET:           "--get">                   : OPTIONS
| <TOOLSET_GET_INFO:      "--get-info">              : TOOLSET_NAME_SEP  
| <TOOLSET_GET_INFO_ALL:  "--get-info-all">          : OPTIONS
| <TOOLSET_SET:           "--set">                   : TOOLSET_NAME_SEP  
| <TOOLSET_ADD:           "--add">                   : TOOLSET_NAME_SEP 
| <TOOLSET_REMOVE:        "--remove">                : TOOLSET_NAME_SEP 
| <TOOLSET_EXPORT:        "--export">                : TOOLSET_NAME_SEP
| <AE26:                  ["\0"]>            
| <UNKNOWN_OPTION4:       "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN4:              ~["-","\0"] (~["\0"])*>    : IGNORE_STATE          
}


/* key command options */ 
<KEY_OPTS> 
TOKEN :
{
  <KEY_GET:            "--get">                   : OPTIONS
| <KEY_GET_INFO:       "--get-info">              : KEY_NAME_SEP  
| <KEY_GET_INFO_ALL:   "--get-info-all">          : OPTIONS
| <KEY_ADD:            "--add">                   : KEY_NAME_SEP 
| <KEY_SET:            "--set">                   : KEY_NAME_SEP 
| <KEY_REMOVE:         "--remove">                : KEY_NAME_SEP 
| <AE27:               ["\0"]>    
| <UNKNOWN_OPTION5:    "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN5:           ~["-","\0"] (~["\0"])*>    : IGNORE_STATE           
}


/* job server command options */ 
<JOB_SERVER_OPTS> 
TOKEN :
{
  <JOB_GET:            "--get">                   : OPTIONS
| <JOB_GET_INFO:       "--get-info">              : HOST_NAME_SEP  
| <JOB_GET_INFO_ALL:   "--get-info-all">          : OPTIONS
| <JOB_SET:            "--set">                   : HOST_NAME_SEP 
| <JOB_ADD:            "--add">                   : HOST_NAME_SEP 
| <JOB_REMOVE:         "--remove">                : HOST_NAME_SEP
| <AE28:               ["\0"]>   
| <UNKNOWN_OPTION6:    "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN6:           ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}


/* job server command options */ 
<SUFFIX_EDITOR_OPTS> 
TOKEN :
{
  <SUFFIX_EDITOR_GET:            "--get">                   : OPTIONS
| <SUFFIX_EDITOR_GET_INFO:       "--get-info">              : SUFFIX_SEP  
| <SUFFIX_EDITOR_GET_INFO_ALL:   "--get-info-all">          : OPTIONS
| <SUFFIX_EDITOR_SET:            "--set">                   : SUFFIX_SEP 
| <SUFFIX_EDITOR_REMOVE:         "--remove">                : SUFFIX_SEP
| <SUFFIX_EDITOR_RESET:          "--reset">                 : OPTIONS
| <AE29:                         ["\0"]>   
| <UNKNOWN_OPTION7:              "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN7:                     ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}


/* view command options */ 
<VIEW_OPTS> 
TOKEN :
{
  <VIEW_GET:            "--get">                   : OPTIONS
| <VIEW_CREATE:         "--create">                : VIEW_NAME_SEP
| <AE30:                ["\0"]>   
| <UNKNOWN_OPTION8:     "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN8:            ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}


/* working command options */ 
<WORKING_OPTS> 
TOKEN :
{
  <WORKING_GET_INFO:          "--get-info">              : NODE_NAME_SEP
| <WORKING_REGISTER:          "--register">              : NODE_NAME_SEP
| <WORKING_RELEASE:           "--release">               : NODE_NAME_SEP
| <WORKING_SET:               "--set">                   : NODE_NAME_SEP
| <WORKING_LINK:              "--link">                  : NODE_NAME_SEP
| <WORKING_UNLINK:            "--unlink">                : NODE_NAME_SEP
| <WORKING_ADD_SECONDARY:     "--add-secondary">         : NODE_NAME_SEP
| <WORKING_REMOVE_SECONDARY:  "--remove-secondary">      : NODE_NAME_SEP
| <WORKING_RENAME:            "--rename">                : NODE_NAME_SEP
| <WORKING_RENUMBER:          "--renumber">              : NODE_NAME_SEP
| <WORKING_EDIT:              "--edit">                  : NODE_NAME_SEP
| <WORKING_SUBMIT_JOBS:       "--submit-jobs">           : NODE_NAME_SEP
| <WORKING_REMOVE_FILES:      "--remove-files">          : NODE_NAME_SEP
| <AE31:                      ["\0"]>   
| <UNKNOWN_OPTION9:           "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN9:                  ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}

/* checked-in command options */ 
<CHECKED_IN_OPTS> 
TOKEN :
{
  <CHECKED_IN_GET_INFO:       "--get-info">              : NODE_NAME_SEP
| <CHECKED_IN_HISTORY:        "--history">               : NODE_NAME_SEP
| <CHECKED_IN_NOVELTY:        "--novelty">               : NODE_NAME_SEP
| <AE32:                      ["\0"]>   
| <UNKNOWN_OPTION10:          "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN10:                 ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}

/* node command options */ 
<NODE_OPTS> 
TOKEN :
{
  <NODE_STATUS:            "--status">                : NODE_NAME_SEP
| <NODE_CHECK_IN:          "--check-in">              : NODE_NAME_SEP
| <NODE_CHECK_OUT:         "--check-out">             : NODE_NAME_SEP
| <AE33:                   ["\0"]>   
| <UNKNOWN_OPTION11:       "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN11:              ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}

/* job group command options */ 
<JOB_GROUP_OPTS> 
TOKEN :
{
  <JOB_GROUP_STATUS:       "--status">                : JOB_GROUP_ID_SEP
| <JOB_GROUP_KILL:         "--kill">                  : JOB_GROUP_ID_SEP
| <JOB_GROUP_PAUSE:        "--pause">                 : JOB_GROUP_ID_SEP
| <JOB_GROUP_RESUME:       "--resume">                : JOB_GROUP_ID_SEP
| <JOB_GROUP_REMOVE:       "--remove">                : JOB_GROUP_ID_SEP
| <JOB_GROUP_REMOVE_ALL:   "--remove-all">            : OPTIONS
| <AE34:                   ["\0"]>   
| <UNKNOWN_OPTION12:       "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN12:              ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}

/* job command options */ 
<JOB_OPTS> 
TOKEN :
{
  <JOB_STATUS:         "--status">                : JOB_ID_SEP
| <JOB_KILL:           "--kill">                  : JOB_ID_SEP
| <JOB_PAUSE:          "--pause">                 : JOB_ID_SEP
| <JOB_RESUME:         "--resume">                : JOB_ID_SEP
| <AE35:               ["\0"]>   
| <UNKNOWN_OPTION13:   "-" ("-")? (~["\0","="])*> : IGNORE_STATE
| <UNKNOWN13:          ~["-","\0"] (~["\0"])*>    : IGNORE_STATE         
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine() 
  throws PipelineException :
{
  init();
}
{
  (InformationOpts() | ((GlobalOpts() AE())* (Batch() | Commands()))) <EOF>
  {}
}


void 
Commands() 
  throws PipelineException :
{
  try {
    PluginMgr.init();
  }
  catch(PipelineException ex) {
    Logs.plg.severe("Unable to load plugins: " + ex);
    System.exit(1);
  }

  pMasterMgrClient = new MasterMgrClient(pMasterServer, pMasterPort);
  pQueueMgrClient  = new QueueMgrClient(pQueueServer, pQueuePort);
}
{
  (PrivilegedCmds() | AdminCmds() |
   DefaultToolsetCmds() | ActiveToolsetCmds() | ToolsetCmds() |
   LicenseKeyCmds() | SelectionKeyCmds() | JobServerCmds() | 
   SuffixEditorCmds() | ViewCmds() | WorkingCmds() 

   ) 
  {
    pMasterMgrClient.disconnect();
    pQueueMgrClient.disconnect();
  }
}
    

/*------------------------------------------------------------------------------------------*/
/*   B A T C H   M O D E                                                                    */
/*------------------------------------------------------------------------------------------*/

void 
Batch() 
  throws PipelineException : 
{
  try {
    PluginMgr.init();
  }
  catch(PipelineException ex) {
    Logs.plg.severe("Unable to load plugins: " + ex);
    System.exit(1);
  }

  pMasterMgrClient = new MasterMgrClient(pMasterServer, pMasterPort);
  pQueueMgrClient  = new QueueMgrClient(pQueueServer, pQueuePort);
}
{
  (BatchOpt())
  {
    pMasterMgrClient.disconnect();
    pQueueMgrClient.disconnect();
  }
}

void 
BatchOpt() 
  throws PipelineException : 
{
  Token t;
}
{
  <BATCH> EQ() t=<PATH_ARG> AE()
  {
    /* process the batch file */ 
    File canon = null;
    {
      File file = new File(t.image);
      try {
	canon = file.getCanonicalFile();
      }
      catch(IOException ex) {
	throw new PipelineException
        ("Unable to determine the canonical filesystem path to the batch " + 
	 "file (" + file + ")!");
      }
    }

    Logs.ops.info("Processing Batch File: " + canon);

    if(pBatchFiles.contains(canon)) {
      StringBuffer buf = new StringBuffer();
      buf.append("Circular Batch Files:\n");

      Iterator iter = pBatchFiles.iterator();
      while(iter.hasNext()) {
	File file = (File) iter.next();
	buf.append("  " + file + " -> ");
      }
      buf.append("  " + canon);

      throw new PipelineException(buf.toString());
    }
    pBatchFiles.push(canon);

    ArrayList lines = pApp.packageFile(canon);
    Iterator iter = lines.iterator();
    while(iter.hasNext()) {
      String line = (String) iter.next();

      Logs.ops.info
	("\n" + 
	 pApp.repeat('*', 80) + "\n" +
	 "  BATCH: " + line.replace('\0',' ') + "\n" +
	 pApp.repeat('*', 80) + "\n");
      
      ScriptOptsParser parser = new ScriptOptsParser(new StringReader(line));
      parser.init(this);
      parser.BatchCommand();
    }

    pBatchFiles.pop();
  }
}

void 
BatchCommand() 
  throws PipelineException : 
{}
{
  (PrivilegedCmds() | AdminCmds() |
   DefaultToolsetCmds() | ActiveToolsetCmds() | ToolsetCmds() |
   LicenseKeyCmds() | SelectionKeyCmds() | JobServerCmds() | 
   SuffixEditorCmds() | ViewCmds() | WorkingCmds() 
   
   ) (AE())* <EOF>
  {}
}



/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION1> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws PipelineException :
{}
{
  (MasterHost() | MasterPort() | 
   QueueHost() | QueuePort() | JobPort() | 
   Log())
  {}
}


void
MasterHost() :
{
  String hname = null;
}
{
  <MASTER_HOST> EQ() hname=HostName()
  { 
    pMasterServer = hname;
  }
}

void
MasterPort()
  throws PipelineException :
{
  int port; 
}
{
  <MASTER_PORT> EQ() port=PortNumber() 
  { 
    pMasterPort = port;
  }
}

void
QueueHost() :
{
  String hname = null;
}
{
  <QUEUE_HOST> EQ() hname=HostName()
  { 
    pQueueServer = hname;
  }
}

void
QueuePort()
  throws PipelineException :
{
  int port; 
}
{
  <QUEUE_PORT> EQ() port=PortNumber()
  { 
    pQueuePort = port;
  }
}

void
JobPort()
  throws PipelineException :
{
  int port; 
}
{
  <JOB_PORT> EQ() port=PortNumber()
  { 
    pJobPort = port;
  }
}



void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (COMMA() LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}

void LoggerAll() : 
{
  Level v;
}
{
  (<LOG_ALL> COLON() v=LogLevel())
  {
    Logs.arg.setLevel(v); 
    Logs.ops.setLevel(v);
    Logs.net.setLevel(v);
    Logs.plg.setLevel(v);
    Logs.sub.setLevel(v);
  }
}

void LoggerPair() : 
{
  Logger g; 
  Level v;
}
{
  (g=Logger() COLON() v=LogLevel())
  {
    g.setLevel(v);
  }
}

Logger Logger() :
{
  Logger g;
}
{
  (g=ArgLogger() | g=OpsLogger() | g=NetLogger() | 
   g=PlgLogger() | g=SubLogger())
  {
    return g;
  }
}

Logger ArgLogger() : 
{}
{
  <LOG_ARG>
  {
    return Logs.arg;
  }
}

Logger OpsLogger() : 
{}
{
  <LOG_OPS>
  {
    return Logs.ops;
  }
}

Logger NetLogger() : 
{}
{
  <LOG_NET>
  {
    return Logs.net;
  }
}

Logger PlgLogger() : 
{}
{
  <LOG_PLG>
  {
    return Logs.plg;
  }
}

Logger SubLogger() : 
{}
{
  <LOG_SUB>
  {
    return Logs.sub;
  }
}


Level LogLevel() : 
{
  Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

Level SevereLevel() :
{
  Level v;
}
{
  <SEVERE> 
  {
    return Level.SEVERE;
  }
}

Level WarningLevel() :
{
  Level v;
}
{
  <WARNING> 
  {
    return Level.WARNING;
  }
}

Level InfoLevel() :
{
  Level v;
}
{
  <INFO> 
  {
    return Level.INFO;
  }
}

Level FineLevel() :
{
  Level v;
}
{
  <FINE> 
  {
    return Level.FINE;
  }
}

Level FinerLevel() :
{
  Level v;
}
{
  <FINER> 
  {
    return Level.FINER;
  }
}

Level FinestLevel() :
{
  Level v;
}
{
  <FINEST> 
  {
    return Level.FINEST;
  }
}


/*------------------------------------------------------------------------------------------*/
/*   P R I V I L E G E D   U S E R   C O M M A N D S                                        */
/*------------------------------------------------------------------------------------------*/

void 
PrivilegedCmds() 
  throws PipelineException : 
{}
{
  <PRIVILEGED> AE() (PrivilegedGet() | PrivilegedGrant() | PrivilegedRevoke())
  {}
}

void 
PrivilegedGet() 
  throws PipelineException : 
{}
{
  <PRIVILEGED_GET> AE()
  {
    TreeSet users = pMasterMgrClient.getPrivilegedUsers(false);
    Iterator iter = users.iterator();
    while(iter.hasNext()) {
      String user = (String) iter.next();
      Logs.ops.info(user);
    }
    Logs.flush();
  }
}

void 
PrivilegedGrant() 
  throws PipelineException : 
{
  String user = null;
}
{
  <PRIVILEGED_GRANT> EQ() user=UserName() AE()
  {
    pMasterMgrClient.grantPrivileges(user);
    Logs.ops.info("Granted privilged status to (" + user + ").");
    Logs.flush();
  }
}

void 
PrivilegedRevoke() 
  throws PipelineException : 
{
  String user = null;
}
{
  <PRIVILEGED_REVOKE> EQ() user=UserName() AE()
  {
    pMasterMgrClient.removePrivileges(user);
    Logs.ops.info("Revoked privilged status of (" + user + ").");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/
/*   A D M I N   C O M M A N D S                                                            */
/*------------------------------------------------------------------------------------------*/

void 
AdminCmds() 
  throws PipelineException : 
{}
{
  <ADMIN> AE() AdminShutdown()
  {}
}

void 
AdminShutdown() 
  throws PipelineException : 
{}
{
  <SHUTDOWN> AE()
  {
    pMasterMgrClient.shutdown();
    Logs.ops.info("Shutting Down...");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/
/*   T O O L S E T   C O M M A N D S                                                        */
/*------------------------------------------------------------------------------------------*/

void 
DefaultToolsetCmds() 
  throws PipelineException : 
{}
{
  <DEFAULT_TOOLSET> AE() (DefaultToolsetGet() |  DefaultToolsetSet())
  {}
}

void 
DefaultToolsetGet() 
  throws PipelineException : 
{}
{
  <TOOLSET_GET> AE()
  {
    Logs.ops.info(pMasterMgrClient.getDefaultToolsetName());
    Logs.flush();
  }
}

void 
DefaultToolsetSet() 
  throws PipelineException : 
{
  String tname = null;
}
{
  <TOOLSET_SET> EQ() tname=ToolsetName() AE()
  {
    pMasterMgrClient.setDefaultToolsetName(tname);
    Logs.ops.info("Default toolset set to (" + tname + ").");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/

void 
ActiveToolsetCmds() 
  throws PipelineException : 
{}
{
  <ACTIVE_TOOLSET> AE() (ActiveToolsetGet() | ActiveToolsetAdd() | ActiveToolsetRemove())
  {}
}

void 
ActiveToolsetGet() 
  throws PipelineException : 
{}
{
  <TOOLSET_GET> AE()
  {
    TreeSet tnames = pMasterMgrClient.getActiveToolsetNames(); 
    Iterator iter = tnames.iterator();
    while(iter.hasNext()) {
      String tname = (String) iter.next();
      Logs.ops.info(tname);
    }
    Logs.flush();
  }
}

void 
ActiveToolsetAdd() 
  throws PipelineException : 
{
  String tname = null;
}
{
  <TOOLSET_ADD> EQ() tname=ToolsetName() AE()
  {
    pMasterMgrClient.setToolsetActive(tname, true);
    Logs.ops.info("Toolset (" + tname + ") is now active.");
    Logs.flush();
  }
}

void 
ActiveToolsetRemove() 
  throws PipelineException : 
{
  String tname = null;
}
{
  <TOOLSET_REMOVE> EQ() tname=ToolsetName() AE()
  {
    pMasterMgrClient.setToolsetActive(tname, false);
    Logs.ops.info("Toolset (" + tname + ") is now inactive.");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/

void 
ToolsetCmds() 
  throws PipelineException : 
{}
{
  <TOOLSET1> AE() (ToolsetGet() | ToolsetGetInfo() | ToolsetGetInfoAll() |  ToolsetExport())
  {}
}

void 
ToolsetGet() 
  throws PipelineException : 
{}
{
  <TOOLSET_GET> AE()
  {
    TreeSet tnames = pMasterMgrClient.getToolsetNames(); 
    Iterator iter = tnames.iterator();
    while(iter.hasNext()) {
      String tname = (String) iter.next();
      Logs.ops.info(tname);
    }
    Logs.flush();
  }
}

void 
ToolsetGetInfo() 
  throws PipelineException : 
{
  String tname = null;
}
{
  <TOOLSET_GET_INFO> EQ() tname=ToolsetName() AE()
  {
    pApp.printToolset(tname, pMasterMgrClient);
  }
}

void 
ToolsetGetInfoAll() 
  throws PipelineException : 
{}
{
  <TOOLSET_GET_INFO_ALL> AE()
  {
    pApp.printToolset(null, pMasterMgrClient);
  }
}

void 
ToolsetExport() 
  throws PipelineException : 
{
  String tname = null;
}
{
  <TOOLSET_EXPORT> EQ() tname=ToolsetName() AE()
  {
    pApp.exportToolset(tname, pMasterMgrClient);
  }
}


/*------------------------------------------------------------------------------------------*/
/*   Q U E U E   A D M I N I S T R A T I O N   C O M M A N D S                              */
/*------------------------------------------------------------------------------------------*/

void 
LicenseKeyCmds() 
  throws PipelineException : 
{}
{
  <LICENSE_KEY1> AE() 
     (LicenseKeyGet() | LicenseKeyGetInfo() | LicenseKeyGetInfoAll() | 
      LicenseKeyAdd() | LicenseKeySet() | LicenseKeyRemove())
  {}
}

void 
LicenseKeyGet() 
  throws PipelineException : 
{}
{
  <KEY_GET> AE()
  {
    TreeSet knames = pQueueMgrClient.getLicenseKeyNames();
    Iterator iter = knames.iterator();
    while(iter.hasNext()) {
      String kname = (String) iter.next();
      Logs.ops.info(kname);
    }
    Logs.flush();    
  }
}

void 
LicenseKeyGetInfo() 
  throws PipelineException : 
{
  String kname = null;
}
{
  <KEY_GET_INFO> EQ() kname=KeyName() AE()
  {
    pApp.printLicenseKey(kname, pQueueMgrClient);
  }
}

void 
LicenseKeyGetInfoAll() 
  throws PipelineException : 
{}
{
  <KEY_GET_INFO_ALL> AE()
  {
    pApp.printLicenseKey(null, pQueueMgrClient);
  }
}

void 
LicenseKeyAdd() 
  throws PipelineException : 
{
  String kname = null;
  String msg = null;
  int total = 0;
}
{
  <KEY_ADD> EQ() kname=KeyName() AE() 
     ((msg=Msg() AE() total=Total()) | (total=Total() AE() msg=Msg())) AE()
  {
    LicenseKey key = new LicenseKey(kname, msg, total);
    pQueueMgrClient.addLicenseKey(key);

    Logs.ops.info("Added license key (" + kname + ").");
    Logs.flush();
  }
}
 
void 
LicenseKeySet() 
  throws PipelineException : 
{
  String kname = null;
  int total = 0;
}
{
  <KEY_SET> EQ() kname=KeyName() AE() total=Total() AE()
  {
    pQueueMgrClient.setTotalLicenses(kname, total);

    Logs.ops.info("License key (" + kname + ") now has (" + total + ") total licenses.");
    Logs.flush();
  }
}
 
void 
LicenseKeyRemove() 
  throws PipelineException : 
{
  String kname = null;
}
{
  <KEY_REMOVE> EQ() kname=KeyName() AE()
  {
    pQueueMgrClient.removeLicenseKey(kname);

    Logs.ops.info("Removed license key (" + kname + ").");
    Logs.flush();
  }
}

int 
Total()
  throws PipelineException : 
{
  int total = 0;
}
{
  <TOTAL> EQ() total=IntegerLiteral() 
  {
    return total;
  }
}
      

/*------------------------------------------------------------------------------------------*/

void 
SelectionKeyCmds() 
  throws PipelineException : 
{}
{
  <SELECTION_KEY1> AE() 
     (SelectionKeyGet() | SelectionKeyGetInfo() | SelectionKeyGetInfoAll() | 
      SelectionKeyAdd() | SelectionKeyRemove())
  {}
}

void 
SelectionKeyGet() 
  throws PipelineException : 
{}
{
  <KEY_GET> AE()
  {
    TreeSet knames = pQueueMgrClient.getSelectionKeyNames();
    Iterator iter = knames.iterator();
    while(iter.hasNext()) {
      String kname = (String) iter.next();
      Logs.ops.info(kname);
    }
    Logs.flush();    
  }
}

void 
SelectionKeyGetInfo() 
  throws PipelineException : 
{
  String kname = null;
}
{
  <KEY_GET_INFO> EQ() kname=KeyName() AE()
  {
    pApp.printSelectionKey(kname, pQueueMgrClient);
  }
}

void 
SelectionKeyGetInfoAll() 
  throws PipelineException : 
{}
{
  <KEY_GET_INFO_ALL> AE()
  {
    pApp.printSelectionKey(null, pQueueMgrClient);
  }
}

void 
SelectionKeyAdd() 
  throws PipelineException : 
{
  String kname = null;
  String msg = null;
}
{
  <KEY_ADD> EQ() kname=KeyName() AE() msg=Msg() AE()
  {
    SelectionKey key = new SelectionKey(kname, msg);
    pQueueMgrClient.addSelectionKey(key);
    
    Logs.ops.info("Added selection key (" + kname + ").");
    Logs.flush();
  }
}
 
void 
SelectionKeyRemove() 
  throws PipelineException : 
{
  String kname = null;
}
{
  <KEY_REMOVE> EQ() kname=KeyName() AE()
  {
    pQueueMgrClient.removeSelectionKey(kname);

    Logs.ops.info("Removed selection key (" + kname + ").");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/

void 
JobServerCmds() 
  throws PipelineException : 
{}
{
  <JOB_SERVER> AE() 
     (JobServerGet() | JobServerGetInfo() | JobServerGetInfoAll() | 
      JobServerAdd() | JobServerSet() | JobServerRemove())
  {}
}

void 
JobServerGet() 
  throws PipelineException : 
{}
{
  <JOB_GET> AE()
  {
    TreeMap hosts = pQueueMgrClient.getHosts();
    Iterator iter = hosts.keySet().iterator();
    while(iter.hasNext()) {
      String hname = (String) iter.next();
      Logs.ops.info(hname);
    }
    Logs.flush();    
  }
}

void 
JobServerGetInfo() 
  throws PipelineException : 
{
  String hname = null;
}
{
  <JOB_GET_INFO> EQ() hname=HostName() AE()
  {
    pApp.printHosts(hname, pQueueMgrClient);
  }
}

void 
JobServerGetInfoAll() 
  throws PipelineException : 
{}
{
  <JOB_GET_INFO_ALL> AE()
  {
    pApp.printHosts(null, pQueueMgrClient);
  }
}

void 
JobServerAdd() 
  throws PipelineException : 
{
  String hname = null;
}
{
  <JOB_ADD> EQ() hname=HostName() AE()
  {
    pQueueMgrClient.addHost(hname);

    Logs.ops.info("Added job server (" + hname + ").");
    Logs.flush();
  }
}

void 
JobServerSet() 
  throws PipelineException : 
{
  String hname = null;

  pJobStatus           = null;
  pJobReserve          = null;
  pSetJobReserve       = false;
  pJobSlots            = null;
  pJobSelectionBiases  = new TreeMap();
  pJobSelectionRemoves = new TreeSet();
}
{
  <JOB_SET> EQ() hname=HostName() AE() (JobServerSetOption())+
  {
    pApp.editHost(hname, 
		  pJobStatus, pJobReserve, pSetJobReserve, pJobSlots, 
		  pJobSelectionBiases, pJobSelectionRemoves, 
		  pQueueMgrClient);

    Logs.ops.info("Modified properties of job server (" + hname + ").");
    Logs.flush();
  }
}

void 
JobServerSetOption()
  throws PipelineException :
{}
{
  (JobServerShutdown() | JobServerEnable() | JobServerDisable() | 
   JobServerReserve() | JobServerSlots() | 
   JobServerSelectionBias() | JobServerSelectionRemoveKey())
  {}
}

void 
JobServerShutdown() :
{}
{
  <SHUTDOWN> AE()
  {
    if(pJobStatus != null) 
      throw new ParseException
	("The --shutdown, --enable and --disable options are mutually exclusive!");
    pJobStatus = QueueHost.Status.Shutdown;
  }
}

void 
JobServerEnable() :
{}
{
  <ENABLE> AE()
  {
    if(pJobStatus != null) 
      throw new ParseException
	("The --shutdown, --enable and --disable options are mutually exclusive!");
    pJobStatus = QueueHost.Status.Enabled;
  }
}

void 
JobServerDisable() :
{}
{
  <DISABLE> AE()
  {
    if(pJobStatus != null) 
      throw new ParseException
	("The --shutdown, --enable and --disable options are mutually exclusive!");
    pJobStatus = QueueHost.Status.Disabled;
  }
}

void 
JobServerReserve() :
{
  String name    = null;
  pSetJobReserve = true;
}
{
  ((<RESERVE> EQ() name=UserName()) | <OPEN>) AE()
  {
    pJobReserve = name;
  }
}

void
JobServerSlots()
  throws PipelineException : 
{
  Integer slots = null;
}
{
  <SLOTS> EQ() slots=IntegerLiteral() AE()
  {
    pJobSlots = slots;
  }
}

void 
JobServerSelectionBias()
  throws PipelineException : 
{
  String kname;
  Integer bias; 
}
{
  <SELECTION_BIAS> EQ() kname=KeyBiasName() COLON() bias=KeyBias() AE()
  {
    pJobSelectionBiases.put(kname, bias);
  }  
}

void 
JobServerSelectionRemoveKey() : 
{
  String kname;
}
{
  <REMOVE_KEY> EQ() kname=KeyName() AE()
  {
    pJobSelectionRemoves.add(kname);
  }
}
  

void 
JobServerRemove() 
  throws PipelineException : 
{
  String hname = null;
}
{
  <JOB_REMOVE> EQ() hname=KeyName() AE()
  {
    pApp.removeHost(hname, pQueueMgrClient);

    Logs.ops.info("Removed job server (" + hname + ").");
    Logs.flush();
  }
}


/*------------------------------------------------------------------------------------------*/
/*   U S E R    P R E F E R E N C E S                                                       */
/*------------------------------------------------------------------------------------------*/

void 
SuffixEditorCmds() 
  throws PipelineException : 
{}
{
  <SUFFIX_EDITOR> AE() 
     (SuffixEditorGet() | SuffixEditorGetInfo() | SuffixEditorGetInfoAll() | 
      SuffixEditorSet() | SuffixEditorRemove() | SuffixEditorReset())
  {}
}

void 
SuffixEditorGet() 
  throws PipelineException : 
{}
{
  <SUFFIX_EDITOR_GET> AE()
  {
    TreeSet editors = pMasterMgrClient.getSuffixEditors();
    Iterator iter = editors.iterator();
    while(iter.hasNext()) {
      SuffixEditor se = (SuffixEditor) iter.next();
      Logs.ops.info(se.getSuffix());
    }
    Logs.flush();    
  }
}

void 
SuffixEditorGetInfo() 
  throws PipelineException : 
{
  String suffix = null;
}
{
  <SUFFIX_EDITOR_GET_INFO> EQ() suffix=Suffix() AE()
  {
    pApp.printSuffixEditor(suffix, pMasterMgrClient);
  }
}

void 
SuffixEditorGetInfoAll() 
  throws PipelineException : 
{}
{
  <SUFFIX_EDITOR_GET_INFO_ALL> AE()
  {
    pApp.printSuffixEditor(null, pMasterMgrClient);
  }
}

void 
SuffixEditorSet() 
  throws PipelineException : 
{
  String suffix = null;

  pEditorName = null;
  pMsg        = null; 
}
{
  <SUFFIX_EDITOR_SET> EQ() suffix=Suffix() AE() 
     ((Msg() AE() Editor()) | (Editor() AE() Msg())) AE()
  {
    SuffixEditor se = new SuffixEditor(suffix, pMsg, pEditorName);
    pApp.addSuffixEditor(se, pMasterMgrClient);

    Logs.ops.info("Added default editor for suffix (" + suffix + ").");
    Logs.flush();
  }
}

  
void 
SuffixEditorRemove() 
  throws PipelineException : 
{
  String suffix = null;
}
{
  <SUFFIX_EDITOR_REMOVE> EQ() suffix=Suffix() AE() 
  {
    pApp.removeSuffixEditor(suffix, pMasterMgrClient);

    Logs.ops.info("Removed default editor for suffix (" + suffix + ").");
    Logs.flush();
  }
}

void 
SuffixEditorReset() 
  throws PipelineException : 
{}
{
  <SUFFIX_EDITOR_RESET> AE() 
  {
    pApp.resetSuffixEditors(pMasterMgrClient);

    Logs.ops.info("Reset suffix editors to site defaults.");
    Logs.flush();
  }
}


  
/*------------------------------------------------------------------------------------------*/
/*   V I E W   C O M M A N D S                                                              */
/*------------------------------------------------------------------------------------------*/

void 
ViewCmds() 
  throws PipelineException : 
{}
{
  <VIEW1> AE() 
     (ViewGet() | ViewCreate()) 
  {}
}

void 
ViewGet() 
  throws PipelineException : 
{}
{
  <VIEW_GET> AE()
  {
    TreeMap table = pMasterMgrClient.getWorkingAreas();
    TreeSet views = (TreeSet) table.get(PackageInfo.sUser);
    Iterator iter = views.iterator();
    while(iter.hasNext()) {
      String vname = (String) iter.next();
      Logs.ops.info(vname);
    }
    Logs.flush();    
  }
}

void 
ViewCreate() 
  throws PipelineException : 
{
  String vname = null;
}
{
  <VIEW_CREATE> EQ() vname=ViewName() AE()
  {
    pMasterMgrClient.createWorkingArea(PackageInfo.sUser, vname);
  }
}


/*------------------------------------------------------------------------------------------*/
/*   W O R K I N G   N O D E   V E R S I O N   C O M M A N D S                              */
/*------------------------------------------------------------------------------------------*/

void 
WorkingCmds() 
  throws PipelineException : 
{}
{
  <WORKING> AE() 
     (WorkingGetInfo() | WorkingRegister() | WorkingRelease() | WorkingSet() | 
      WorkingLink() | WorkingUnlink() | WorkingAddSecondary() | WorkingRemoveSecondary() |
      WorkingRename() | WorkingRenumber() | WorkingEdit() | WorkingSubmitJobs() | 
      WorkingRemoveFiles()) 
  {}
}

/*------------------------------------------------------------------------------------------*/

void 
WorkingGetInfo() 
  throws PipelineException : 
{
  String name = null;

  pAuthor   = PackageInfo.sUser;
  pView     = "default";
  pSections = new TreeSet();
}
{
  <WORKING_GET_INFO> EQ() name=NodeName() AE() (WorkingGetInfoOpts())*
  {
    pApp.printWorkingVersion(new NodeID(pAuthor, pView, name), pSections, 
			     pMasterMgrClient, pQueueMgrClient);
  }
}

void
WorkingGetInfoOpts() :
{}
{
  (Author() | View() | WorkingGetInfoShow() | WorkingGetInfoHide()) 
  {}
}

void 
WorkingGetInfoShow() : 
{}
{
  <SHOW> EQ() WorkingGetInfoShowSections() (COMMA() WorkingGetInfoShowSections())* AE()  
  {}
}

void 
WorkingGetInfoShowSections() : 
{}
{
  (WorkingGetInfoShowAll() | 
   ShowVsn() | ShowProp() |  ShowAct() | ShowJReq() | ShowKey() | ShowLink()) 
  {}
}

void 
WorkingGetInfoShowAll() : 
{}
{
  <ALL>
  {
    pSections.add("vsn");
    pSections.add("prop");
    pSections.add("act");
    pSections.add("jreq");
    pSections.add("key");
    pSections.add("link");
  }
}

void 
WorkingGetInfoHide() : 
{}
{
  <HIDE> EQ() WorkingGetInfoHideSections() (COMMA() WorkingGetInfoHideSections())* AE()  
  {}
}

void 
WorkingGetInfoHideSections() : 
{}
{
  (WorkingGetInfoHideAll() | 
   HideVsn() | HideProp() | HideAct() | HideJReq() | HideKey() | HideLink()) 
  {}
}

void 
WorkingGetInfoHideAll() : 
{}
{
  <ALL>
  {
    pSections.clear(); 
  }
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingRegister() 
  throws PipelineException : 
{
  String name = null;

  pAuthor     = PackageInfo.sUser;
  pView       = "default";
  pFileSeq    = null;
  pToolset    = null;
  pEditorName = null;

  pNoAction        = null;
  pActionName      = null;
  pActionVersionID = null; 
  pActionEnabled   = null;
  pParams          = new TreeMap();
  pSourceParams    = new TreeMap();
  pOverflowPolicy  = null;
  pExecutionMethod = null;
  pBatchSize       = null;
  pPriority        = null;
  pMaxLoad         = null;
  pMinMemory       = null;
  pMinDisk         = null;
  pLicenseKeys     = new TreeMap();
  pSelectionKeys   = new TreeMap();
}
{
  <WORKING_REGISTER> EQ() name=NodeName() AE() (WorkingRegisterOpts())*
  {
    if(pFileSeq == null) 
      throw new PipelineException
        ("The --fseq option is required!");

    pApp.workingVersionRegister
      (new NodeID(pAuthor, pView, name), pFileSeq, pToolset, pEditorName, pNoAction, 
       pActionName, pActionVersionID, pActionEnabled, pParams, pSourceParams, 
       pOverflowPolicy, pExecutionMethod, pBatchSize, 
       pPriority, pMaxLoad, pMinMemory, pMinDisk, 
       pLicenseKeys, pSelectionKeys,
       pMasterMgrClient);

    Logs.ops.info("Registered Node: " + name);
    Logs.flush();
  }
}

void
WorkingRegisterOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | FSeq() | Toolset() | Editor() | 
   Action() | ActionEnabled() | Param() | SourceParam() | 
   Ignore() | Abort() | Serial() | Parallel() | BatchSize() | 
   Priority() | MaxLoad() | MinMemory() | MinDisk() | 
   LicenseKey() | SelectionKey()) 
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingRelease() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor      = PackageInfo.sUser;
  pView        = "default";
  pRemoveFiles = false;
}
{
  <WORKING_RELEASE> EQ() name=NodeName() AE() (WorkingReleaseOpts())* 
  {
    pMasterMgrClient.release(new NodeID(pAuthor, pView, name), pRemoveFiles);

    Logs.ops.info("Released Node: " + name);
    Logs.flush();
  }
}

void
WorkingReleaseOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | RemoveFiles()) 
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingSet() 
  throws PipelineException : 
{
  String name = null;

  pAuthor      = PackageInfo.sUser;
  pView        = "default";
  pToolset     = null;
  pEditorName  = null;

  pNoAction        = null;
  pActionName      = null;
  pActionVersionID = null; 
  pActionEnabled   = null;
  pParams          = new TreeMap();
  pSourceParams    = new TreeMap();
  pOverflowPolicy  = null;
  pExecutionMethod = null;
  pBatchSize       = null;
  pPriority        = null;
  pMaxLoad         = null;
  pMinMemory       = null;
  pMinDisk         = null;
  pLicenseKeys     = new TreeMap();
  pSelectionKeys   = new TreeMap();
}
{
  <WORKING_SET> EQ() name=NodeName() AE() (WorkingSetOpts())*
  {
    pApp.workingVersionSet
      (new NodeID(pAuthor, pView, name), pToolset, pEditorName, pNoAction, 
       pActionName, pActionVersionID, pActionEnabled, pParams, pSourceParams, 
       pOverflowPolicy, pExecutionMethod, pBatchSize, 
       pPriority, pMaxLoad, pMinMemory, pMinDisk, 
       pLicenseKeys, pSelectionKeys,
       pMasterMgrClient);

    Logs.ops.info("Node Properties Set: " + name);
    Logs.flush();
  }
}

void
WorkingSetOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | Toolset() | Editor() | 
   NoAction() | Action() | ActionEnabled() | Param() | NoParam() | SourceParam() | 
   Ignore() | Abort() | Serial() | Parallel() | BatchSize() | 
   Priority() | MaxLoad() | MinMemory() | MinDisk() | 
   LicenseKey() | SelectionKey()) 
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingLink() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor  = PackageInfo.sUser;
  pView    = "default";

  pLinkSourceName = null;
}
{
  <WORKING_LINK> EQ() name=NodeName() AE() (WorkingLinkOpts())* 
  {
    if(pLinkSourceName == null) 
      throw new PipelineException
        ("No link source node was specified with a --assoc, --ref or --depend option!");

    pMasterMgrClient.link(pAuthor, pView, name, 
			  pLinkSourceName, pLinkPolicy, pLinkRelationship, pLinkFrameOffset);

    Logs.ops.info("Linked Nodes: " + pLinkSourceName + " to " + name);
    Logs.flush();
  }
}

void
WorkingLinkOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | Assoc() | Ref() | Depend()) 
  {}
}

void
Assoc()
  throws PipelineException : 
{
  String sname = null;
}
{
  <ASSOC> EQ() sname=LinkName() AE() 
  {
    if(pLinkSourceName != null) 
      throw new PipelineException
        ("The --assoc, --ref and --depend options are mutually exclusive!");

    pLinkSourceName   = sname;
    pLinkPolicy       = LinkPolicy.Association; 
    pLinkRelationship = LinkRelationship.None;
    pLinkFrameOffset  = null;
  }
}

void
Ref()
  throws PipelineException : 
{
  String sname = null;

  pLinkRelationship = LinkRelationship.All;
  pLinkFrameOffset  = null;
}
{
  <REF> EQ() sname=LinkName() (COMMA() (LinkAll() | LinkFrameOffset()))? AE()
  {
    if(pLinkSourceName != null) 
      throw new PipelineException
        ("The --assoc, --ref and --depend options are mutually exclusive!");

    pLinkSourceName = sname;
    pLinkPolicy     = LinkPolicy.Reference; 
  }
}

void
Depend()
  throws PipelineException : 
{
  String sname = null;

  pLinkRelationship = LinkRelationship.All;
  pLinkFrameOffset  = null;
}
{
  <DEPEND> EQ() sname=LinkName() (COMMA() (LinkAll() | LinkFrameOffset()))? AE() 
  {
    if(pLinkSourceName != null) 
      throw new PipelineException
        ("The --assoc, --ref and --depend options are mutually exclusive!");

    pLinkSourceName = sname;
    pLinkPolicy     = LinkPolicy.Dependency;
  }
}

void 
LinkAll() : 
{}
{
  <LINK_ALL>
  {
    pLinkRelationship = LinkRelationship.All;
  }
}

void 
LinkFrameOffset()
  throws PipelineException :  
{
  Token t;
}
{
  t=<OFFSET> 
  {
    try {
      pLinkFrameOffset = new Integer(t.image);
      pLinkRelationship = LinkRelationship.OneToOne;
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingUnlink() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor  = PackageInfo.sUser;
  pView    = "default";

  pLinkSourceName = null;
}
{
  <WORKING_UNLINK> EQ() name=NodeName() AE() (WorkingUnlinkOpts())* 
  {
    if(pLinkSourceName == null) 
      throw new PipelineException
        ("No link source node was specified with the --source option!");

    pMasterMgrClient.unlink(pAuthor, pView, name, pLinkSourceName);

    Logs.ops.info("Unlinked Nodes: " + pLinkSourceName + " from " + name);
    Logs.flush();
  }
}

void
WorkingUnlinkOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | LinkSource()) 
  {}
}

void
LinkSource() : 
{
  String sname = null;
}
{
  <SOURCE> EQ() sname=LinkName() AE()
  {
    pLinkSourceName = sname;
  }
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingAddSecondary() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor  = PackageInfo.sUser;
  pView    = "default";
  pFileSeq = null; 
}
{
  <WORKING_ADD_SECONDARY> EQ() name=NodeName() AE() (WorkingSecondaryOpts())* 
  {
    if(pFileSeq == null) 
      throw new PipelineException
        ("The --fseq option is required!");

    pMasterMgrClient.addSecondary(new NodeID(pAuthor, pView, name), pFileSeq);

    Logs.ops.info("Added Secondary: " + pFileSeq + " to " + name);
    Logs.flush();
  }
}

void 
WorkingRemoveSecondary() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor  = PackageInfo.sUser;
  pView    = "default";
  pFileSeq = null; 
}
{
  <WORKING_REMOVE_SECONDARY> EQ() name=NodeName() AE() (WorkingSecondaryOpts())* 
  {
    if(pFileSeq == null) 
      throw new PipelineException
        ("The --fseq option is required!");

    pMasterMgrClient.removeSecondary(new NodeID(pAuthor, pView, name), pFileSeq);

    Logs.ops.info("Removed Secondary: " + pFileSeq + " from " + name);
    Logs.flush();
  }
}

void
WorkingSecondaryOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | FSeq()) 
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingRename() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor      = PackageInfo.sUser;
  pView        = "default";
  pNewName     = null;
  pRenameFiles = false;
}
{
  <WORKING_RENAME> EQ() name=NodeName() AE() (WorkingRenameOpts())* 
  {
    if(pNewName == null) 
      throw new PipelineException
        ("The --name option is required!");

    pMasterMgrClient.rename(new NodeID(pAuthor, pView, name), pNewName, pRenameFiles);

    Logs.ops.info("Renamed: " + name + " to " + pNewName);
    Logs.flush();    
  }
}

void
WorkingRenameOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | NewName() | RenameFiles())
  {}
}

void 
NewName() : 
{
  String name;
}
{
  <NAME> EQ() name=NodeName() AE()
  {
    pNewName = name;
  }
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingRenumber() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor      = PackageInfo.sUser;
  pView        = "default";
  pFrameRange  = null;
  pRemoveFiles = false;
}
{
  <WORKING_RENUMBER> EQ() name=NodeName() AE() (WorkingRenumberOpts())* 
  {
    if(pFrameRange == null) 
      throw new PipelineException
        ("The --range option is required!");

    pMasterMgrClient.renumber(new NodeID(pAuthor, pView, name), pFrameRange, pRemoveFiles);

    Logs.ops.info("Renumbered: " + name);
    Logs.flush();    
  }
}

void
WorkingRenumberOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | Range() | RemoveFiles())
  {}
}

void 
Range()
  throws PipelineException : 
{
  Integer start = null;
  Integer end   = null;
  Integer by    = 1;
}
{
  <RANGE> EQ() start=FrameNumber() (DASH() end=FrameNumber() (<BY> by=FrameNumber())?)? AE()
  {
    try {
      if(end == null) 
        pFrameRange = new FrameRange(start);
      else 
        pFrameRange = new FrameRange(start, end, by);
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

/*------------------------------------------------------------------------------------------*/

void 
WorkingEdit() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor          = PackageInfo.sUser;
  pView            = "default";
  pEditorName      = null;
  pEditorVersionID = null;
  pFrames          = new ArrayList();
  pIndices         = new ArrayList();
  pFileSeq         = null;  
  pWait            = false;
}
{
  <WORKING_EDIT> EQ() name=NodeName() AE() (WorkingEditOpts())* 
  {
    if((!pFrames.isEmpty() && !pIndices.isEmpty()) || 
       (pFileSeq != null) && ((!pFrames.isEmpty() || !pIndices.isEmpty())))
      throw new PipelineException
        ("The --frame, --index and --fseq options are mutually exclusive!");

     pApp.workingEdit(new NodeID(pAuthor, pView, name), pEditorName, pEditorVersionID, 
		      pFrames, pIndices, pFileSeq, pWait, pMasterMgrClient);
  }
}

void
WorkingEditOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | EditorVersion() | Frame() | Index() | FSeq() | Wait())
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingSubmitJobs() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor          = PackageInfo.sUser;
  pView            = "default";
  pFrames          = new ArrayList();
  pIndices         = new ArrayList();
}
{
  <WORKING_SUBMIT_JOBS> EQ() name=NodeName() AE() (WorkingSubmitJobsOpts())* 
  {
    if(!pFrames.isEmpty() && !pIndices.isEmpty())
      throw new PipelineException
        ("The --frame and --index options are mutually exclusive!");

    pApp.workingSubmitJobs(new NodeID(pAuthor, pView, name), 
			   pFrames, pIndices, pMasterMgrClient);
  }
}

void
WorkingSubmitJobsOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | Frame() | Index())
  {}
}


/*------------------------------------------------------------------------------------------*/

void 
WorkingRemoveFiles() 
  throws PipelineException : 
{
  String name = null;
  
  pAuthor          = PackageInfo.sUser;
  pView            = "default";
  pFrames          = new ArrayList();
  pIndices         = new ArrayList();
}
{
  <WORKING_REMOVE_FILES> EQ() name=NodeName() AE() (WorkingRemoveFilesOpts())* 
  {
    if(!pFrames.isEmpty() && !pIndices.isEmpty())
      throw new PipelineException
        ("The --frame and --index options are mutually exclusive!");

    pApp.workingRemoveFiles(new NodeID(pAuthor, pView, name), 
			    pFrames, pIndices, pMasterMgrClient);

    Logs.ops.info("Removed Files: " + name);
    Logs.flush();    
  }
}

void
WorkingRemoveFilesOpts()
  throws PipelineException : 
{}
{
  (Author() | View() | Frame() | Index())
  {}
}


/*------------------------------------------------------------------------------------------*/
/*   C H E C K E D - I N   N O D E   V E R S I O N   C O M M A N D S                        */
/*------------------------------------------------------------------------------------------*/



/*------------------------------------------------------------------------------------------*/
/*   N O D E   O P E R A T I O N   C O M M A N D S                                          */
/*------------------------------------------------------------------------------------------*/




/*------------------------------------------------------------------------------------------*/
/*   Q U E U E   O P E R A T I O N   C O M M A N D S                                        */
/*------------------------------------------------------------------------------------------*/




/*------------------------------------------------------------------------------------------*/
/*   S H O W   H I D E   S E C T I O N S                                                    */
/*------------------------------------------------------------------------------------------*/

void
ShowVsn() : 
{}
{
  <VSN> 
  {
    pSections.add("vsn");    
  }
}

void
ShowProp() : 
{}
{
  <PROP> 
  {
    pSections.add("prop");    
  }
}

void
ShowAct() : 
{}
{
  <ACT>  
  {
    pSections.add("act");    
  }
}

void
ShowJReq() : 
{}
{
  <JREQ> 
  {
    pSections.add("jreq");    
  }
}

void
ShowKey() : 
{}
{
  <KEY> 
  {
    pSections.add("key");    
  }
}

void
ShowLink() : 
{}
{
  <LINK> 
  {
    pSections.add("link");    
  }
}

void
ShowTime() : 
{}
{
  <TIME> 
  {
    pSections.add("time");    
  }
}

void
ShowProc() : 
{}
{
  <PROC> 
  {
    pSections.add("proc");    
  }
}

void
ShowWkdir() : 
{}
{
  <WKDIR> 
  {
    pSections.add("wkdir");    
  }
}

void
ShowCmd() : 
{}
{
  <CMD> 
  {
    pSections.add("cmd");    
  }
}

void
ShowEnv() : 
{}
{
  <ENV> 
  {
    pSections.add("env");    
  }
}

void
ShowOut() : 
{}
{
  <OUT> 
  {
    pSections.add("out");    
  }
}

void
ShowErr() : 
{}
{
  <ERR> 
  {
    pSections.add("err");    
  }
}

void
ShowFile() : 
{}
{
  <FILE> 
  {
    pSections.add("file");    
  }
}



void
HideVsn() : 
{}
{
  <VSN> 
  {
    pSections.add("vsn");    
  }
}

void
HideProp() : 
{}
{
  <PROP> 
  {
    pSections.add("prop");    
  }
}

void
HideAct() : 
{}
{
  <ACT>  
  {
    pSections.add("act");    
  }
}

void
HideJReq() : 
{}
{
  <JREQ> 
  {
    pSections.add("jreq");    
  }
}

void
HideKey() : 
{}
{
  <KEY> 
  {
    pSections.add("key");    
  }
}

void
HideLink() : 
{}
{
  <LINK> 
  {
    pSections.add("link");    
  }
}

void
HideTime() : 
{}
{
  <TIME> 
  {
    pSections.add("time");    
  }
}

void
HideProc() : 
{}
{
  <PROC> 
  {
    pSections.add("proc");    
  }
}

void
HideWkdir() : 
{}
{
  <WKDIR> 
  {
    pSections.add("wkdir");    
  }
}

void
HideCmd() : 
{}
{
  <CMD> 
  {
    pSections.add("cmd");    
  }
}

void
HideEnv() : 
{}
{
  <ENV> 
  {
    pSections.add("env");    
  }
}

void
HideOut() : 
{}
{
  <OUT> 
  {
    pSections.add("out");    
  }
}

void
HideErr() : 
{}
{
  <ERR> 
  {
    pSections.add("err");    
  }
}

void
HideFile() : 
{}
{
  <FILE> 
  {
    pSections.add("file");    
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

String 
Msg() : 
{
  String msg; 
}
{
  <MSG> EQ() msg=StringLiteral() 
  {
    return msg;
  }
}

void
Author() : 
{
  String uname = null;
}
{
  <AUTHOR> EQ() uname=UserName() AE()
  {
    pAuthor = uname;
  }
}

void
View() : 
{
  String vname = null;
}
{
  <VIEW2> EQ() vname=ViewName() AE()
  {
    pView = vname;
  }
}

void
FSeq()
  throws PipelineException : 
{
  String prefix = null;
  String suffix = null;
  Integer start = null;
  Integer end   = null;
  Integer by    = 1;
}
{
  <FSEQ> EQ() 
    prefix=Prefix() (DOT() ((Padding() (DOT() suffix=Suffix())?) | suffix=Suffix()))? 
    (COMMA() start=FrameNumber() (DASH() end=FrameNumber() (<BY> by=FrameNumber())?)?)? AE()
  {
    try {
      FrameRange range = null;
      if(start != null) {
	if(end == null) 
	  range = new FrameRange(start);
	else 
	  range = new FrameRange(start, end, by);
      }

      FilePattern fpat = null;
      if(pPadding == null) 
        fpat = new FilePattern(prefix, suffix);
      else 
        fpat = new FilePattern(prefix, pPadding, suffix);
      
      pFileSeq = new FileSeq(fpat, range);
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

void
Padding() : 
{
  pPadding = 0;
}
{
  (PaddingSingle())+ | PaddingFour() 
  {}
}

void
PaddingSingle() : 
{}
{
  <AT>
  {
    pPadding++;
  }
}

void
PaddingFour() : 
{}
{
  <POUND>
  {
    pPadding = 4;
  }
}

void 
Frame() 
  throws PipelineException : 
{}
{
  <FRAME> EQ() FrameNumbers() (COMMA() FrameNumbers())* AE()
  {}
}

void 
FrameNumbers() 
  throws PipelineException : 
{
  Token s;
  Token e = null;
}
{
  s=<FRAME_NUMBER2> (DASH() e=<FRAME_NUMBER2>)?
  {
    try {
      if(e == null) {
	int[] single = new int[1];
	single[0] = Integer.parseInt(s.image);
	pFrames.add(single);
      }
      else {
	int[] range = new int[2];
	range[0] = Integer.parseInt(s.image);
	range[1] = Integer.parseInt(e.image);

	if(range[0] > range[1])
	  throw new PipelineException
	    ("The start frame (" + range[0] + ") cannot be greater than the " + 
	     "end frame (" + range[1] + ")!");

	pFrames.add(range);	
      } 
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }    
  }
}

void 
Index() 
  throws PipelineException : 
{}
{
  <INDEX> EQ() FrameIndices() (COMMA() FrameIndices())* AE()
  {}
}

void 
FrameIndices() 
  throws PipelineException : 
{
  Token s;
  Token e = null;
}
{
  s=<FRAME_INDEX> (DASH() e=<FRAME_INDEX>)?
  {
    try {
      if(e == null) {
	int[] single = new int[1];
	single[0] = Integer.parseInt(s.image);
	pIndices.add(single);
      }
      else {
	int[] range = new int[2];
	range[0] = Integer.parseInt(s.image);
	range[1] = Integer.parseInt(e.image);

	if(range[0] > range[1])
	  throw new PipelineException
	    ("The start index (" + range[0] + ") cannot be greater than the " + 
	     "end index (" + range[1] + ")!");

	pIndices.add(range);	
      } 
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }    
  }
}

void
Wait() : 
{}
{
  <WAIT> AE()
  {
    pWait = true;
  }
}

void
Toolset() : 
{
  String tname = null;
}
{
  <TOOLSET2> EQ() tname=ToolsetName() AE()
  {
    pToolset = tname;
  }
}

void
Editor() : 
{
  String ename = null;
}
{
  <EDITOR> EQ() ename=EditorName() AE()
  {
    pEditorName = ename;
  }
}

void
EditorVersion()
  throws PipelineException : 
{
  String ename  = null;
  VersionID vid = null;
}
{
  <EDITOR> EQ() ename=EditorName() (COLON() vid=RevisionNumber())? AE()
  {
    pEditorName      = ename; 
    pEditorVersionID = vid; 
  }
}

void
NoAction() :
{}
{
  <NO_ACTION> AE()
  {
    pNoAction        = true;

    pActionName      = null;
    pActionVersionID = null; 
    pActionEnabled   = null;
    pParams          = new TreeMap();
    pSourceParams    = new TreeMap();
    pOverflowPolicy  = null;
    pExecutionMethod = null;
    pBatchSize       = null;
    pPriority        = null;
    pMaxLoad         = null;
    pMinMemory       = null;
    pMinDisk         = null;
    pLicenseKeys     = new TreeMap();
    pSelectionKeys   = new TreeMap();
  }
}

void
Action()
  throws PipelineException : 
{
  String aname  = null;
  VersionID vid = null;
}
{
  <ACTION1> EQ() aname=ActionName() (COLON() vid=RevisionNumber())? AE()
  {
    pActionName      = aname; 
    pActionVersionID = vid; 
  }
}
  
void 
ActionEnabled() : 
{
  boolean enabled;
}
{
  <ACTION_ENABLED> EQ() enabled=BooleanLiteral() AE()
  {
    pActionEnabled = enabled;
  }
}

void 
Param() : 
{
  String pname  = null;
  String pvalue = null;
}
{
  <PARAM> EQ() pname=ParamName() COLON() pvalue=ParamValue() AE() 
  {
    pParams.put(pname, pvalue);
  }
}

void 
NoParam() : 
{
  String sname  = null;
}
{
  <NO_PARAM> EQ() sname=LinkName() AE() 
  {
    pSourceParams.put(sname, null);
  }
}

void 
SourceParam() : 
{
  String sname  = null;
  String pname  = null;
  String pvalue = null;
}
{
  <SOURCE_PARAM> EQ() sname=SourceName() COMMA() 
     pname=ParamName() COLON() pvalue=ParamValue() AE() 
  {
    TreeMap params = (TreeMap) pSourceParams.get(sname);
    if(params == null) {
      params = new TreeMap();
      pSourceParams.put(sname, params);
    }
    params.put(pname, pvalue);
  }
}

void 
Ignore() : 
{}
{
  <IGNORE> AE() 
  {
    pOverflowPolicy = pOverflowPolicy.Ignore;
  }
}

void 
Abort() : 
{}
{
  <ABORT> AE() 
  {
    pOverflowPolicy = pOverflowPolicy.Abort;
  }
}

void 
Serial() : 
{}
{
  <SERIAL> AE() 
  {
    pExecutionMethod = pExecutionMethod.Serial;
  }
}

void 
Parallel() : 
{}
{
  <PARALLEL> AE() 
  {
    pExecutionMethod = pExecutionMethod.Parallel;
  }
}

void 
BatchSize()
  throws PipelineException : 
{
  int size;
}
{
  <BATCH_SIZE> EQ() size=IntegerLiteral() AE()
  {
    pBatchSize = size;
  }
}

void 
Priority()
  throws PipelineException : 
{
  int p; 
}
{
  <PRIORITY> EQ() p=IntegerLiteral() AE()
  {
    pPriority = p;
  }
}

void 
MaxLoad()
  throws PipelineException : 
{
  double load;
}
{
  <MAX_LOAD> EQ() load=RealLiteral() AE()
  {
    pMaxLoad = (float) load;
  }
}

void 
MinMemory()
  throws PipelineException : 
{
  long size; 
}
{
  <MIN_MEMORY> EQ() size=ByteSize() AE()
  {
    pMinMemory = size; 
  }
}

void 
MinDisk()
  throws PipelineException : 
{
  long size; 
}
{
  <MIN_DISK> EQ() size=ByteSize() AE()
  {
    pMinDisk = size; 
  }
}

void
LicenseKey() : 
{
  String kname; 
  Boolean add = true;
}
{
  <LICENSE_KEY2> EQ() kname=KeyName() (COLON() add=BooleanLiteral())? AE()
  {
    pLicenseKeys.put(kname, add);
  }
}

void
SelectionKey() : 
{
  String kname; 
  Boolean add = true;
}
{
  <SELECTION_KEY2> EQ() kname=KeyName() (COLON() add=BooleanLiteral())? AE()
  {
    pSelectionKeys.put(kname, add);
  }
}

void 
RemoveFiles() : 
{}
{
  <REMOVE_FILES> AE() 
  {
    pRemoveFiles = true;
  }
}

void 
RenameFiles() : 
{}
{
  <RENAME_FILES> AE() 
  {
    pRenameFiles = true;
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

boolean 
BooleanLiteral() :
{
  boolean tf;
}
{
  (tf=True() | tf=False())
  {
    return tf;
  }
}

boolean
True() : 
{}
{
  <TRUE>
  {
    return true;
  }
}

boolean
False() : 
{}
{
  <FALSE>
  {
    return false;
  }
}

String
Name() : 
{
  Token t;
}
{
  t=<USER_NAME>
  {
    return t.image;
  }
}

String
HostName() : 
{
  Token t;
}
{
  t=<HOST_NAME>
  {
    return t.image;
  }
}

String
UserName() : 
{
  Token t;
}
{
  t=<USER_NAME>
  {
    return t.image;
  }
}

String
ToolsetName() : 
{
  Token t;
}
{
  t=<TOOLSET_NAME>
  {
    return t.image;
  }
}

String
KeyName() : 
{
  Token t;
}
{
  (t=<KEY_NAME1> | t=<KEY_NAME2>)
  {
    return t.image;
  }
}

String
KeyBiasName() : 
{
  Token t;
}
{
  t=<KEY_BIAS_NAME>
  {
    return t.image;
  }
}

String
Prefix() : 
{
  Token t;
}
{
  t=<PREFIX> 
  {
    return t.image;
  }
}

String
Suffix() : 
{
  Token t;
}
{
  (t=<SUFFIX1> | t=<SUFFIX2>)
  {
    return t.image;
  }
}

String
EditorName() : 
{
  Token t;
}
{
  t=<EDITOR_NAME>
  {
    return t.image;
  }
}

String
ActionName() : 
{
  Token t;
}
{
  t=<ACTION_NAME>
  {
    return t.image;
  }
}

String
ViewName() : 
{
  Token t;
}
{
  t=<VIEW_NAME>
  {
    return t.image;
  }
}

String
NodeName() : 
{
  Token t;
}
{
  t=<NODE_NAME> 
  {
    return t.image;
  }
}

String
LinkName() : 
{
  Token t;
}
{
  t=<LINK_NAME> 
  {
    return t.image;
  }
}

String
ParamName() : 
{
  Token t;
}
{
  t=<PARAM_NAME> 
  {
    return t.image;
  }
}

String
ParamValue() : 
{
  Token t;
}
{
  t=<PARAM_VALUE> 
  {
    return t.image;
  }
}

String
SourceName() : 
{
  Token t;
}
{
  t=<SOURCE_NAME> 
  {
    return t.image;
  }
}

int
IntegerLiteral()
  throws PipelineException :
{
  Token t;
}
{
  t=<INTEGER>
  { 
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

int
FrameNumber()
  throws PipelineException :
{
  Token t;
}
{
  t=<FRAME_NUMBER>
  { 
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

long 
ByteSize()
  throws PipelineException : 
{
  Token t; 
  long scale = 1L;
}
{
  t=<BYTE_SIZE> (scale=Kilo() | scale=Mega() | scale=Giga())?
  {
    try {
      return Long.parseLong(t.image) * scale;
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

long 
Kilo() :
{}
{
  <KILO> 
  {
    return 1024L;
  }
}

long 
Mega() :
{}
{
  <MEGA> 
  {
    return 1048576L;
  }
}

long 
Giga() :
{}
{
  <GIGA> 
  {
    return 1073741824L;
  }
}


double
RealLiteral()
  throws PipelineException :
{
  Token t;
}
{
  t=<REAL>
  { 
    try {
      return Double.parseDouble(t.image);
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

String
StringLiteral() : 
{
  Token t;
}
{
  t=<STRING>
  { 
    if(t.image.length() > 0) 
      return t.image;
    return null;
  }
}

int
PortNumber()
  throws PipelineException :
{
  Token t;
}
{
  t=<PORT_NUMBER>
  { 
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

int
KeyBias() 
  throws PipelineException : 
{
  Token t;
}
{
  t=<KEY_BIAS>
  { 
    try {
      return Integer.parseInt(t.image);
    }
    catch(NumberFormatException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}

VersionID
RevisionNumber() 
  throws PipelineException : 
{
  Token t; 
}
{
  t=<REVISION_NUMBER> 
  {
    try {
      return new VersionID(t.image);
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException(ex.getMessage());
    }
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S E P A R A T O R   T O K E N S                                                        */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1>  | t=<AE2>  | t=<AE3>  | t=<AE4>  | t=<AE5>  | 
   t=<AE6>  | t=<AE7>  | t=<AE8>  | t=<AE9>  | t=<AE10> | 
   t=<AE11> | t=<AE12> | t=<AE13> | t=<AE14> | t=<AE15> | 
   t=<AE16> | t=<AE17> | t=<AE18> | t=<AE19> | t=<AE20> | 
   t=<AE21> | t=<AE22> | t=<AE23> | t=<AE24> | t=<AE25> | 
   t=<AE26> | t=<AE27> | t=<AE28> | t=<AE29> | t=<AE30> |
   t=<AE31> | t=<AE32> | t=<AE33> | t=<AE34> | t=<AE35>)
  { 
    return t; 
  }
}

Token
DOT() :
{
  Token t;
}
{
  (t=<DOT1> | t=<DOT2>)
  { 
    return t; 
  }
}

Token
DASH() :
{
  Token t;
}
{
  (t=<DASH1> | t=<DASH2> | t=<DASH3>)
  { 
    return t; 
  }
}

Token
COLON() :
{
  Token t;
}
{
  (t=<COLON1> | t=<COLON2> | t=<COLON3> | t=<COLON4> | t=<COLON5> | 
   t=<COLON6>)
  { 
    return t; 
  }
}

Token
COMMA() :
{
  Token t;
}
{
  (t=<COMMA1> | t=<COMMA2> | t=<COMMA3> | t=<COMMA4> | t=<COMMA5> | 
   t=<COMMA6> | t=<COMMA7> | t=<COMMA8> | t=<COMMA9> | t=<COMMA10>)
  { 
    return t; 
  }
}

Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1>  | t=<EQ2>  | t=<EQ3>  | t=<EQ4>  | t=<EQ5>  | 
   t=<EQ6>  | t=<EQ7>  | t=<EQ8>  | t=<EQ9>  | t=<EQ10> | 
   t=<EQ11> | t=<EQ12> | t=<EQ13> | t=<EQ14> | t=<EQ15> |
   t=<EQ16> | t=<EQ17> | t=<EQ18> | t=<EQ19> | t=<EQ20> | 
   t=<EQ21> | t=<EQ22> | t=<EQ23> | t=<EQ24> | t=<EQ25> |
   t=<EQ26> | t=<EQ27> | t=<EQ28> | t=<EQ29> | t=<EQ30>)
  { 
    return t; 
  }
}

