options {
  STATIC = false;
}

PARSER_BEGIN(MasterOptsParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;

import java.util.*;
import java.text.*;
import java.io.*;

/*------------------------------------------------------------------------------------------*/
/*   M A S T E R   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plmaster(1) daemon.                                                */
/*------------------------------------------------------------------------------------------*/

class 
MasterOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   MasterApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  private void 
  init()
  {
    Runtime rt = Runtime.getRuntime();
    double maxMemory = (double) rt.maxMemory();
    pMinOverhead = (long) (maxMemory * 0.2);
    pMaxOverhead = (long) (maxMemory * 0.3);

    pLogBackups = 10;
  }
 


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private MasterApp  pApp;

  /**
   * Whether to rebuild cache files and ignore existing lock files.
   */ 
  private boolean  pRebuildCache; 

  /**
   * Whether to keep the offlined versions cache file after startup and reread instead of 
   * rebuilding it during a database rebuild.
   */
  private boolean  pPreserveOfflinedCache; 

  /**
   * Whether the file manager should be run as a thread of plmaster(1).
   */ 
  private boolean  pInternalFileMgr; 


  /**
   * The minimum time a cycle of the node cache garbage collector loop should 
   * take (in milliseconds).
   */ 
  private long  pNodeGCInterval = 300000L;  /* 5-minutes */ 

  /**
   * The minimum amount of memory overhead to maintain at all times.  The maximum amount of 
   * memory overhead required to be available after a node garbage collection.
   */ 
  private long  pMinOverhead;
  private long  pMaxOverhead;

  /**
   * The estimated memory size of a node version (in bytes).
   */ 
  private long  pAvgNodeSize = 4000L;

  /**
   * The maximum age of a resolved (Restored or Denied) restore request before it 
   * is deleted (in milliseconds).
   */ 
  private long  pRestoreCleanupInterval = 172800000L;  /* 48-hours */ 



  /*----------------------------------------------------------------------------------------*/

  /**
   * Whether non-information commands have been given.
   */   
  private boolean  pHasCommands; 

  /**
   * The name of the log file.
   */ 
  private Path pLogFile; 

  /**
   * The number of backup to maintain of the log file.
   */ 
  private int  pLogBackups;

}


PARSER_END(MasterOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */	
| <REBUILD:           "--rebuild"> 
| <PRESERVE_OFFLINED: "--preserve-offlined"> 
| <FILE_MGR:          "--file-mgr">   
| <LOG_FILE:          "--log-file">                : PATH_SEP
| <STANDARD_LOG_FILE: "--standard-log-file"> 
| <LOG_BACKUPS:       "--log-backups">             : INTEGER_SEP
| <LOG:               "--log">                     : LOG_SEP

  /* performance tuning options */ 
| <RESTORE_CLEANUP_INTERVAL:  "--restore-cleanup-interval">  : INTEGER_SEP
| <NODE_GC_INTERVAL:          "--node-gc-interval">          : INTEGER_SEP
| <MIN_OVERHEAD:              "--min-overhead">              : INTEGER_SEP  
| <MAX_OVERHEAD:              "--max-overhead">              : INTEGER_SEP  
| <AVG_NODE_SIZE:             "--avg-node-size">             : INTEGER_SEP  

  /* seperators */ 
| <AE1: (["\0"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: ["\0"]>      : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>  : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}



/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ3:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9","-"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9","-"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: ["\0"]>                                      : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~["\0"])+>                                  : IGNORE_STATE
}


/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ4:               "=">   : LOG_TYPE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_TYPE> 
TOKEN :
{
  <LOG_ALL:          "all">       
| <LOG_ARG: 	     "arg">      
| <LOG_GLU: 	     "glu">        
| <LOG_OPS: 	     "ops">     
| <LOG_MEM: 	     "mem">      
| <LOG_NET: 	     "net">     
| <LOG_PLG: 	     "plg">    
| <LOG_SUB: 	     "sub">    
| <LOG_EXT: 	     "ext">    
| <LOG_TIM: 	     "tim">    
| <COLON:  	     ":">        : LOG_LEVEL  
| <ILLEGAL_LOG_TYPE: (~[":"])+>  : IGNORE_STATE    
}

<LOG_LEVEL> 
TOKEN : 
{
  <SEVERE:  	      "severe">  
| <WARNING: 	      "warning"> 
| <INFO:    	      "info">    
| <FINE:    	      "fine">    
| <FINER :  	      "finer">   
| <FINEST:    	      "finest">  
| <COMMA:  	      ",">             : LOG_TYPE
| <AE2:               (["\0"])+>       : DEFAULT
| <ILLEGAL_LOG_LEVEL: (~["\0",","])+>  : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

MasterMgrServer
CommandLine() 
  throws PipelineException :
{
  init();
}
{
  (InformationOpts() | Commands()) <EOF>
  {
    if(pHasCommands) {    
      /* setup the log files */ 
      if(pLogFile != null) {
        try {
          LogMgr.getInstance().logToFile(pLogFile, pLogBackups, 10485760L);
        }
        catch(Exception ex) {
          System.out.print("Unable to setup log file: " + ex.getMessage());
          System.exit(1);
        }
      }
      
      if(pInternalFileMgr && (!PackageInfo.sFileServer.equals(PackageInfo.sMasterServer)))
        throw new PipelineException 
          ("The --file-mgr option cannot be used if the file manager host " + 
           "(" + PackageInfo.sFileServer + ") is not identical to the master manager " + 
           "host (" + PackageInfo.sMasterServer + ")!");

      /* create the server */ 
      return new MasterMgrServer(pApp, pRebuildCache, pPreserveOfflinedCache, 
                                 pInternalFileMgr, pAvgNodeSize, pMinOverhead, pMaxOverhead, 
                                 pNodeGCInterval, pRestoreCleanupInterval);
    }

    return null;
  }
}


void
Commands() 
  throws PipelineException :
{}
{
  (GlobalOpts() AE())*
  { 
    pHasCommands = true;
  }
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts() 
  throws PipelineException : 
{}
{
  (Rebuild() | PreserveOfflined() | FileMgr() |
   Log() | LogFile() | StandardLogFile() | LogBackups() |
   NodeGCInterval() | MinOverhead() | MaxOverhead() | AvgNodeSize() |
   RestoreCleanupInterval())
  {}
}

void Rebuild() : 
{}
{
  <REBUILD>
  { 
    pRebuildCache = true; 
  }
}

void PreserveOfflined() : 
{}
{
  <PRESERVE_OFFLINED>
  { 
    pPreserveOfflinedCache = true; 
  }
}

void FileMgr() : 
{}
{
  <FILE_MGR>
  { 
    pInternalFileMgr = true; 
  }
}


void LogFile() : 
{
  Token t;
}
{
  <LOG_FILE> EQ() t=<PATH_ARG>
  { 
    pLogFile = new Path(t.image);
  }
}

void StandardLogFile() : 
{}
{
  <STANDARD_LOG_FILE>
  { 
    pLogFile = new Path(PackageInfo.sInstPath, "/logs/plmaster.log");
  }
}

void LogBackups() : 
{
  Token t;
}
{
  <LOG_BACKUPS> EQ() t=<INTEGER>
  { 
    pLogBackups = Integer.parseInt(t.image);
  }
}

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}

void LoggerAll() : 
{
  LogMgr.Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevels(v);
  }
}

void LoggerPair() : 
{
  LogMgr.Kind k;
  LogMgr.Level v;
}
{
  (k=LogKind() <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevel(k, v);
  }
}

LogMgr.Kind LogKind() : 
{
  LogMgr.Kind g;
}
{
  (g=ArgKind() | g=OpsKind() | g=MemKind() | g=NetKind() | 
   g=SubKind() | g=PlgKind() | g=GluKind() | g=ExtKind() | 
   g=TimKind())
  {
    return g;
  }
}

LogMgr.Kind ArgKind() : 
{}
{
  <LOG_ARG>
  {
    return LogMgr.Kind.Arg;
  }
}

LogMgr.Kind OpsKind() : 
{}
{
  <LOG_OPS>
  {
    return LogMgr.Kind.Ops;
  }
}

LogMgr.Kind MemKind() : 
{}
{
  <LOG_MEM>
  {
    return LogMgr.Kind.Mem;
  }
}

LogMgr.Kind NetKind() : 
{}
{
  <LOG_NET>
  {
    return LogMgr.Kind.Net;
  }
}

LogMgr.Kind SubKind() : 
{}
{
  <LOG_SUB>
  {
    return LogMgr.Kind.Sub;
  }
}

LogMgr.Kind PlgKind() : 
{}
{
  <LOG_PLG>
  {
    return LogMgr.Kind.Plg;
  }
}

LogMgr.Kind GluKind() : 
{}
{
  <LOG_GLU>
  {
    return LogMgr.Kind.Glu;
  }
}

LogMgr.Kind ExtKind() : 
{}
{
  <LOG_EXT>
  {
    return LogMgr.Kind.Ext;
  }
}

LogMgr.Kind TimKind() : 
{}
{
  <LOG_TIM>
  {
    return LogMgr.Kind.Tim;
  }
}




LogMgr.Level LogLevel() : 
{
  LogMgr.Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

LogMgr.Level SevereLevel() :
{
  LogMgr.Level v;
}
{
  <SEVERE> 
  {
    return LogMgr.Level.Severe;
  }
}

LogMgr.Level WarningLevel() :
{
  LogMgr.Level v;
}
{
  <WARNING> 
  {
    return LogMgr.Level.Warning;
  }
}

LogMgr.Level InfoLevel() :
{
  LogMgr.Level v;
}
{
  <INFO> 
  {
    return LogMgr.Level.Info;
  }
}

LogMgr.Level FineLevel() :
{
  LogMgr.Level v;
}
{
  <FINE> 
  {
    return LogMgr.Level.Fine;
  }
}

LogMgr.Level FinerLevel() :
{
  LogMgr.Level v;
}
{
  <FINER> 
  {
    return LogMgr.Level.Finer;
  }
}

LogMgr.Level FinestLevel() :
{
  LogMgr.Level v;
}
{
  <FINEST> 
  {
    return LogMgr.Level.Finest;
  }
}


/*------------------------------------------------------------------------------------------*/

void NodeGCInterval()
  throws PipelineException : 
{
  Token t;
}
{
  <NODE_GC_INTERVAL> EQ() t=<INTEGER>
  {
    Long msec = Long.parseLong(t.image);
    if(msec <= 0) 
      throw new PipelineException
        ("The node garbage collection interval (" + msec + ") must be positive!");
    pNodeGCInterval = msec;
  }
}

void MinOverhead()
  throws PipelineException : 
{
  Token t;
}
{
  <MIN_OVERHEAD> EQ() t=<INTEGER>
  {
    Long size = Long.parseLong(t.image);
    if(size <= 0) 
      throw new PipelineException
        ("The minimum overhead (" + size + ") must be positive!");
    pMinOverhead = size;
  }
}

void MaxOverhead()
  throws PipelineException : 
{
  Token t;
}
{
  <MAX_OVERHEAD> EQ() t=<INTEGER>
  {
    Long size = Long.parseLong(t.image);
    if(size <= 0) 
      throw new PipelineException
        ("The maximum overhead (" + size + ") must be positive!");
    pMaxOverhead = size;
  }
}

void AvgNodeSize()
  throws PipelineException : 
{
  Token t;
}
{
  <AVG_NODE_SIZE> EQ() t=<INTEGER>
  {
    Long size = Long.parseLong(t.image);
    if(size <= 0) 
      throw new PipelineException
        ("The average node size (" + size + ") must be positive!");
    pAvgNodeSize = size;
  }
}


void RestoreCleanupInterval()
  throws PipelineException : 
{
  Token t;
}
{
  <RESTORE_CLEANUP_INTERVAL> EQ() t=<INTEGER>
  {
    Long msec = Long.parseLong(t.image);
    if(msec <= 0) 
      throw new PipelineException
        ("The restore cleanup interval (" + msec + ") must be positive!");
    pRestoreCleanupInterval = msec;
  }
}


/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4>)
  { 
    return t; 
  }
}
