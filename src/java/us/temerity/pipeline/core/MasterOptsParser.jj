options {
  STATIC = false;
}

PARSER_BEGIN(MasterOptsParser)

package us.temerity.pipeline.core;

import us.temerity.pipeline.*;

import java.util.*;
import java.text.*;
import java.io.*;
import java.util.logging.*;

/*------------------------------------------------------------------------------------------*/
/*   M A S T E R   O P T S   P A R S E R                                                    */
/*                                                                                          */
/*    The parser for the plmaster(1) daemon.                                                */
/*------------------------------------------------------------------------------------------*/

public class 
MasterOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  /** 
   * Set the application instance. 
   */ 
  public void 
  setApp
  (
   MasterApp app  
  ) 
  {
    if(app == null) 
      throw new IllegalArgumentException("The application cannot be (null)!");
    pApp = app;
  }


  /*----------------------------------------------------------------------------------------*/
  /*   H E L P E R S                                                                        */
  /*----------------------------------------------------------------------------------------*/

  private void 
  init()
  {
    pLogBackups  = 10;

    pNodeDir     = PackageInfo.sNodeDir;
    pMasterPort  = PackageInfo.sMasterPort;
    
    pProdDir     = PackageInfo.sProdDir;
    pFileServer  = PackageInfo.sFileServer;
    pFilePort    = PackageInfo.sFilePort;

    pQueueServer = PackageInfo.sQueueServer; 
    pQueuePort   = PackageInfo.sQueuePort;
  }
 


  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The application instance. 
   */
  private MasterApp  pApp;

  
  /*----------------------------------------------------------------------------------------*/

  /**
   * The name of the log file.
   */ 
  private String  pLogFile; 

  /**
   * The number of backup to maintain of the log file.
   */ 
  private int  pLogBackups;


  /*----------------------------------------------------------------------------------------*/

  /**
   * The root directory of the of the persistent node storage area.
   */ 
  private File pNodeDir;

  /**
   * The network port to monitor for incoming connections.
   */
  private int  pMasterPort;
  
  
  /*----------------------------------------------------------------------------------------*/

  /**
   * The root directory of the file repository. 
   */ 
  private File pProdDir;

  /*
   * The name of the host running the <B>plfilemgr</B><A>(1) daemon. 
   */
  private String  pFileServer;

  /**
   * The network port listened to by the <B>plfilemgr</B><A>(1) daemon.
   */
  private int  pFilePort;


  /*----------------------------------------------------------------------------------------*/

  /*
   * The name of the host running the <B>plqueuemgr</B><A>(1) daemon. 
   */
  private String  pQueueServer;

  /**
   * The network port listened to by the <B>plqueuemgr</B><A>(1) daemon.
   */
  private int  pQueuePort;
}


PARSER_END(MasterOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:         "--help">         
| <HTML_HELP:    "--html-help">    
| <VERSION:      "--version">      
| <RELEASE_DATE: "--release-date"> 
| <COPYRIGHT:    "--copyright">    
| <LICENSE:      "--license">    

  /* global options */	
| <NODE_DIR:     "--node-dir">      : PATH_SEP
| <MASTER_PORT:  "--master-port">   : INTEGER_SEP

| <PROD_DIR:             "--prod-dir">             : PATH_SEP
| <FILE_HOST:            "--file-host">            : HOSTNAME_SEP
| <FILE_PORT:            "--file-port">            : INTEGER_SEP

| <QUEUE_HOST:           "--queue-host">           : HOSTNAME_SEP
| <QUEUE_PORT:           "--queue-port">           : INTEGER_SEP

| <LOG_FILE:          "--log-file">                : PATH_SEP
| <STANDARD_LOG_FILE: "--standard-log-file"> 
| <LOG_BACKUPS:       "--log-backups">             : INTEGER_SEP
| <LOG:               "--log">                     : LOG_SEP


  /* seperators */ 
| <AE1: (["\0"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:  "-" ("-")? (~["\0","="])*>  : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>     : IGNORE_STATE
}


/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}


/* integer arguments */ 
<INTEGER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : INTEGER_STATE
| <MISSING_INTEGER_ARG: ~["="]>  : IGNORE_STATE
}

<INTEGER_STATE> 
TOKEN :
{
  <INTEGER:         (["0"-"9"])+>    : DEFAULT
| <MISSING_INTEGER: ["\0"]>      : IGNORE_STATE
| <ILLEGAL_INTEGER: (~["\0"])+>  : IGNORE_STATE
}


/* filesystem path arguments */ 
<PATH_SEP> 
TOKEN :
{
  <EQ2:                "=">   : PATH_STATE
| <MISSING_PATH_ARG: ~["="]>  : IGNORE_STATE
}

<PATH_STATE> 
TOKEN :
{
  <PATH_ARG:       ("/")* ("../")* <PATH_ARG_COMP> 
		     ("/" (".." | (<PATH_ARG_COMP>)+)?)*>      : DEFAULT
| <#PATH_ARG_COMP: (["a"-"z","A"-"Z","0"-"9","_","-","."])*>
| <MISSING_PATH:   ["\0"]>                                     : IGNORE_STATE
| <ILLEGAL_PATH:   (~["\0"])+>                                 : IGNORE_STATE
}



/* hostname arguments */ 
<HOSTNAME_SEP> 
TOKEN :
{
  <EQ3:                    "=">   : HOSTNAME_STATE
| <MISSING_HOSTNAME_ARG: ~["="]>  : IGNORE_STATE
}

<HOSTNAME_STATE> 
TOKEN :
{
  <HOSTNAME:         ((["a"-"z","A"-"Z","0"-"9","-"])+ 
		      ("." (["a"-"z","A"-"Z","0"-"9","-"])+)*)>   : DEFAULT
| <MISSING_HOSTNAME: ["\0"]>                                      : IGNORE_STATE
| <ILLEGAL_HOSTNAME: (~["\0"])+>                                  : IGNORE_STATE
}


/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ4:               "=">   : LOG_TYPE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_TYPE> 
TOKEN :
{
  <LOG_ALL:          "all">       
| <LOG_ARG: 	     "arg">      
| <LOG_GLU: 	     "glu">        
| <LOG_OPS: 	     "ops">     
| <LOG_NET: 	     "net">     
| <LOG_PLG: 	     "plg">    
| <LOG_SUB: 	     "sub">    
| <COLON:  	     ":">        : LOG_LEVEL  
| <ILLEGAL_LOG_TYPE: (~[":"])+>  : IGNORE_STATE    
}

<LOG_LEVEL> 
TOKEN : 
{
  <SEVERE:  	      "severe">  
| <WARNING: 	      "warning"> 
| <INFO:    	      "info">    
| <FINE:    	      "fine">    
| <FINER :  	      "finer">   
| <FINEST:    	      "finest">  
| <COMMA:  	      ",">             : LOG_TYPE
| <AE2:               (["\0"])+>       : DEFAULT
| <ILLEGAL_LOG_LEVEL: (~["\0",","])+>  : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

MasterMgrServer
CommandLine() 
  throws PipelineException :
{
  MasterMgrServer s = null;
}
{
  (InformationOpts() | s=Commands()) <EOF>
  {
    return s;
  }
}


MasterMgrServer
Commands() 
  throws PipelineException :
{
  init();
}
{
  (GlobalOpts() AE())*
  { 
    /* setup the log files */ 
    if(pLogFile != null) {
      try {
	Logs.fileHandler(pLogFile, pLogBackups);
      }
      catch(Exception ex) {
	System.out.print("Unable to setup log file: " + ex.getMessage());
	System.exit(1);
      }
    }

    /* create the server */ 
    return (new MasterMgrServer(pNodeDir, pMasterPort, 
				pProdDir, pFileServer, pFilePort, 
				pQueueServer, pQueuePort));
  }
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright() | License())
  {}
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}

void
License() :
{}
{
  <LICENSE> AE() 
  { 
    pApp.license(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts() :
{}
{
  (NodeDir() | MasterPort() | 
   ProdDir() | FileHost() | FilePort() | QueueHost() | QueuePort() | 
   Log() | LogFile() | StandardLogFile() | LogBackups())
  {}
}


void
NodeDir() :
{
  Token t;
}
{
  <NODE_DIR> EQ() t=<PATH_ARG>
  { 
    pNodeDir = new File(t.image);
  }
}

void
MasterPort() :
{
  Token t;
}
{
  <MASTER_PORT> EQ() t=<INTEGER>
  { 
    pMasterPort = Integer.parseInt(t.image);
  }
}



void
ProdDir() :
{
  Token t;
}
{
  <PROD_DIR> EQ() t=<PATH_ARG>
  { 
    pProdDir = new File(t.image);
  }
}

void
FileHost() :
{
  Token t;
}
{
  <FILE_HOST> EQ() t=<HOSTNAME>
  { 
    pFileServer = t.image;
  }
}

void
FilePort() :
{
  Token t;
}
{
  <FILE_PORT> EQ() t=<INTEGER>
  { 
    pFilePort = Integer.parseInt(t.image);
  }
}


void
QueueHost() :
{
  Token t;
}
{
  <QUEUE_HOST> EQ() t=<HOSTNAME>
  { 
    pQueueServer = t.image;
  }
}

void
QueuePort() :
{
  Token t;
}
{
  <QUEUE_PORT> EQ() t=<INTEGER>
  { 
    pQueuePort = Integer.parseInt(t.image);
  }
}


void LogFile() : 
{
  Token t;
}
{
  <LOG_FILE> EQ() t=<PATH_ARG>
  { 
    pLogFile = t.image;
  }
}

void StandardLogFile() : 
{}
{
  <STANDARD_LOG_FILE>
  { 
    pLogFile = (PackageInfo.sInstDir + "/logs/plmaster.log");
  }
}

void LogBackups() : 
{
  Token t;
}
{
  <LOG_BACKUPS> EQ() t=<INTEGER>
  { 
    pLogBackups = Integer.parseInt(t.image);
  }
}

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}

void LoggerAll() : 
{
  Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    Logs.arg.setLevel(v); 
    Logs.glu.setLevel(v);
    Logs.ops.setLevel(v);
    Logs.net.setLevel(v);
    Logs.plg.setLevel(v);
    Logs.sub.setLevel(v);
  }
}

void LoggerPair() : 
{
  Logger g; 
  Level v;
}
{
  (g=Logger() <COLON> v=LogLevel())
  {
    g.setLevel(v);
  }
}

Logger Logger() :
{
  Logger g;
}
{
  (g=ArgLogger() | g=GluLogger() | g=OpsLogger() | g=NetLogger() | 
   g=PlgLogger() | g=SubLogger())
  {
    return g;
  }
}

Logger ArgLogger() : 
{}
{
  <LOG_ARG>
  {
    return Logs.arg;
  }
}

Logger GluLogger() : 
{}
{
  <LOG_GLU>
  {
    return Logs.glu;
  }
}

Logger OpsLogger() : 
{}
{
  <LOG_OPS>
  {
    return Logs.ops;
  }
}

Logger NetLogger() : 
{}
{
  <LOG_NET>
  {
    return Logs.net;
  }
}

Logger PlgLogger() : 
{}
{
  <LOG_PLG>
  {
    return Logs.plg;
  }
}

Logger SubLogger() : 
{}
{
  <LOG_SUB>
  {
    return Logs.sub;
  }
}


Level LogLevel() : 
{
  Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

Level SevereLevel() :
{
  Level v;
}
{
  <SEVERE> 
  {
    return Level.SEVERE;
  }
}

Level WarningLevel() :
{
  Level v;
}
{
  <WARNING> 
  {
    return Level.WARNING;
  }
}

Level InfoLevel() :
{
  Level v;
}
{
  <INFO> 
  {
    return Level.INFO;
  }
}

Level FineLevel() :
{
  Level v;
}
{
  <FINE> 
  {
    return Level.FINE;
  }
}

Level FinerLevel() :
{
  Level v;
}
{
  <FINER> 
  {
    return Level.FINER;
  }
}

Level FinestLevel() :
{
  Level v;
}
{
  <FINEST> 
  {
    return Level.FINEST;
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2>)
  { 
    return t; 
  }
}


Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t=<EQ4>)
  { 
    return t; 
  }
}
