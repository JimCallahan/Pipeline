options {
  STATIC = false;
}

PARSER_BEGIN(BuilderOptsParser)

package us.temerity.pipeline.core;

import java.util.*;
import java.util.logging.*;
import java.text.*;
import java.io.*;
import java.net.*;
import us.temerity.pipeline.*;
import us.temerity.pipeline.builder.*;

/*------------------------------------------------------------------------------------------*/
/*   B U I L D E R   O P T S   P A R S E R                                                  */
/*                                                                                          */
/*    The parser for builder tools.                                                         */
/*------------------------------------------------------------------------------------------*/

public class 
BuilderOptsParser
{
  /*----------------------------------------------------------------------------------------*/
  /*   A C C E S S                                                                          */
  /*----------------------------------------------------------------------------------------*/

  public void
  setApp
  (
    BuilderApp app
  )
  {
    if(app == null) 
      throw new IllegalArgumentException("The app cannot be (null)!");
    pApp = app;
  }



  /*----------------------------------------------------------------------------------------*/
  /*   I N T E R N A L S                                                                    */
  /*----------------------------------------------------------------------------------------*/

  /**
   * The app instance
   */
  private BuilderApp pApp;
    
  private String pCurrentBuilderName = null;
  private String pCollectionName = null;
  private VersionID pVersionID = null;
  private String pVendor = null;
  private String pBuilderName = null;
}
  
PARSER_END(BuilderOptsParser)

<DEFAULT> 
TOKEN :
{       
  /* information options */ 
  <HELP:           "--help">         		    
| <HTML_HELP:      "--html-help">    		    
| <VERSION:        "--version">      		    
| <RELEASE_DATE:   "--release-date"> 		    
| <COPYRIGHT:      "--copyright">

  /* global options */
| <BATCH:	       "--batch">
| <ABORT:          "--abort">
| <BUILDER:    	   "--builder">      : BUILDER_SEP
| <LOG:            "--log">          : LOG_SEP
| <COLLECTION:     "--collection">   : COLLECTION_SEP
| <REVISION:       "--versionid">    : REVISION_SEP
| <VENDOR:         "--vendor">       : VENDOR_SEP
| <BUILDERNAME:    "--builder-name"> : BUILDERNAME_SEP
| <PARAM:          "--">             : PARAM_NAME_STATE


  /* separators */ 
| <AE1: (["\0"])+> 

  /* errors */ 
| <UNKNOWN_OPTION:    "-" (~["-"])*> : IGNORE_STATE
| <UNKNOWN_COMMAND: ~["-","\0"] (~["\0"])*>      : IGNORE_STATE
}

/* common states */ 
<IGNORE_STATE> 
TOKEN :
{
  <IGNORED: (~[])+>
}

/* collection */ 
<COLLECTION_SEP> 
TOKEN :
{
  <EQ8:                   "=">      : COLLECTION_NAME_STATE
| <MISSING_COLLECTION_SEP: ~["="]>  : IGNORE_STATE
}

<COLLECTION_NAME_STATE> 
TOKEN :
{
  <COLLECTION_NAME:           (["a"-"z","A"-"Z"]) 
	                          (["a"-"z","A"-"Z","0"-"9","_","-"])+> : DEFAULT
| <MISSING_COLLECTION_NAME:    ["\0"]>        			 : IGNORE_STATE
| <ILLEGAL_COLLECTION_NAME:  (~["\0"])+>    	       		 : IGNORE_STATE
}

/* version */ 
<REVISION_SEP> 
TOKEN :
{
  <EQ5:                   "=">    : REVISION_NAME_STATE
| <MISSING_REVISION_SEP: ~["="]>  : IGNORE_STATE
}

<REVISION_NAME_STATE> 
TOKEN :
{
  <REVISION_NUMBER:            (<IREVNUM> "." <REVNUM> "." <REVNUM>)> : DEFAULT
| <#IREVNUM:                   ["1"-"9"] (["0"-"9"])*>
| <#REVNUM:                    (["0"-"9"])+>
| <MISSING_REVISION_NAME:       ["\0"]>                    : IGNORE_STATE
| <ILLEGAL_REVISION_NAME:    (~["\0"])+>                   : IGNORE_STATE
}

/* vendor */ 
<VENDOR_SEP> 
TOKEN :
{
  <EQ6:                   "=">      : VENDOR_NAME_STATE
| <MISSING_VENDOR_SEP: ~["="]>  : IGNORE_STATE
}

<VENDOR_NAME_STATE> 
TOKEN :
{
  <VENDOR_NAME:           (["a"-"z","A"-"Z"]) 
	                          (["a"-"z","A"-"Z","0"-"9","_","-"])+> : DEFAULT
| <MISSING_VENDOR_NAME:    ["\0"]>        			 : IGNORE_STATE
| <ILLEGAL_VENDOR_NAME:  (~["\0"])+>    	       		 : IGNORE_STATE
}

/* builder name */ 
<BUILDERNAME_SEP> 
TOKEN :
{
  <EQ7:                   "=">      : BUILDERNAME_NAME_STATE
| <MISSING_BUILDERNAME_SEP: ~["="]>  : IGNORE_STATE
}

<BUILDERNAME_NAME_STATE> 
TOKEN :
{
  <BUILDERNAME_NAME:           (["a"-"z","A"-"Z","0"-"9"])+> : DEFAULT
| <MISSING_BUILDERNAME_NAME:    ["\0"]>        			 : IGNORE_STATE
| <ILLEGAL_BUILDERNAME_NAME:  (~["\0"])+>    	       		 : IGNORE_STATE
}


/* builder */ 
<BUILDER_SEP> 
TOKEN :
{
  <EQ1:                   "=">   : BUILDER_NAME_STATE
| <MISSING_BUILDER_SEP: ~["="]>  : IGNORE_STATE
}

<BUILDER_NAME_STATE> 
TOKEN :
{
  <BUILDER_NAME:           (["a"-"z","A"-"Z","0"-"9","-","_"])+> : DEFAULT
| <MISSING_BUILDER_NAME:    ["\0"]>        			 : IGNORE_STATE
| <ILLEGAL_BUILDER_NAME:  (~["\0"])+>    	       		 : IGNORE_STATE
}

/* parameter */
<PARAM_NAME_STATE>
TOKEN:
{
  <PARAM_NAME:          (["a"-"z","A"-"Z","0"-"9","_"])+>
| <KEY_SEP1:              "-">                                : KEY_STATE
| <EQ2:                   "=">                                : PARAM_VALUE_STATE
| <MISSING_PARAM_NAME:   ["\0"]>        		      : IGNORE_STATE
| <ILLEGAL_PARAM_NAME:  (~["-","=","\0"])+>          	      : IGNORE_STATE
}

<KEY_STATE> 
TOKEN :
{
  <KEY_NAME:           (["a"-"z","A"-"Z","0"-"9","_"])+>
| <KEY_SEP2:             "-">
| <EQ4:                  "=">   	               : PARAM_VALUE_STATE
| <MISSING_KEY_SEP:    ~["="]>                         : IGNORE_STATE
| <ILLEGAL_KEY_STATE: (~["-","=","\0"])+>	       : IGNORE_STATE
}

<PARAM_VALUE_STATE>
TOKEN:
{
  <PARAM_VALUE:   (["a"-"z","A"-"Z","0"-"9","-","_",".",",","/"," ","(",")",":",";","'","!","@","#","$","%","^","&","*","+","=","{","}","|","<",">","?"])+> : DEFAULT
| <MISSING_PARAM_VALUE:   ["\0"]>        				                       : IGNORE_STATE
| <ILLEGAL_PARAM_VALUE: (~["\0"])+>    						                   : IGNORE_STATE
}

/* --log arguments */ 
<LOG_SEP> 
TOKEN :
{
  <EQ3:               "=">   : LOG_TYPE
| <MISSING_LOG_ARG: ~["="]>  : IGNORE_STATE
}

<LOG_TYPE> 
TOKEN :
{
  <LOG_ALL:          "all">       
| <LOG_ARG: 	     "arg">        
| <LOG_OPS: 	     "ops">     
| <LOG_NET: 	     "net">    
| <LOG_PLG: 	     "plg">    
| <LOG_SUB: 	     "sub">     
| <LOG_TEX: 	     "tex">
| <LOG_BLD:	     "bld">      
| <COLON:  	     ":">        : LOG_LEVEL  
| <ILLEGAL_LOG_TYPE: (~[":"])+>  : IGNORE_STATE    
}

<LOG_LEVEL> 
TOKEN : 
{
  <SEVERE:  	      "severe">  
| <WARNING: 	      "warning"> 
| <INFO:    	      "info">    
| <FINE:    	      "fine">    
| <FINER :  	      "finer">   
| <FINEST:    	      "finest">  
| <COMMA:  	      ",">             : LOG_TYPE
| <AE2:               (["\0"])+>       : DEFAULT
| <ILLEGAL_LOG_LEVEL: (~["\0",","])+>  : IGNORE_STATE
}



/*------------------------------------------------------------------------------------------*/
/*   T O P   L E V E L                                                                      */
/*------------------------------------------------------------------------------------------*/

void
CommandLine()
  throws PipelineException :
{}
{
  (InformationOpts() | Commands()) <EOF>
  {}
}


void 
Commands() 
  throws PipelineException :
{}   
{
  (GlobalOpts() AE())*
  {}
}
    


/*------------------------------------------------------------------------------------------*/
/*   I N F O R M A T I O N   O P T I O N S                                                  */
/*------------------------------------------------------------------------------------------*/

void
InformationOpts() :
{}
{
  (Help() | HtmlHelp() | Version() | ReleaseDate() | Copyright())
  {
    System.exit(0);
  }
}

void
Help() : 
{}
{
  <HELP> AE()
  { 
    pApp.help(); 
  }
}

void
HtmlHelp() : 
{}
{
  <HTML_HELP> AE()
  { 
    pApp.htmlHelp(); 
  }
}

void
Version() :
{}
{
  <VERSION> AE()
  { 
    pApp.version(); 
  }
}

void
ReleaseDate() :
{}
{
  <RELEASE_DATE> AE()
  { 
    pApp.releaseDate(); 
  }
}

void
Copyright() :
{}
{
  <COPYRIGHT> AE() 
  { 
    pApp.copyright(); 
  }
}



/*------------------------------------------------------------------------------------------*/
/*   G L O B A L   O P T I O N S                                                            */
/*------------------------------------------------------------------------------------------*/

void
GlobalOpts()
  throws PipelineException :
{}
{
  (CollectionVersion() | CollectionName() | CollectionVendor() | BuilderName() | Log() | 
   Batch() | Abort() | Builder() | Param())
  {}
}

/*------------------------------------------------------------------------------------------*/


void
CollectionName()
  throws PipelineException :
{
  Token t;
}
{
  <COLLECTION> EQ() t=<COLLECTION_NAME>
  {
    pApp.setCollectionName(t.image);
  }
}

void
CollectionVersion()
  throws PipelineException :
{
  Token t;
}
{
  <REVISION> EQ() t=<REVISION_NUMBER>
  {
    pApp.setCollectionVersion(new VersionID(t.image));
  }
}

void
CollectionVendor()
  throws PipelineException :
{
  Token t;
}
{
  <VENDOR> EQ() t=<VENDOR_NAME>
  {
    pApp.setCollectionVendor(t.image);
  }
}

void
BuilderName()
  throws PipelineException :
{
  Token t;
}
{
  <BUILDERNAME> EQ() t=<BUILDERNAME_NAME>
  {
    pApp.setBuilderName(t.image);
  }
}

/*------------------------------------------------------------------------------------------*/

void
Batch() 
  throws PipelineException :
{}
{
  <BATCH> 
  { 
    pApp.setUsingGUI(false);
  }
}

void
Abort() 
  throws PipelineException :
{}
{
  <ABORT> 
  { 
    pApp.setAbortOnBadParam(true);
  }
}

void
Builder()
  throws PipelineException :
{
  Token t;
}
{
  <BUILDER> EQ() t=<BUILDER_NAME>
  {
    pCurrentBuilderName = t.image;
  }
}

void
Param()
  throws PipelineException :
{
  Token t1;
  Token t2;
  LinkedList<String> keys = new LinkedList<String>();
}
{
  <PARAM> t1=<PARAM_NAME> (Key(keys))* EQ() t2=<PARAM_VALUE>
  {
    keys.addFirst(t1.image);
    pApp.setCommandLineParam(pCurrentBuilderName, keys, t2.image);
  }
}

void
Key
(
  LinkedList<String> keys
) :
{
  Token t1;
}
{
  KEYSEP() t1=<KEY_NAME>
  {
    keys.add(t1.image);
  }
}

/*------------------------------------------------------------------------------------------*/

void Log() : 
{}
{
  (<LOG> EQ() LoggerArg() (<COMMA> LoggerArg())*)
  {}
}

void LoggerArg() : 
{}
{
  (LoggerAll() | LoggerPair()) 
  {}
}


void LoggerAll() : 
{
  LogMgr.Level v;
}
{
  (<LOG_ALL> <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevels(v);
  }
}

void LoggerPair() : 
{
  LogMgr.Kind k;
  LogMgr.Level v;
}
{
  (k=LogKind() <COLON> v=LogLevel())
  {
    LogMgr.getInstance().setLevel(k, v);
  }
}

LogMgr.Kind LogKind() : 
{
  LogMgr.Kind g;
}
{
  (g=BldKind() | g=ArgKind() | g=OpsKind() | g=NetKind() | g=SubKind() 
    | g=PlgKind() | g=TexKind())
  {
    return g;
  }
}

LogMgr.Kind BldKind() :
{}
{
  <LOG_BLD>
  {
    return LogMgr.Kind.Bld;
  }
}

LogMgr.Kind ArgKind() : 
{}
{
  <LOG_ARG>
  {
    return LogMgr.Kind.Arg;
  }
}

LogMgr.Kind OpsKind() : 
{}
{
  <LOG_OPS>
  {
    return LogMgr.Kind.Ops;
  }
}

LogMgr.Kind NetKind() : 
{}
{
  <LOG_NET>
  {
    return LogMgr.Kind.Net;
  }
}

LogMgr.Kind SubKind() : 
{}
{
  <LOG_SUB>
  {
    return LogMgr.Kind.Sub;
  }
}

LogMgr.Kind PlgKind() : 
{}
{
  <LOG_PLG>
  {
    return LogMgr.Kind.Plg;
  }
}

LogMgr.Kind TexKind() : 
{}
{
  <LOG_TEX>
  {
    return LogMgr.Kind.Tex;
  }
}



LogMgr.Level LogLevel() : 
{
  LogMgr.Level v;
}
{
  (v=SevereLevel() | v=WarningLevel() | v=InfoLevel() | 
   v=FineLevel() | v=FinerLevel() | v=FinestLevel()) 
  {
    return v;
  }
}

LogMgr.Level SevereLevel() :
{
  LogMgr.Level v;
}
{
  <SEVERE> 
  {
    return LogMgr.Level.Severe;
  }
}

LogMgr.Level WarningLevel() :
{
  LogMgr.Level v;
}
{
  <WARNING> 
  {
    return LogMgr.Level.Warning;
  }
}

LogMgr.Level InfoLevel() :
{
  LogMgr.Level v;
}
{
  <INFO> 
  {
    return LogMgr.Level.Info;
  }
}

LogMgr.Level FineLevel() :
{
  LogMgr.Level v;
}
{
  <FINE> 
  {
    return LogMgr.Level.Fine;
  }
}

LogMgr.Level FinerLevel() :
{
  LogMgr.Level v;
}
{
  <FINER> 
  {
    return LogMgr.Level.Finer;
  }
}

LogMgr.Level FinestLevel() :
{
  LogMgr.Level v;
}
{
  <FINEST> 
  {
    return LogMgr.Level.Finest;
  }
}




/*------------------------------------------------------------------------------------------*/
/*   S H A R E D   T O K E N S                                                              */
/*------------------------------------------------------------------------------------------*/

Token
AE() :
{
  Token t;
}
{
  (t=<AE1> | t=<AE2>)
  { 
    return t; 
  }
}

Token
KEYSEP() :
{
	Token t;
}
{
  (t=<KEY_SEP1> | t=<KEY_SEP2>)
  { 
    return t; 
  }
}

Token
EQ() :
{
  Token t;
}
{
  (t=<EQ1> | t=<EQ2> | t=<EQ3> | t= <EQ4> | t= <EQ5> | t= <EQ6> | t= <EQ7> | t= <EQ8>)
  { 
    return t; 
  }
}
