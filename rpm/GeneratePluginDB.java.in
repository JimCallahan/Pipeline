// $Id: GeneratePluginDB.java.in,v 1.1 2009/02/11 16:27:15 jlee Exp $

import java.io.*;
import java.util.*;
import java.util.jar.*;

import us.temerity.pipeline.*;
import us.temerity.pipeline.builder.*;
import us.temerity.pipeline.glue.*;
import us.temerity.pipeline.glue.io.*;

/*------------------------------------------------------------------------------------------*/
/*   G e n e r a t e   P l u g i n   D B                                                    */
/*------------------------------------------------------------------------------------------*/

/**
 * Generates the initial GLUE database for the Temerity plugins.
 * This is run during the rpmbuild of plpluginmgr.
 *
 * The generated file is valid for:
 *
 *   pipeline-@CUSTOMER@-@VERSION@-@PROFILE_STAMP@
 *
 */
class GeneratePluginDB
{
  /*----------------------------------------------------------------------------------------*/
  /*   C O N S T R U C T O R                                                                */
  /*----------------------------------------------------------------------------------------*/

  /**
   * Constructs a new plugin GLUE database generator.
   *
   * @param pluginPath
   *   The path of the Temerity plugins directory.
   *
   * @param destPath
   *   The path of where to write the required-plugins file.
   */
  public
  GeneratePluginDB
  (
    String pluginPath, 
    String destPath
  )
  {
    pPluginPath = pluginPath;
    pDestPath   = destPath;

    pSerialVersionUIDs = new TreeMap<Long,String>();

    pRequiredPlugins = new TreeMap<String,MappedSet<PluginType,PluginID>>();
  }

  /**
   * This code mimics the initial loading of plugins that PluginMgr's constructors performs.
   */
  public void
  run()
    throws PipelineException
  {
    loadAllPlugins();

    if(pRequiredPlugins.size() > 1)
      throw new PipelineException
      ("The default Pipeline plugins directory contains " +
      "vendors other than Temerity!");

    for(String vendor : pRequiredPlugins.keySet()) {
      MappedSet<PluginType,PluginID> plugins = pRequiredPlugins.get(vendor);

      try {
        File file = new File(pDestPath, "required/" + vendor);

        if(file.exists()) {
          if(!file.delete())
  throw new PipelineException
    ("Unable to remove the old plugins file (" + file + ")!");
        }

        GlueEncoderImpl.encodeFile("RequiredPlugins", plugins, file);
      }
      catch(GlueException ex) {
        throw new PipelineException(ex);
      }
    }

    LogMgr.getInstance().flush();
  }

  /**
   * Load all installed plugin classes.
   */ 
  private void 
  loadAllPlugins() 
  {
    File root = new File(pPluginPath);
    File[] dirs = root.listFiles();
    int wk;
    for(wk=0; wk<dirs.length; wk++) {
      if(dirs[wk].isDirectory()) 
  loadBelow(root, dirs[wk]);
    }
  }

  /** 
   * Recursively load all installed plugin classes under the given directory.
   * 
   * @param root
   *   The root directory of installed plugins.
   * 
   * @param dir
   *   The current directory.
   */
  private void 
  loadBelow
  (
   File root, 
   File dir
  ) 
  {
    File[] fs = dir.listFiles();
    int wk;
    for(wk=0; wk<fs.length; wk++) {
      if(fs[wk].isFile()) {
  try {
    File file = fs[wk];

    VersionID vid = null;
    try {
      String dname = dir.getName();
      if(dname.startsWith("v")) {
        String vstr = dname.substring(1, dname.length()).replace('_','.');
        vid = new VersionID(vstr);
      }
      else {
        throw new IllegalArgumentException("Missing \"v\" prefix.");
      }
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException 
        ("The directory containing plugin files (" + dir + ") does " +
         "not conform to the naming convention of \"v#_#_#\" used to denote " +
         "the plugin version!  Ignoring plugin file (" + file + ").\n" + 
         ex.getMessage());
    }

    loadPlugin(root, file);
  }
  catch(PipelineException ex) {
    LogMgr.getInstance().log
      (LogMgr.Kind.Plg, LogMgr.Level.Warning,
       ex.getMessage());
  }
      }
      else if(fs[wk].isDirectory()) {
  loadBelow(root, fs[wk]);
      }
    }
  }

  /**
   * Load the plugin from the given class or JAR file.
   * 
   * @param classdir
   *   The sole Java CLASSPATH directory used to load the class. 
   * 
   * @param pluginfile
   *   The plugin class or JAR file.
   * 
   * @throws PipelineException
   *   If unable to load the plugin.
   */ 
  private void 
  loadPlugin
  (
    File classdir, 
    File pluginfile
  ) 
    throws PipelineException 
  {
    /* the canonical class directory */ 
    File cdir = null;
    try {
      cdir = classdir.getCanonicalFile();

      if(!cdir.isDirectory()) 
  throw new IOException();
    }
    catch(IOException ex) {
      throw new PipelineException 
  ("The plugin directory (" + classdir + ") was not a valid directory!");
    }

    /* the canonical class file */ 
    File cfile = null;
    try {
      cfile = pluginfile.getCanonicalFile();

      if(!cfile.isFile()) 
  throw new IOException();
    }
    catch(IOException ex) {
      throw new PipelineException 
  ("The plugin file (" + pluginfile + ") was not a valid file!");
    }

    /* the class file relative to the class directory */ 
    File rfile = null;
    {
      String fpath = cfile.getPath();
      String dpath = cdir.getPath();

      if(!fpath.startsWith(dpath)) 
  throw new PipelineException 
    ("The plugin file (" + cfile + ") was not located under the " + 
     "plugin directory (" + cdir + ")!");
      
      rfile = new File(fpath.substring(dpath.length()));
    }

    /* the Java package name and plugin revision number */ 
    String pkgName = null; 
    VersionID pkgID = null;
    try {
      File parent = rfile.getParentFile();
      pkgName = parent.getPath().substring(1).replace('/', '.'); 
      
      String vstr = parent.getName();
      if(!vstr.startsWith("v")) 
  throw new IllegalArgumentException
    ("The directory (" + vstr + ") did not match the pattern (v#_#_#)!");
      
      pkgID = new VersionID(vstr.substring(1).replace("_", "."));
    }
    catch(IllegalArgumentException ex) {
      throw new PipelineException
  ("The plugin file (" + pluginfile + ") was not located under a directory who's " +
   "name designates a legal plugin revision number:\n" + ex.getMessage());
    }

    /* the class name */ 
    String cname = null;
    boolean isJar = false;
    {
      String parts[] = cfile.getName().split("\\.");
      if((parts.length == 2) && (parts[1].equals("class") || parts[1].equals("jar"))) {
  isJar = parts[1].equals("jar");
  cname = (pkgName + "." + parts[0]);
      }
      else {
  throw new PipelineException 
    ("The plugin file (" + pluginfile + ") was not a Java class or JAR file!");
      }
    }

    /* load, instantiate and validate the plugin class or JAR file */ 
    {
      TreeMap<String,byte[]> contents = new TreeMap<String,byte[]>(); 
      if(isJar) {
  try {
    JarInputStream in = new JarInputStream(new FileInputStream(cfile)); 

    byte buf[] = new byte[4096];
    while(true) {
      JarEntry entry = in.getNextJarEntry();
      if(entry == null) 
        break;

      if(!entry.isDirectory()) {
        String path = entry.getName();
        if(path.endsWith("class")) {
    String jcname = path.substring(0, path.length() - 6).replace('/', '.');

    ByteArrayOutputStream out = new ByteArrayOutputStream();

    while(true) {
      int len = in.read(buf, 0, buf.length); 
      if(len == -1) 
        break;
      out.write(buf, 0, len);
    }

    contents.put(jcname, out.toByteArray());
        }
      }
    }

    in.close();
  }
  catch(IOException ex) {
    throw new PipelineException
      ("Unable to read the plugin JAR file (" + cfile + ")!");
  }

  if(!contents.containsKey(cname))
    throw new PipelineException
      ("The plugin JAR file (" + cfile + ") did not contain the required " + 
       "plugin class (" + cname + ")!");
      }
      else {
  byte[] bytes = new byte[(int) cfile.length()];

  try {
    FileInputStream in = new FileInputStream(cfile);
    in.read(bytes);
    in.close();
  }
  catch(IOException ex) {
    throw new PipelineException
      ("Unable to read the plugin class file (" + cfile + ")!");
  }

  contents.put(cname, bytes);
      }

      loadPluginHelper(pluginfile, cname, pkgID, contents, true, true);
    }
  }
    
  /**
   * Load the plugin.
   * 
   * @param pluginfile
   *   The plugin class or JAR file.
   * 
   * @param cname
   *   The full class name.
   * 
   * @param pkgID
   *   The revision number component of the class package.
   * 
   * @param contents
   *   The raw plugin class bytes indexed by class name.
   *
   * @param external
   *   Whether to ignore the Local Vendor check.
   *
   * @param rename
   *   Whether to ignore the Java class/package aliasing check.
   * 
   * @throws PipelineException
   *   If unable to load the plugin.
   */ 
  private void 
  loadPluginHelper
  (
    File pluginfile, 
    String cname, 
    VersionID pkgID, 
    TreeMap<String,byte[]> contents, 
    boolean external, 
    boolean rename
  ) 
    throws PipelineException
  {
    ClassLoader loader = new PluginClassLoader(contents);
    try {
      LogMgr.getInstance().log
  (LogMgr.Kind.Plg, LogMgr.Level.Finer,
   "Loading: " + cname);
      Class cls = loader.loadClass(cname);

      if(!BasePlugin.class.isAssignableFrom(cls)) 
  throw new PipelineException
    ("The loaded class (" + cname + ") was not a Pipeline plugin!");

      LogMgr.getInstance().log
  (LogMgr.Kind.Plg, LogMgr.Level.Finest,
   "Instantiating Plugin: " + cname);
      BasePlugin plg = null; 
      try {
  plg = (BasePlugin) cls.newInstance();
      }
      catch(InstantiationException ex) {
  throw new PipelineException
    ("Unable to intantiate plugin class (" + cls.getName() + "):\n" +
     ex.getMessage());
      }
      catch(IllegalAccessException ex) {
  throw new PipelineException
    ("Unable to access plugin class (" + cls.getName() + "):\n" +
     ex.getMessage());
      }
      catch(Exception ex) {
  throw new PipelineException
    ("Exception thrown by constructor of plugin class (" + cls.getName() + "):\n" + 
     ex.getMessage());
      }

      if(!plg.getVersionID().equals(pkgID)) 
  throw new PipelineException
    ("The revision number (v" + plg.getVersionID() + ") of the instantiated " + 
     "plugin class (" + cname + ") does not match the revision number " + 
     "(" + pkgID + ") derived from the name of the directory containing the " + 
     "class file (" + pluginfile + ")!");
      
      if(plg.getSupports().isEmpty()) 
  throw new PipelineException
    ("The plugin class (" + cname + ") does not support execution under any " + 
     "type of operating system!  At least one OS must be supported.");

      {
  ObjectStreamClass osc = ObjectStreamClass.lookup(cls);
  if(osc == null) 
    throw new PipelineException
      ("The plugin (" + cname + ") does not implement Serializable!");

  long serialID = osc.getSerialVersionUID();
  if(serialID == 0L) 
    throw new PipelineException
      ("No member (serialVersionUID) was declared for plugin (" + cname + ")!");

  String sname = pSerialVersionUIDs.get(serialID); 
  if((sname != null) && !sname.equals(cname)) 
    throw new PipelineException
      ("The member (serialVersionUID) of plugin (" + cname + ") with a value " + 
       "of (" +  serialID + ") is already being used by the installed plugin " + 
       "(" + sname + ")!"); 

  pSerialVersionUIDs.put(serialID, cname); 
      }

      if(!external && !plg.getVendor().equals(PackageInfo.sLocalVendor)) 
        throw new PipelineException
          ("The Vendor of the plugin (" + cname + ") does not match the default Local " + 
           "Vendor (" + PackageInfo.sLocalVendor + ") for this site!  This may " + 
           "be due to copying the source code from another plugin and forgetting to " + 
           "update the Name, VersionID and Vendor properties of the new plugin.\n" + 
           "\n" + 
           "You can use the --external option to plplugin(1) if you want to install " + 
           "plugins from other vendors and override this check."); 


      if(plg instanceof BaseEditor) {
      }
      else if(plg instanceof BaseAction) {
        BaseAction action = (BaseAction) plg;
        if(action.supportsSourceParams() && (action.getInitialSourceParams() == null))
          throw new PipelineException
            ("The action plugin (" + cname + ") claims to support source parameters, but " + 
             "does not actually create any source parameters."); 
      }
      else if(plg instanceof BaseComparator) {
      }
      else if(plg instanceof BaseTool) {
      }
      else if(plg instanceof BaseAnnotation) {
      }
      else if(plg instanceof BaseArchiver) {
      }
      else if(plg instanceof BaseMasterExt) {
      }
      else if(plg instanceof BaseQueueExt) {
      }
      else if(plg instanceof BaseKeyChooser) {
      }
      else if(plg instanceof BaseBuilderCollection) {
      }
      else {
  throw new PipelineException
    ("The class file (" + pluginfile + ") does not contain a Pipeline plugin!");
      }

      /* After the plugin passes all the sanity checks it can be added to the 
          required plugins table. */
      PluginType plgType = plg.getPluginType();
      PluginID   plgID   = plg.getPluginID();

      String vendor = plgID.getVendor();

      if(!pRequiredPlugins.containsKey(vendor)) {
        pRequiredPlugins.put(vendor, new MappedSet<PluginType,PluginID>());
      }

      MappedSet<PluginType,PluginID> plugins = pRequiredPlugins.get(vendor);
      plugins.put(plgType, plgID);
    }
    catch(LinkageError ex) {
      throw new PipelineException
  ("Unable to link plugin class (" + cname + "):\n" + 
   ex.getMessage());
    }
    catch(ClassNotFoundException ex) {
      throw new PipelineException
  ("Unable to find plugin class (" + cname + "):\n" +
   ex.getMessage());
    }
    finally {
      LogMgr.getInstance().flush();
    }
  }

  /**
   * Path of the Temerity plugins directory.
   */
  private String  pPluginPath;

  /**
   * Path where to write the required-plugins file.
   */
  private String  pDestPath;

  /**
   * The serialVersionUIDs of all loaded plugins used to test for conflicts.
   * 
   * The table contains plugin identifying strings indexed by the serialVersionUID of
   * the plugin.
   */ 
  private TreeMap<Long,String>  pSerialVersionUIDs;

  /**
   * All required plugins that were successfully loaded from disk.
   *
   * The table contains a MappedSet of PluginID indexed by PluginType.
   */
  private TreeMap<String,MappedSet<PluginType,PluginID>>  pRequiredPlugins;

  public static void
  main
  (
    String[] av
  )
  {
    try {
      new GeneratePluginDB(av[0], av[1]).run();
    }
    catch(PipelineException ex) {
      ex.printStackTrace();
      System.exit(-1);
    }
  }
}

