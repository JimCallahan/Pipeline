#!/bin/bash

function usage {
  echo "usage: temerity-benchmark init.data [checksum] [copy] [status]"
  echo 
  echo "  init.data  The file which contains the benchmark initialization data"
  echo "             generated by temerity-benchmark-init and typically called"
  echo "             'benchmark-init.data'.  This determines where to find the"
  echo "             test data and other parameters of the benchmark."
  echo  
  echo "  checksum   Time the speed of generating checksums using 'md5sum' for each"
  echo "             file in the read scratch area."
  echo 
  echo "  copy       Time the speed of copying files from the read to write scrach"
  echo "             areas using a single invocation of 'cp' for each size of test"
  echo "             file.  This is similar to how Pipeine exectutes 'cp' normally."
  echo
  echo "  status     Time the speed of running 'stat' on each of the files in the"
  echo "             read scratch area.  It probably most useful to use this test"
  echo "             alone in a seperate invocation of this script using a completly"
  echo "             different read scratch area then the checksum and copy tests"
  echo "             to simulate more normal usage patterns."

  exit 1
}

if [ "$#" -lt 1 ]
then
  usage
fi

initData=$1

if [ ! -f $initData ]
then
  echo "The benchmark initialization data file '"$initData"' does not exist!"
  usage
fi

shift 1

checksum=0
copy=0
status=0

while [ $# -gt 0 ]
do
  case $1 in
    ('checksum')
      checksum=1;;
    ('copy')
      copy=1;; 
    ('status')
      status=1;; 
    (*) 
      usage;;
  esac

  shift 1
done

if [ $checksum -eq 0 -a $copy -eq 0 -a $status -eq 0 ]
then
  echo "No benchmarks specified!"
  usage
fi

readRoot=`head -1 $initData`
writeRoot=`head -2 $initData | tail -1`
localRoot=`head -3 $initData | tail -1`
totalFiles=`head -4 $initData | tail -1`
totalBytes=`head -5 $initData | tail -1`

stamp=`date +%s`
TIMEFORMAT="%3R %3U %3S"

maxArgs=60

echo "==========================================================================="
echo "  R U N N I N G   T E S T S"
echo "---------------------------------------------------------------------------"

if [ $checksum -eq 1 ]
then
  echo "Creating Local Directories..."

  tdir="$localRoot/local-scratch/$stamp"
  for f in `tail +6 benchmark-init.data`
  do
    mkdir -p $tdir/`dirname $f`
  done

  echo "Timing CheckSum Generation..."

  files=`tail +6 benchmark-init.data`
  stats=`time ( for f in $files; do md5sum "$readRoot/read-scratch/$f" > "$tdir/$f"; done ) 2>&1`

  e=`echo $stats | awk '{print $1}'`
  efps=`echo "$totalFiles/$e" | bc -l`
  emps=`echo "$totalBytes/($e*1024^2)" | bc -l`

  u=`echo $stats | awk '{print $2}'`  
  s=`echo $stats | awk '{print $3}'`  

  printf "  Elapsed = %.04f sec   %.04f files/s   %.04f MB/s\n" "$e" "$efps" "$emps"
  printf "     User = %.04f sec\n" "$u" 
  printf "   System = %.04f sec\n" "$s" 
  echo 
fi

if [ $copy -eq 1 ]
then
  echo "Collating File Arguments..."

  tdir="$writeRoot/write-scratch/$stamp"
  mkdir -p $tdir

  fk=0
  ak=0
  od=""
  for f in `tail +6 benchmark-init.data`
  do
    d=`dirname $f`
    if [ "$d" != "$od" ]
    then
      od=$d
      fk=$(($fk+1))
      dirs[$fk]=$od
    fi 

    ak=$(($ak+1))
    if [ $ak -gt $maxArgs ]
    then
      ak=0
      fk=$(($fk+1))
      dirs[$fk]=$od
    fi

    files[$fk]+="`basename $f` "
  done

  echo "Creating Write Directories..."

  for ((i=1; $i<${#files[@]}; i++)) 
  do
    mkdir -p "$tdir/${dirs[$i]}"
  done
  
  echo -n "Timing File Copying: "

  e=0
  u=0
  s=0
  for ((i=1; $i<${#files[@]}; i++))
  do
    pushd "$readRoot/read-scratch/${dirs[$i]}" > /dev/null 2>&1
    #echo cp --target-directory="$tdir/${dirs[$i]}" ${files[$i]}
    stats=`time (cp --target-directory="$tdir/${dirs[$i]}" ${files[$i]}) 2>&1`
    popd > /dev/null 2>&1

    be=`echo $stats | awk '{print $1}'`
    bu=`echo $stats | awk '{print $2}'`  
    bs=`echo $stats | awk '{print $3}'`  

    #printf "  Elapsed = %.04f sec\n" "$be"
    #printf "     User = %.04f sec\n" "$bu" 
    #printf "   System = %.04f sec\n" "$bs" 

    e=`echo "$e+$be" | bc -l`
    u=`echo "$u+$bu" | bc -l`
    s=`echo "$s+$bs" | bc -l`

    echo -n "."
  done
  echo 

  efps=`echo "$totalFiles/$e" | bc -l`
  emps=`echo "$totalBytes/($e*1024^2)" | bc -l`
  
  printf "  Elapsed = %.04f sec   %.04f files/s   %.04f MB/s\n" "$e" "$efps" "$emps"
  printf "     User = %.04f sec\n" "$u" 
  printf "   System = %.04f sec\n" "$s" 
  echo 
fi

if [ $status -eq 1 ]
then
  echo "Collating File Arguments..."

  fk=0
  ak=0
  od=""
  for f in `tail +6 benchmark-init.data`
  do
    d=`dirname $f`
    if [ "$d" != "$od" ]
    then
      od=$d
      fk=$(($fk+1))
      dirs[$fk]=$od
    fi 

    ak=$(($ak+1))
    if [ $ak -gt $maxArgs ]
    then
      ak=0
      fk=$(($fk+1))
      dirs[$fk]=$od
    fi

    files[$fk]+="`basename $f` "
  done

  echo "Timing File Status..."

  e=0
  u=0
  s=0
  for ((i=1; $i<${#files[@]}; i++))
  do
    pushd "$readRoot/read-scratch/${dirs[$i]}" > /dev/null 2>&1
    #echo stat --format="" ${files[$i]}
    stats=`time (stat --format="" ${files[$i]}) 2>&1`
    popd > /dev/null 2>&1

    be=`echo $stats | awk '{print $1}'`
    bu=`echo $stats | awk '{print $2}'`  
    bs=`echo $stats | awk '{print $3}'`  

    #printf "  Elapsed = %.04f sec\n" "$be"
    #printf "     User = %.04f sec\n" "$bu" 
    #printf "   System = %.04f sec\n" "$bs" 

    e=`echo "$e+$be" | bc -l`
    u=`echo "$u+$bu" | bc -l`
    s=`echo "$s+$bs" | bc -l`
  done

  efps=`echo "$totalFiles/$e" | bc -l`

  printf "  Elapsed = %.04f sec   %.04f files/s\n" "$e" "$efps"
  printf "     User = %.04f sec\n" "$u" 
  printf "   System = %.04f sec\n" "$s" 
  echo 
fi

