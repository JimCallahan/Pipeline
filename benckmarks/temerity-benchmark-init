#!/bin/bash

function usage {
  echo "usage: temerity-benchmark-init read write local buckets bytes"
  echo 
  echo "  read    The absolute filesystem path to the network mounted directory from "
  echo "          which all test production data will be read."
  echo 
  echo "  write   The absolute filesystem path to the network mounted directory to "
  echo "          which all test production data will be written."
  echo
  echo "  local   The absolute filesystem path to the locally mounted directory to "
  echo "          which all checksum data will be written."
  echo 
  echo "  buckets The file sizes histogram file generated by the 'size-histogram' " 
  echo "          script which is used to determine the distribution of test file "
  echo "          sizes used in this test. Typically called 'size-buckets.dat'."
  echo 
  echo "  bytes   The maximum number of bytes to use for all test production data " 
  echo "          files.  The actual amount will likely be somewhat smaller due to "
  echo "          rounding and the choice of files generated based on the input " 
  echo "          histogram.  This is more to limit the amount of storage required " 
  echo "          for the test than an exact measure."
  echo
  echo "This generates the test data files used by temerity-benchmark and copies"
  echo "them to the 'read' network scratch directory.  It also generats a text file"
  echo "called 'benchmark-init.data' which contains the locations of these data "
  echo "files needed by temerity-benchmark when it runs actual tests."
  echo 
  echo "The initialization phase is a seperate script so that all initialization and"
  echo "setup removed from consideration when timing.  It also allows sysadmins to" 
  echo "take steps like unmounting/remounting the file system before starting the"
  echo "actual tests to clear any client-side caching.  Finally, it allows better"
  echo "synchronization when running multiple instances of temerity-benchmark at the"
  echo "same time to test simultaneous version control and status performance."

  exit 1
}

if [ "$#" -ne 5 ]
then
  usage
fi

readRoot=$1
writeRoot=$2
localRoot=$3
sizeBuckets=$4
totalBytes=$5

if [ ! -f $sizeBuckets ]
then
  echo "The buckets file '"$sizeBuckets"' does not exist!"
  usage
fi

if [ ! -d $readRoot ] 
then
  echo "The read scratch path '"$readRoot"' does not exist or is not a directory!"
  usage
fi

if [ ! -d $writeRoot ] 
then
  echo "The write scratch path '"$writeRoot"' does not exist or is not a directory!"
  usage
fi

if [ ! -d $localRoot ] 
then
  echo "The local scratch path '"$localRoot"' does not exist or is not a directory!"
  usage
fi

# load histogram information
i=0
for s in `cut -f 2 $sizeBuckets`
do
  sizes[$i]=$s
  i=$(($i+1))
done

i=0
for s in `cut -f 4 $sizeBuckets`
do
  prob[$i]=$s
  i=$(($i+1))
done


echo "==========================================================================="
echo "  G E N E R A T I N G   T E S T   D A T A"
echo "---------------------------------------------------------------------------"

if [ -f benchmark-init.data ]
then
  echo "Cleaning Up Old: benchmark-init.data"
  rm -f benchmark-init.data
fi

echo $readRoot   > benchmark-init.data
echo $writeRoot >> benchmark-init.data
echo $localRoot >> benchmark-init.data

echo -n "Determining File Sizes and Counts: "
totalCount=0
for ((i=0; $i<${#sizes[@]}; i++))
do
  counts[$i]=0
done

done=0
totalGen=0
while [ $done -ne 1 ]
do
  for ((i=0; $i<${#sizes[@]}; i++))
  do
    if [ `echo "$RANDOM/32767 < ${prob[$i]}" | bc -l` -eq 1 ]
    then
      size="${sizes[$i]}"
      newTotal=$(($totalGen + $size))
      if [ $newTotal -gt $totalBytes ] 
      then
        done=1
        break
      fi

      counts[$i]=$((${counts[$i]}+1))
      totalCount=$(($totalCount+1))
      totalGen=$newTotal

      echo -n "."
    fi  
  done
done
echo

largestSize=0

echo 
printf "Count\tFileSize\n"
for ((i=0; $i<${#sizes[@]}; i++))
do
  size="${sizes[$i]}"
  cnt="${counts[$i]}"
  printf "  $cnt\t  $size\n"  

  if [ $cnt -gt 0 -a $size -gt $largestSize ]
  then
    largestSize=$size
  fi
done
echo
printf "  $totalCount\t  $totalGen  (TOTALS)\n"
echo
  
echo $totalCount >> benchmark-init.data  
echo $totalGen   >> benchmark-init.data

echo "Cleaning Up: $readRoot/read-scratch"
rm -rf $readRoot/read-scratch
mkdir -p $readRoot/read-scratch

echo "Cleaning Up: $writeRoot/write-scratch"
rm -rf $writeRoot/write-scratch
mkdir -p $writeRoot/write-scratch

echo "Cleaning Up: $localRoot/local-scratch"
rm -rf $localRoot/local-scratch
mkdir -p $localRoot/local-scratch

echo "Generating Random Data... "
rm -f "random.data"
dd if=/dev/urandom of="random.data" bs="$largestSize" count=1 > /dev/null 2>&1

echo -n "Creating Test Files in Read Directory: "
for ((sk=0; $sk<${#sizes[@]}; sk++))
do 
  size="${sizes[$sk]}"
  cnt="${counts[$sk]}"
  if [ $cnt -gt 0 ] 
  then 
    sdir="$readRoot/read-scratch/size.$size"
    mkdir -p $sdir
    for ((ck=0; $ck<$cnt; ck++))
    do  
      echo "size.$size/data.$ck" >> benchmark-init.data
      head --bytes=$size "random.data" > "$sdir/data.$ck"
      echo -n "."
    done
  fi
done
echo 

echo "Cleaning Up Random Data..."
rm -f "random.data"
