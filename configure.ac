dnl Process this file with autoconf to produce a configure script.

dnl ------------------------------------------------------------------------------------------
dnl   Initialization.
dnl ------------------------------------------------------------------------------------------

AC_INIT
AC_CONFIG_SRCDIR([AUTHORS])
AC_CONFIG_AUX_DIR(config)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(Pipeline, 1.9.12)

AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------
dnl   Configuration options.
dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([C++ compiler vendor (version)])

AC_ARG_WITH([compiler], 
            [  --with-compiler=TYPE        C/C++ compiler type: GNU or SGI])

AR="ar"

AC_SUBST(EXPORT_DYNAMIC)
EXPORT_DYNAMIC=""

AC_SUBST(DLOPEN_LIB)
DLOPEN_LIB=""

AC_SUBST(GEN_LIB)
GEN_LIB=""

CXX_BRAND=""

case "$with_compiler" in 
  (gnu | GNU | "") \
     CC="gcc";
     CFLAGS="-D_REENTRANT";
     CXX="g++";
     CXXFLAGS="-D_REENTRANT";
     EXPORT_DYNAMIC="-Wl,-export-dynamic";
     DLOPEN_LIB="-ldl";
     AR="ar ";
     CXX_VERSION=`${CXX} --version | head -1 | awk '{print $3}'`;
     if test -z "$CXX_VERSION"; then CXX_VERSION=`${CXX} --version`; fi;
     AC_DEFINE(USING_GNU_CXX, 1, 
               [Define if using GNU's C++ compiler (g++).]);;

  (sgi | SGI) \
     CC="/bin/cc";
     CFLAGS="";
     CXX="/bin/CC";
     CXXFLAGS="-ptnone -prelink -ptv -Wl,-LD_MSG:off=15";
     GEN_LIB="-lgen";
     AR="$CXX -ar -o";
     AC_DEFINE(USING_MIPSPRO_CXX, 1, 
               [Define if using SGI's MIPSPRO C++ compiler (CC).]);;

  (*) \
     AC_MSG_ERROR([unknown compiler type]);;
esac

AC_MSG_RESULT([$CXX ($CXX_VERSION)])
AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------
dnl   Build Information.         
dnl ------------------------------------------------------------------------------------------

AC_MSG_RESULT([Build Information: ])

AC_MSG_CHECKING([Package])
AC_MSG_RESULT([$PACKAGE])

AC_MSG_CHECKING([Version])
AC_MSG_RESULT([$VERSION])

AC_MSG_CHECKING([Release])
AC_SUBST(RELEASE_STAMP)
RELEASE_STAMP=`date`
AC_MSG_RESULT([$RELEASE_STAMP])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Customer Symbolic Name])

AC_ARG_WITH([customer], 
            [  --with-customer=NAME           The symbolic name of the customer.])

AC_SUBST(CUSTOMER)
CUSTOMER=/base/prod

AC_SUBST(LICENSE_DOC)
LICENSE_DOC=license

if test "$with_customer" 
then
  CUSTOMER=$with_customer

  if test "$CUSTOMER" = "rhinofx"
  then
    LICENSE_DOC=rhino-license
  fi
else 
  AC_MSG_ERROR([the --with-customer option is required.])
fi

AC_MSG_RESULT([$CUSTOMER])



AC_MSG_CHECKING([Customer Profile])

AC_ARG_WITH([customer-profile], 
            [  --with-customer-profile=FILE   The site profile generated by plconfig(1).])

AC_SUBST(CUSTOMER_PROFILE)
CUSTOMER_PROFILE=""

AC_SUBST(PROFILE_STAMP)
PROFILE_STAMP=""

if test "$with_customer_profile" 
then
  CUSTOMER_PROFILE=$with_customer_profile
  PROFILE_STAMP=`basename $CUSTOMER_PROFILE`
else 
  AC_MSG_ERROR([the --with-customer-profile option is required.])
fi

AC_MSG_RESULT([$CUSTOMER_PROFILE])




AC_MSG_CHECKING([CryptoApp Directory])

AC_ARG_WITH([crypto-app], 
            [  --with-crypto-app=DIR          The directory containing "CryptoApp.class".])

AC_SUBST(CRYPTO_APP_DIR)
CRYPTO_APP_DIR=

if test "$with_crypto_app" 
then
  if test -f $with_crypto_app/CryptoApp.class 
  then 
    CRYPTO_APP_DIR=$with_crypto_app
  else 
    AC_MSG_ERROR([the directory "$with_crypto_app" does not contain "CryptoApp.class".])
  fi
else 
  AC_MSG_ERROR([the --with-crypto-app option is required.])
fi

AC_MSG_RESULT([$CRYPTO_APP_DIR])



AC_MSG_CHECKING([Customer Profile Version Check])

AC_SUBST(PLCONFIG_VERSION)
PLCONFIG_VERSION=

crypto_version=`java -classpath $CRYPTO_APP_DIR CryptoApp --version`
profile_version=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                      --lookup PlConfigVersion`

if test "$profile_version" != "$crypto_version"
then 
  AC_MSG_ERROR([the Customer Profile version ($profile_version) did not match the CryptoApp version ($crypto_version).])
else 
  PLCONFIG_VERSION=$profile_version	
fi 

AC_MSG_RESULT([$PLCONFIG_VERSION (OK)])


dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Server Host IDs])

AC_SUBST(PIPELINE_HOST_NAMES)
PIPELINE_HOST_NAMES=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                          --lookup HostIDs \
                     | awk '{printf("\"%s\", ",$1)}' \
                     | awk '{printf("'%s'\n",substr($0,0,length($0)-2))}'`

AC_SUBST(PIPELINE_HOST_IDS)
PIPELINE_HOST_IDS=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                        --lookup HostIDs \
                   | awk '{printf("\"%s\", ",$2)}' \
                   | awk '{printf("'%s'\n",substr($0,0,length($0)-2))}'`

if test "$host_ids" != "null" 
then
  AC_MSG_RESULT([])
  java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE --lookup HostIDs \
  | awk '{printf("  %s\n",$0)}'
else 
  AC_MSG_ERROR([customer profile was incomplete.])
fi 


AC_MSG_CHECKING([License Valid Until])

AC_SUBST(LICENSE_END)
LICENSE_END=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                  --lookup LicenseEnd`

if test "$LICENSE_END" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

if test "$LICENSE_END" == "Sun Aug 17 02:12:55 EST 292278994"
then 
  LICENSE_END="Perpetual"
fi

AC_MSG_RESULT([$LICENSE_END])



AC_MSG_CHECKING([Root Installation Directory])

AC_SUBST(ROOT_INST_DIR)
ROOT_INST_DIR=""

root_inst_dir=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                    --lookup RootInstallDirectory`

if test "$root_inst_dir" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
else 
  ROOT_INST_DIR=$root_inst_dir/pipeline-$CUSTOMER-$VERSION-$PROFILE_STAMP
fi 

AC_MSG_RESULT([$ROOT_INST_DIR])




AC_MSG_CHECKING([User Home Directory])

AC_SUBST(HOMEDIR)
HOMEDIR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
              --lookup HomeDirectory`

if test "$HOMEDIR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$HOMEDIR])



AC_MSG_CHECKING([Temporary Directory])

AC_SUBST(TEMPDIR)
TEMPDIR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
              --lookup TemporaryDirectory`

if test "$TEMPDIR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$TEMPDIR])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Pipeline Master Server Hostname])

AC_SUBST(PL_MASTER_SERVER)
PL_MASTER_SERVER=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                       --lookup MasterHostname`

if test "$PL_MASTER_SERVER" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_MASTER_SERVER])



AC_MSG_CHECKING([Pipeline Master Server Port])

AC_SUBST(PL_MASTER_PORT)
PL_MASTER_PORT=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                     --lookup MasterPort`

if test "$PL_MASTER_PORT" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_MASTER_PORT])



AC_MSG_CHECKING([Root Node Storage Directory])

AC_SUBST(NODEDIR)
NODEDIR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
              --lookup NodeDirectory`

if test "$NODEDIR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$NODEDIR])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Pipeline File Server Hostname])

AC_SUBST(PL_FILE_SERVER)
PL_FILE_SERVER=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                     --lookup FileHostname`

if test "$PL_FILE_SERVER" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_FILE_SERVER])



AC_MSG_CHECKING([Pipeline File Server Port])

AC_SUBST(PL_FILE_PORT)
PL_FILE_PORT=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup FilePort`

if test "$PL_FILE_PORT" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_FILE_PORT])



AC_MSG_CHECKING([Root Production Directory])

AC_SUBST(PRODDIR)
PRODDIR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
              --lookup ProductionDirectory`

if test "$PRODDIR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PRODDIR])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Pipeline Queue Server Hostname])

AC_SUBST(PL_QUEUE_SERVER)
PL_QUEUE_SERVER=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                      --lookup QueueHostname`

if test "$PL_QUEUE_SERVER" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_QUEUE_SERVER])



AC_MSG_CHECKING([Pipeline Queue Server Port])

AC_SUBST(PL_QUEUE_PORT)
PL_QUEUE_PORT=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                    --lookup QueuePort`

if test "$PL_QUEUE_PORT" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_QUEUE_PORT])



AC_MSG_CHECKING([Pipeline Job Server Port])

AC_SUBST(PL_JOB_PORT)
PL_JOB_PORT=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                  --lookup JobPort`

if test "$PL_JOB_PORT" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_JOB_PORT])



AC_MSG_CHECKING([Root Queue Storage Directory])

AC_SUBST(QUEUEDIR)
QUEUEDIR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
               --lookup QueueDirectory`

if test "$QUEUEDIR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$QUEUEDIR])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Pipeline Plugin Server Hostname])

AC_SUBST(PL_PLUGIN_SERVER)
PL_PLUGIN_SERVER=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                       --lookup PluginHostname`

if test "$PL_PLUGIN_SERVER" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_PLUGIN_SERVER])


AC_MSG_CHECKING([Pipeline Plugin Server Port])

AC_SUBST(PL_PLUGIN_PORT)
PL_PLUGIN_PORT=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                     --lookup PluginPort`

if test "$PL_PLUGIN_PORT" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PL_PLUGIN_PORT])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Pipeline User])

AC_SUBST(PIPELINE_USER)
PIPELINE_USER=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                    --lookup PipelineUser`

if test "$PIPELINE_USER" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PIPELINE_USER])


AC_MSG_CHECKING([Pipeline User ID])

AC_SUBST(PIPELINE_UID)
PIPELINE_UID=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup PipelineUserID`

if test "$PIPELINE_UID" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PIPELINE_UID])


AC_MSG_CHECKING([Pipeline Group])

AC_SUBST(PIPELINE_GROUP)
PIPELINE_GROUP=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                     --lookup PipelineGroup`

if test "$PIPELINE_GROUP" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PIPELINE_GROUP])


AC_MSG_CHECKING([Pipeline Group ID])

AC_SUBST(PIPELINE_GID)
PIPELINE_GID=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup PipelineGroupID`

if test "$PIPELINE_GID" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$PIPELINE_GID])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([Java Runtime])

AC_SUBST(JAVA_HOME)
JAVA_HOME=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                --lookup JavaHome`

if test "$JAVA_HOME" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$JAVA_HOME])


AC_MSG_CHECKING([Java Vendor])

AC_SUBST(JAVA_VENDOR)
JAVA_VENDOR=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                  --lookup JavaVendor`

if test "$JAVA_VENDOR" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$JAVA_VENDOR])


AC_MSG_CHECKING([Java Name])

AC_SUBST(JAVA_NAME)
JAVA_NAME=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                --lookup JavaName`

if test "$JAVA_NAME" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$JAVA_NAME])


AC_MSG_CHECKING([Java Version])

AC_SUBST(JAVA_VERSION)
JAVA_VERSION=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup JavaVersion`

if test "$JAVA_VERSION" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$JAVA_VERSION])


AC_MSG_CHECKING([Java ClassVersion])

AC_SUBST(JAVA_CLASS_VERSION)
JAVA_CLASS_VERSION=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                         --lookup JavaClassVersion`

if test "$JAVA_CLASS_VERSION" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$JAVA_CLASS_VERSION])


dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([OS Name])

AC_SUBST(OS_NAME)
OS_NAME=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                --lookup OS-Name`

if test "$OS_NAME" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$OS_NAME])


AC_MSG_CHECKING([OS Version])

AC_SUBST(OS_VERSION)
OS_VERSION=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup OS-Version`

if test "$OS_VERSION" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$OS_VERSION])


AC_MSG_CHECKING([OS Architecture])

AC_SUBST(OS_ARCH)
OS_ARCH=`java -classpath $CRYPTO_APP_DIR CryptoApp $CUSTOMER_PROFILE \
                   --lookup OS-Arch`

if test "$OS_ARCH" == "null"
then
  AC_MSG_ERROR([customer profile was incomplete.])
fi 

AC_MSG_RESULT([$OS_ARCH])



dnl ------------------------------------------------------------------------------------------

AC_MSG_CHECKING([toolset])
AC_SUBST(BUILD_TOOLSET)
BUILD_TOOLSET=$TOOLSET
AC_MSG_RESULT([$TOOLSET])


AC_MSG_CHECKING([path])
AC_MSG_RESULT([$PATH])


AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------

AC_SUBST(JAVA_C_FLAGS)
JAVA_C_FLAGS=""

AC_SUBST(JAVA_RUNTIME_FLAGS)
JAVA_RUMTIME_FLAGS=""

AC_SUBST(JNI_LDADD)
JNI_LDADD=""

AC_SUBST(JNI_LDFLAGS)
JNI_LDFLAGS=""

AC_SUBST(EXTRA_DEBUG_SUBDIRS)
EXTRA_DEBUG_SUBDIRS=""

AC_SUBST(YXXFLAGS)
YXXFLAGS=""

AC_SUBST(BUILD_MODE)
BUILD_MODE="dbg"

AC_ARG_ENABLE([opt], 
              [  --enable-opt              Use optimization options.])

if test "$enable_opt" = "yes" 
then 
  case "$with_compiler" in 
    (kai | KAI) \
       CXXFLAGS="$CXXFLAGS +K3 -O3";;

    (sgi | SGI) \
       CXXFLAGS="$CXXFLAGS -O2 -OPT:Olimit=8192";;

    (gnu | GNU | "") \
       CXXFLAGS="$CXXFLAGS -O2";
       JNI_LDFLAGS="-shared ";;

    (*) \
       CXXFLAGS="$CXXFLAGS -O2";;
  esac

  JAVA_C_FLAGS="-source 1.5 -Xlint:all,-depreciation,-unchecked,-fallthrough"
  JAVA_RUNTIME_FLAGS="-disableassertions -server"

  CXXFLAGS="$CXXFLAGS -DNDEBUG"
  EXTRA_DEBUG_SUBDIRS=""
  BUILD_MODE="opt"
else
  case "$with_compiler" in 
    (kai | KAI) \
       CXXFLAGS="$CXXFLAGS +K0 -g";;

    (sgi | SGI) \
       CXXFLAGS="$CXXFLAGS -g";;

    (gnu | GNU | "") \
       CXXFLAGS="$CXXFLAGS -g";
       JNI_LDFLAGS="-shared ";;

    (*) \
       CXXFLAGS="$CXXFLAGS -g";;
  esac

  JAVA_C_FLAGS="-g -source 1.5 -Xlint:all,-depreciation,-unchecked,-fallthrough"
  JAVA_RUNTIME_FLAGS="-enableassertions -server"

  EXTRA_DEBUG_SUBDIRS="tests"
  BUILD_MODE="dbg"
fi


dnl ------------------------------------------------------------------------------------------

AC_MSG_RESULT([Java Debugging Options])

AC_ARG_WITH([debug-base], 
            [  --with-debug-base=PORT      The base port number used for debugging.])

debug_base=43100
if test "$with_debug_base"
then
  debug_base=$with_debug_base
fi

java_debug_opts="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="

AC_MSG_CHECKING([plmaster])
AC_SUBST(PLMASTER_DEBUG_OPTS)
PLMASTER_DEBUG_OPTS=${java_debug_opts}$(($debug_base+1))
AC_MSG_RESULT([$PLMASTER_DEBUG_OPTS])

AC_MSG_CHECKING([plfilemgr])
AC_SUBST(PLFILEMGR_DEBUG_OPTS)
PLFILEMGR_DEBUG_OPTS=${java_debug_opts}$(($debug_base+2))
AC_MSG_RESULT([$PLFILEMGR_DEBUG_OPTS])

AC_MSG_CHECKING([plplugin])
AC_SUBST(PLPLUGIN_DEBUG_OPTS)
PLPLUGIN_DEBUG_OPTS=${java_debug_opts}$(($debug_base+4))
AC_MSG_RESULT([$PLPLUGIN_DEBUG_OPTS])

AC_MSG_CHECKING([plqueuemgr])
AC_SUBST(PLQUEUEMGR_DEBUG_OPTS)
PLQUEUEMGR_DEBUG_OPTS=${java_debug_opts}$(($debug_base+5))
AC_MSG_RESULT([$PLQUEUEMGR_DEBUG_OPTS])

AC_MSG_CHECKING([pljobmgr])
AC_SUBST(PLJOBMGR_DEBUG_OPTS)
PLJOBMGR_DEBUG_OPTS=${java_debug_opts}$(($debug_base+6))
AC_MSG_RESULT([$PLJOBMGR_DEBUG_OPTS])

AC_MSG_CHECKING([plui])
AC_SUBST(PLUI_DEBUG_OPTS)
PLUI_DEBUG_OPTS=${java_debug_opts}$(($debug_base+7))
AC_MSG_RESULT([$PLUI_DEBUG_OPTS])

AC_MSG_CHECKING([plscript])
AC_SUBST(PLSCRIPT_DEBUG_OPTS)
PLSCRIPT_DEBUG_OPTS=${java_debug_opts}$(($debug_base+8))
AC_MSG_RESULT([$PLSCRIPT_DEBUG_OPTS])

AC_MSG_CHECKING([plpluginmgr])
AC_SUBST(PLPLUGINMGR_DEBUG_OPTS)
PLPLUGINMGR_DEBUG_OPTS=${java_debug_opts}$(($debug_base+9))
AC_MSG_RESULT([$PLPLUGINMGR_DEBUG_OPTS])

AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------

AC_MSG_RESULT([Java Profiling Options])

AC_ARG_WITH([prof-base], 
            [  --with-prof-base=PORT       The base port number used for profiling.])

prof_base=43100
if test "$with_prof_base" 
then
  prof_base=$with_prof_base
fi

java_prof_opts="-Xrunyjpagent:sampling,alloc,onexit=both,port="
java_prof_dir=",dir=/usr/tmp/pipeline-profile/"

AC_MSG_CHECKING([plmaster])
AC_SUBST(PLMASTER_PROFILE_OPTS)
PLMASTER_PROFILE_OPTS=${java_prof_opts}$(($prof_base+1))${java_prof_dir}"plmaster"
AC_MSG_RESULT([$PLMASTER_PROFILE_OPTS])

AC_MSG_CHECKING([plfilemgr])
AC_SUBST(PLFILEMGR_PROFILE_OPTS)
PLFILEMGR_PROFILE_OPTS=${java_prof_opts}$(($prof_base+2))${java_prof_dir}"plfilemgr"
AC_MSG_RESULT([$PLFILEMGR_PROFILE_OPTS])

AC_MSG_CHECKING([plplugin])
AC_SUBST(PLPLUGIN_PROFILE_OPTS)
PLPLUGIN_PROFILE_OPTS=${java_prof_opts}$(($prof_base+4))${java_prof_dir}"plplugin"
AC_MSG_RESULT([$PLPLUGIN_PROFILE_OPTS])

AC_MSG_CHECKING([plqueuemgr])
AC_SUBST(PLQUEUEMGR_PROFILE_OPTS)
PLQUEUEMGR_PROFILE_OPTS=${java_prof_opts}$(($prof_base+5))${java_prof_dir}"plqueuemgr"
AC_MSG_RESULT([$PLQUEUEMGR_PROFILE_OPTS])

AC_MSG_CHECKING([pljobmgr])
AC_SUBST(PLJOBMGR_PROFILE_OPTS)
PLJOBMGR_PROFILE_OPTS=${java_prof_opts}$(($prof_base+6))${java_prof_dir}"pljobmgr"
AC_MSG_RESULT([$PLJOBMGR_PROFILE_OPTS])

AC_MSG_CHECKING([plui])
AC_SUBST(PLUI_PROFILE_OPTS)
PLUI_PROFILE_OPTS=${java_prof_opts}$(($prof_base+7))${java_prof_dir}"plui"
AC_MSG_RESULT([$PLUI_PROFILE_OPTS])

AC_MSG_CHECKING([plscript])
AC_SUBST(PLSCRIPT_PROFILE_OPTS)
PLSCRIPT_PROFILE_OPTS=${java_prof_opts}$(($prof_base+8))${java_prof_dir}"plscript"
AC_MSG_RESULT([$PLSCRIPT_PROFILE_OPTS])

AC_MSG_CHECKING([plpluginmgr])
AC_SUBST(PLPLUGINMGR_PROFILE_OPTS)
PLPLUGINMGR_PROFILE_OPTS=${java_prof_opts}$(($prof_base+9))${java_prof_dir}"plpluginmgr"
AC_MSG_RESULT([$PLPLUGINMGR_PROFILE_OPTS])

AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------

AC_ARG_ENABLE([64], 
              [  --enable-64               Generate 64 bit objects and executables.])

if test "$enable_64" = "yes" 
then 
  case "$with_compiler" in 
    (kai | KAI) \
       CFLAGS="$CFLAGS -64 -mips4 --backend -TARG:platform=IP30";
       CXXFLAGS="$CXXFLAGS -64 -mips4 --backend -TARG:platform=IP30";;

    (sgi | SGI) \
       CFLAGS="$CFLAGS -64 -mips4 -TARG:platform=IP30";
       CXXFLAGS="$CXXFLAGS -64 -mips4 -TARG:platform=IP30";;

    (gnu | GNU) \
       AC_MSG_ERROR([no 64bit support for gcc]);;

    (*) \
       AC_MSG_ERROR([don't know how to support 64bit on this compiler]);;
  esac
else 
  case "$with_compiler" in 
    (kai | KAI | sgi | SGI) \
       CFLAGS="$CFLAGS -n32 -mips3";
       CXXFLAGS="$CXXFLAGS -n32 -mips3";;
  esac
fi


dnl ------------------------------------------------------------------------------------------

AC_SUBST(RPM_ROOT)
RPM_ROOT=`pwd`/rpm

AC_SUBST(RPM_DATE)
RPM_DATE=`date +"%a %b %d %Y"`


dnl ------------------------------------------------------------------------------------------
dnl   Checks for programs.
dnl ------------------------------------------------------------------------------------------

dnl -- STANDARD C/C++ TOOLS ------------------------------------------------------------------

AC_MSG_RESULT([The C++ compiler environment:])

AC_LANG([C++])

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP
AC_SUBST(AR)
AC_CANONICAL_HOST

AC_HEADER_STDC
AC_CHECK_HEADER([sys/types.h])    
AC_CHECK_HEADER([sys/stat.h])     
AC_CHECK_HEADER([strings.h])      
AC_CHECK_HEADER([unistd.h])       

AC_MSG_RESULT([ ])



dnl -- SIZEOF C/C++ TYPES --------------------------------------------------------------------

AC_MSG_RESULT([Sizes of atomic C++ types:])

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

AC_CHECK_SIZEOF(float, 4)
AC_CHECK_SIZEOF(double, 8)
AC_CHECK_SIZEOF(long double, 12)

AC_MSG_RESULT([ ])



dnl -- COMMON SUPPORT TOOLS ------------------------------------------------------------------

AC_MSG_RESULT([Locating common support programs:])

AC_PATH_PROG(RANLIB, ranlib, echo, $PATH)
AC_PROG_INSTALL

unset BASH
AC_PATH_PROG(BASH, bash, $PATH)
AC_PATH_PROG(MAKE, make, $PATH)
AC_PATH_PROG(CVS, cvs, $PATH)
AC_PATH_PROG(CHMOD, chmod, $PATH)
AC_PATH_PROG(CHOWN, chown, $PATH)
AC_PATH_PROG(DIFF, diff, $PATH)
AC_PATH_PROG(XDIFF, xdiff, $PATH)
AC_PATH_PROG(KILL, kill, $PATH)
AC_PATH_PROG(SSH, ssh, $PATH)
AC_PATH_PROG(ID, id, $PATH)
AC_PATH_PROG(DF, df, $PATH) 
AC_PATH_PROG(MOZILLA, mozilla, $PATH)
AC_PATH_PROG(GIMP, gimp, $PATH)
AC_PATH_PROG(CHECKBOT, checkbot, echo, $PATH)

AC_MSG_RESULT([ ])




dnl -- JAVA TOOLS ----------------------------------------------------------------------------

AC_MSG_RESULT([Locating the Java development tools:])

AC_PATH_PROG(JAVA,    java,    $PATH)
AC_PATH_PROG(JAVA_C,  javac,   $PATH)
AC_PATH_PROG(JAVA_CC, javacc,  $PATH)
AC_PATH_PROG(JAVA_H,  javah,   $PATH)
AC_PATH_PROG(JAVADOC, javadoc, $PATH)
AC_PATH_PROG(JAR,     jar,     $PATH)


AC_MSG_CHECKING([java include])

AC_SUBST(JAVA_INC)
JAVA_INC=`dirname $JAVA`/../include

AC_MSG_RESULT([$JAVA_INC])

AC_MSG_RESULT([ ])



dnl ------------------------------------------------------------------------------------------
dnl   Checks for libraries.	
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Checks for header files.
dnl ------------------------------------------------------------------------------------------

AC_MSG_RESULT([Locating C system headers:])

AC_CHECK_HEADERS([math.h errno.h pwd.h dlfcn.h libgen.h time.h dirent.h ctype.h])
AC_CHECK_HEADERS([fcntl.h fam.h select.h signal.h utime.h])      
AC_CHECK_HEADERS([sys/time.h sys/param.h sys/utsname.h sys/wait.h sys/resource.h])  
AC_CHECK_HEADERS([sys/statfs.h])
AC_CHECK_HEADERS([sys/socket.h netdb.h netinet/in.h arpa/inet.h])

AC_MSG_RESULT([ ])


AC_MSG_RESULT([Locating Basic C++ headers:])

AC_CHECK_HEADERS([stdexcept])
AC_CHECK_HEADERS([float.h])
AC_CHECK_HEADERS([cassert assert.h], [break])
AC_CHECK_HEADERS([climits limits.h], [break])
AC_CHECK_HEADERS([cstdlib stdlib.h], [break])
AC_CHECK_HEADERS([cstdio stdio.h], [break])
AC_CHECK_HEADERS([cstring string.h], [break])
AC_CHECK_HEADERS([iostream iostream.h], [break])
AC_CHECK_HEADERS([fstream fstream.h], [break])
AC_CHECK_HEADERS([sstream], [break])
AC_CHECK_HEADERS([iomanip iomanip.h], [break])
AC_CHECK_HEADERS([iterator])
AC_CHECK_HEADERS([algorithm algobase algobase.h], [break])

AC_MSG_RESULT([ ])


AC_MSG_RESULT([Locating STL headers:])

AC_CHECK_HEADERS([hash_map ext/hash_map], [break])
AC_CHECK_HEADERS([hash_set ext/hash_set], [break])
AC_CHECK_HEADERS([slist ext/slist], [break])
AC_CHECK_HEADERS([stack deque list set map vector])

AC_MSG_RESULT([ ])


dnl ------------------------------------------------------------------------------------------
dnl   Checks for typedefs.
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Checks for structures.
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Checks for compiler characteristics.
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Checks for library functions.
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Checks for system services.
dnl ------------------------------------------------------------------------------------------


dnl ------------------------------------------------------------------------------------------
dnl   Miscellaneous stuff.
dnl ------------------------------------------------------------------------------------------

AC_DEFINE_UNQUOTED(TEST_DATA_DIR, ["${srcdir}/data"], 
                   [Directory to find data files used by regression tests])

AC_SUBST(BUILD_NAME)
BUILD_NAME="${host}-${BUILD_MODE}"
AC_DEFINE_UNQUOTED(BUILD_NAME, "$BUILD_NAME", 
                   [Define a unique host architecture and build mode string.])


dnl ------------------------------------------------------------------------------------------
dnl   Output files.
dnl ------------------------------------------------------------------------------------------

AC_MSG_RESULT([Cooking configurable files:])

AC_CONFIG_FILES([
  Makefile

  docs/Makefile 
  docs/images/Makefile
  docs/images/node-icons/Makefile
  docs/images/browser-icons/Makefile
  docs/images/javadoc/Makefile

  docs/javadoc/Makefile

  docs/man/Makefile
  docs/man/plfilemgr.src.html
  docs/man/pljobmgr.src.html
  docs/man/plmaster.src.html
  docs/man/plplugin.src.html
  docs/man/plpluginmgr.src.html
  docs/man/plqueuemgr.src.html
  docs/man/plrestore.src.html
  docs/man/plscript.src.html
  docs/man/plui.src.html
  docs/manuals/Makefile

  src/Makefile
  src/java/Makefile
  src/java/us/Makefile
  src/java/us/temerity/Makefile
  src/java/us/temerity/pipeline/Makefile
  src/java/us/temerity/pipeline/PackageInfo.java.src
  src/java/us/temerity/pipeline/bootstrap/BootStrapLoader.java.in
  src/java/us/temerity/pipeline/core/VerifiedApp.java
  src/java/us/temerity/pipeline/laf/scripts/filter-fonts
  src/java/us/temerity/pipeline/laf/scripts/filter-textures
  src/java/us/temerity/pipeline/laf/scripts/radial-menu
  src/java/us/temerity/pipeline/laf/scripts/build-web-icons
  src/java/us/temerity/pipeline/native/Makefile
  src/java/us/temerity/pipeline/plugin/Makefile
  src/java/us/temerity/pipeline/tests/Makefile
  src/java/us/temerity/pipeline/tests/TestInfo.java

  src/java/scripts/Makefile
  src/java/scripts/plfilemgr
  src/java/scripts/pljobmgr
  src/java/scripts/plmaster
  src/java/scripts/plplugin
  src/java/scripts/plpluginmgr
  src/java/scripts/plqueuemgr
  src/java/scripts/plscript
  src/java/scripts/plui
  src/java/scripts/plrestoreA
  src/java/scripts/plrestoreB

  src/java/scripts/debug/Makefile
  src/java/scripts/debug/plfilemgr
  src/java/scripts/debug/pljobmgr
  src/java/scripts/debug/plmaster
  src/java/scripts/debug/plplugin
  src/java/scripts/debug/plpluginmgr
  src/java/scripts/debug/plqueuemgr
  src/java/scripts/debug/plscript
  src/java/scripts/debug/plui

  src/java/scripts/profile/Makefile
  src/java/scripts/profile/plfilemgr
  src/java/scripts/profile/pljobmgr
  src/java/scripts/profile/plmaster
  src/java/scripts/profile/plplugin
  src/java/scripts/profile/plpluginmgr
  src/java/scripts/profile/plqueuemgr
  src/java/scripts/profile/plscript
  src/java/scripts/profile/plui

  src/java/scripts/debug-profile/Makefile
  src/java/scripts/debug-profile/plfilemgr
  src/java/scripts/debug-profile/pljobmgr
  src/java/scripts/debug-profile/plmaster
  src/java/scripts/debug-profile/plplugin
  src/java/scripts/debug-profile/plpluginmgr
  src/java/scripts/debug-profile/plqueuemgr
  src/java/scripts/debug-profile/plscript
  src/java/scripts/debug-profile/plui

  src/java/share/Makefile

  src/utils/Makefile
  src/utils/src/Makefile
  src/utils/src/PackageInfo.cc.src

  rpm/Makefile
  rpm/pipeline.spec
  rpm/plqueuemgr.spec
  rpm/plutils.spec
  rpm/plmaster.spec
  rpm/headerB
  rpm/rpmrc
  rpm/rpmmacros
])

AC_OUTPUT


